{"errors":[],"warnings":[],"version":"2.6.1","hash":"845a7dc0ed3b21e71992","time":777,"publicPath":"","assetsByChunkName":{"vendor":"vendor.4ae81b3f90aacd8f0ac8.js","main":"main.235ebef8489c38b081d2.js","manifest":"manifest.4a9de6ac115257553e23.js"},"assets":[{"name":"vendor.4ae81b3f90aacd8f0ac8.js","size":555145,"chunks":[0],"chunkNames":["vendor"],"emitted":true,"isOverSizeLimit":true},{"name":"main.235ebef8489c38b081d2.js","size":631486,"chunks":[1],"chunkNames":["main"],"emitted":true,"isOverSizeLimit":true},{"name":"manifest.4a9de6ac115257553e23.js","size":6022,"chunks":[2],"chunkNames":["manifest"],"emitted":true}],"entrypoints":{"main":{"chunks":[2,0,1],"assets":["manifest.4a9de6ac115257553e23.js","vendor.4ae81b3f90aacd8f0ac8.js","main.235ebef8489c38b081d2.js"],"isOverSizeLimit":true}},"chunks":[{"id":0,"rendered":true,"initial":true,"entry":false,"extraAsync":false,"size":554393,"names":["vendor"],"files":["vendor.4ae81b3f90aacd8f0ac8.js"],"hash":"4ae81b3f90aacd8f0ac8","parents":[2],"origins":[]},{"id":1,"rendered":true,"initial":true,"entry":false,"extraAsync":false,"size":631187,"names":["main"],"files":["main.235ebef8489c38b081d2.js"],"hash":"235ebef8489c38b081d2","parents":[0],"origins":[{"moduleId":4,"module":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/app.js","moduleIdentifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/app.js","moduleName":"./app/app.js","loc":"","name":"main","reasons":[]}]},{"id":2,"rendered":true,"initial":true,"entry":true,"extraAsync":false,"size":0,"names":["manifest"],"files":["manifest.4a9de6ac115257553e23.js"],"hash":"4a9de6ac115257553e23","parents":[],"origins":[]}],"modules":[{"id":0,"identifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/lodash/lodash.js","name":"./~/lodash/lodash.js","index":2,"index2":3,"size":539588,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/app.js","issuerId":4,"issuerName":"./app/app.js","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":2,"moduleIdentifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/lib/idMap/idMapModule.js","module":"./lib/idMap/idMapModule.js","moduleName":"./lib/idMap/idMapModule.js","type":"cjs require","userRequest":"lodash","loc":"6:10-27"},{"moduleId":4,"moduleIdentifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/app.js","module":"./app/app.js","moduleName":"./app/app.js","type":"cjs require","userRequest":"lodash","loc":"7:10-27"}],"usedExports":true,"providedExports":null,"depth":1,"source":"/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.4';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      reLeadingDot = /^\\./,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:(?:1st|2nd|3rd|(?![123])\\\\dth)\\\\b)',\n      rsOrdUpper = '\\\\d*(?:(?:1ST|2ND|3RD|(?![123])\\\\dTH)\\\\b)',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Adds the key-value `pair` to `map`.\n   *\n   * @private\n   * @param {Object} map The map to modify.\n   * @param {Array} pair The key-value pair to add.\n   * @returns {Object} Returns `map`.\n   */\n  function addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n  }\n\n  /**\n   * Adds `value` to `set`.\n   *\n   * @private\n   * @param {Object} set The set to modify.\n   * @param {*} value The value to add.\n   * @returns {Object} Returns `set`.\n   */\n  function addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n  }\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, baseClone, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        if (isObject(srcValue)) {\n          stack || (stack = new Stack);\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = object[key],\n          srcValue = source[key],\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      var index = -1;\n      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array == null ? 0 : array.length,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `map`.\n     *\n     * @private\n     * @param {Object} map The map to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned map.\n     */\n    function cloneMap(map, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);\n      return arrayReduce(array, addMapEntry, new map.constructor);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of `set`.\n     *\n     * @private\n     * @param {Object} set The set to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned set.\n     */\n    function cloneSet(set, isDeep, cloneFunc) {\n      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);\n      return arrayReduce(array, addSetEntry, new set.constructor);\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(array);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {Function} cloneFunc The function to clone values.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, cloneFunc, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return cloneMap(object, isDeep, cloneFunc);\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return cloneSet(object, isDeep, cloneFunc);\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return !!length &&\n        (typeof value == 'number' || reIsUint.test(value)) &&\n        (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (reLeadingDot.test(string)) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, string) {\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            result = wait - timeSinceLastCall;\n\n        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(args) {\n      args.push(undefined, customDefaultsAssignIn);\n      return apply(assignInWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      var sourceURL = '//# sourceURL=' +\n        ('sourceURL' in options\n          ? options.sourceURL\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = (lodashFunc.name + ''),\n            names = realNames[key] || (realNames[key] = []);\n\n        names.push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    define(function() {\n      return _;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = _)._ = _;\n    // Export for CommonJS support.\n    freeExports._ = _;\n  }\n  else {\n    // Export to the global object.\n    root._ = _;\n  }\n}.call(this));\n"},{"id":1,"identifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/lib/idMap/idMapData.js","name":"./lib/idMap/idMapData.js","index":1,"index2":0,"size":616963,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[1],"assets":[],"issuer":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/app.js","issuerId":4,"issuerName":"./app/app.js","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":4,"moduleIdentifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/app.js","module":"./app/app.js","moduleName":"./app/app.js","type":"cjs require","userRequest":"../lib/idMap/idMapData","loc":"6:20-53"}],"usedExports":true,"providedExports":null,"depth":1,"source":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = { \"4f28db119c04d80001000007\": { \"_id\": { \"$oid\": \"4f28db119c04d80001000007\" }, \"acts_per_group_ids\": [{ \"$oid\": \"4f850f9079626d0001000007\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2012-02-01T06:26:25.000Z\" }, \"mfg\": \"\", \"model\": \"\", \"name\": \"microscope\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-25T22:12:30.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f2b1e4fccb71d0001000015\": { \"_id\": { \"$oid\": \"4f2b1e4fccb71d0001000015\" }, \"acts_per_group_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }, { \"$oid\": \"50b1734ce1081a0002000006\" }, { \"$oid\": \"506294db71e54a0002000005\" }, { \"$oid\": \"51032d9d4965160002000006\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }, { \"$oid\": \"4f850f9079626d0001000007\" }, { \"$oid\": \"50c6b34fe8e3e10002000002\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2012-02-02T23:37:51.000Z\" }, \"mfg\": \"\", \"model\": \"\", \"name\": \"magnifying glass\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f2f32386e0c410001000010\": { \"_id\": { \"$oid\": \"4f2f32386e0c410001000010\" }, \"acts_per_student_ids\": [{ \"$oid\": \"4fc454d9a4d1f8000300000d\" }, { \"$oid\": \"5013b345b31236000200000a\" }, { \"$oid\": \"5013e0ccb312360002000032\" }, { \"$oid\": \"501bdbc281a5270002000008\" }, { \"$oid\": \"501c098a8c154c000200000f\" }, { \"$oid\": \"501c3a338c154c0002000036\" }, { \"$oid\": \"5011f5495dc28d000200000a\" }, { \"$oid\": \"5057b64c443f300002000008\" }, { \"$oid\": \"50621a5695dae60002000026\" }, { \"$oid\": \"503d53a9f272270002000022\" }, { \"$oid\": \"505fabe323d0730002000008\" }, { \"$oid\": \"4fa5b9e74497bf0001000006\" }, { \"$oid\": \"5069cd18246eca0002000004\" }, { \"$oid\": \"50985eb8985192000200006a\" }, { \"$oid\": \"506294db71e54a0002000005\" }, { \"$oid\": \"509746a1985192000200000a\" }, { \"$oid\": \"50e1269c3df52d0002000004\" }, { \"$oid\": \"4f53d9a7feb00c000100000e\" }, { \"$oid\": \"4f7a92c8965e190001000009\" }, { \"$oid\": \"51032d9d4965160002000006\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }, { \"$oid\": \"4f850f9079626d0001000007\" }, { \"$oid\": \"4f87648adc4c210001000060\" }, { \"$oid\": \"4f78ee972ab40b0001000005\" }, { \"$oid\": \"513a45c112c8310002000003\" }, { \"$oid\": \"4f9e184c7b922d0001000006\" }, { \"$oid\": \"50564226bc0c230002000004\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-02-06T01:51:52.000Z\" }, \"mfg\": \"\", \"model\": \"\", \"name\": \"science journal\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f459117eeaf0a0001000013\": { \"_id\": { \"$oid\": \"4f459117eeaf0a0001000013\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f6018b5da7241000100001b\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-02-23T01:06:31.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"100 mL Beaker\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-03-14T05:16:15.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f459141eeaf0a0001000017\": { \"_id\": { \"$oid\": \"4f459141eeaf0a0001000017\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4f459103eeaf0a000100000f\" }, { \"$oid\": \"4fa66f22c2feba0001000014\" }], \"acts_per_group_ids\": [{ \"$oid\": \"5057b64c443f300002000008\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }, { \"$oid\": \"54400b299394a00002000005\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-02-23T01:07:13.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"thermometer\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f459155eeaf0a000100001b\": { \"_id\": { \"$oid\": \"4f459155eeaf0a000100001b\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4f459103eeaf0a000100000f\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-02-23T01:07:33.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Antacid Tablets\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-03-14T03:23:49.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f459166eeaf0a000100001f\": { \"_id\": { \"$oid\": \"4f459166eeaf0a000100001f\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4f459103eeaf0a000100000f\" }], \"acts_per_group_ids\": [{ \"$oid\": \"4f6018b5da7241000100001b\" }, { \"$oid\": \"4fc454d9a4d1f8000300000d\" }, { \"$oid\": \"5013e0ccb312360002000032\" }, { \"$oid\": \"5069cd18246eca0002000004\" }, { \"$oid\": \"508ee3b5d35ec10002000018\" }, { \"$oid\": \"51032d9d4965160002000006\" }, { \"$oid\": \"506120e983f605000200003c\" }], \"acts_per_student_ids\": [{ \"$oid\": \"4fa66f22c2feba0001000014\" }, { \"$oid\": \"50621a5695dae60002000026\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-02-23T01:07:50.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Cups, plastic or paper\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-04-22T04:24:20.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f45917deeaf0a0001000023\": { \"_id\": { \"$oid\": \"4f45917deeaf0a0001000023\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4f459103eeaf0a000100000f\" }], \"acts_per_group_ids\": [{ \"$oid\": \"54400b299394a00002000005\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-02-23T01:08:13.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"warm water\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f459184eeaf0a0001000027\": { \"_id\": { \"$oid\": \"4f459184eeaf0a0001000027\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4f459103eeaf0a000100000f\" }], \"acts_per_group_ids\": [{ \"$oid\": \"4fa66f22c2feba0001000014\" }, { \"$oid\": \"54400b299394a00002000005\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-02-23T01:08:20.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"cold water\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f53da3bfeb00c0001000012\": { \"_id\": { \"$oid\": \"4f53da3bfeb00c0001000012\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f53d9a7feb00c000100000e\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-03-04T21:10:19.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Brown paper bags\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-03T20:41:21.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f53db59feb00c0001000016\": { \"_id\": { \"$oid\": \"4f53db59feb00c0001000016\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f53d9a7feb00c000100000e\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-03-04T21:15:05.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"items to fill bags\", \"note\": \"Some example items might be eating utensils (e.g. fork, spoon), ruler, garden gloves, penny or quarter, pen, food items (e.g. onion or lemon inside a plastic bag, potato chips, cashews), or a rock.&nbsp;\", \"updated_at\": { \"$date\": \"2013-03-03T20:41:21.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f53e4a1feb00c0001000045\": { \"_id\": { \"$oid\": \"4f53e4a1feb00c0001000045\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-03-04T21:54:41.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"glass\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-04-22T04:26:33.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f600c49da7241000100000c\": { \"_id\": { \"$oid\": \"4f600c49da7241000100000c\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4f459103eeaf0a000100000f\" }, { \"$oid\": \"5013e0ccb312360002000032\" }, { \"$oid\": \"5011f5495dc28d000200000a\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-03-14T03:11:05.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"jug\", \"note\": \"The jug should have a spout that allows you to pour liquid out of it. Most jugs that you find will be plastic. The ideal volume of a jug will be at least 1 quart or ~950ml.&nbsp;\", \"updated_at\": { \"$date\": \"2012-09-25T02:42:08.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f600e20da72410001000011\": { \"_id\": { \"$oid\": \"4f600e20da72410001000011\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f6018b5da7241000100001b\" }, { \"$oid\": \"5013e0ccb312360002000032\" }, { \"$oid\": \"508ee3b5d35ec10002000018\" }, { \"$oid\": \"506120e983f605000200003c\" }, { \"$oid\": \"50564226bc0c230002000004\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-03-14T03:18:56.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"spoons, plastic\", \"note\": \"<br>\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f600f13da72410001000016\": { \"_id\": { \"$oid\": \"4f600f13da72410001000016\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4f459103eeaf0a000100000f\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"4f6018b5da7241000100001b\" }, { \"$oid\": \"4f7b369b965e190001000021\" }, { \"$oid\": \"503d53a9f272270002000022\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2012-03-14T03:22:59.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"safety goggles\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-10-02T21:53:53.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f601e97da72410001000028\": { \"_id\": { \"$oid\": \"4f601e97da72410001000028\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4fc454d9a4d1f8000300000d\" }, { \"$oid\": \"50564226bc0c230002000004\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-03-14T04:29:11.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"salt\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f601ea4da7241000100002c\": { \"_id\": { \"$oid\": \"4f601ea4da7241000100002c\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5013e0ccb312360002000032\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-03-14T04:29:24.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Pepper\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-08-04T05:00:24.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f601f2bda72410001000031\": { \"_id\": { \"$oid\": \"4f601f2bda72410001000031\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"5011f5495dc28d000200000a\" }], \"acts_per_group_ids\": [{ \"$oid\": \"4f6018b5da7241000100001b\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-03-14T04:31:39.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"sharpie, black\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-09-25T02:42:08.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f602197da7241000100003d\": { \"_id\": { \"$oid\": \"4f602197da7241000100003d\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f6018b5da7241000100001b\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-03-14T04:41:59.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Magnesium Sulfate\", \"note\": \"Also known as \\\"Epsom Salt\\\".&nbsp;\", \"updated_at\": { \"$date\": \"2012-03-14T05:16:15.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f602214da72410001000043\": { \"_id\": { \"$oid\": \"4f602214da72410001000043\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f6018b5da7241000100001b\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-03-14T04:44:04.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Calcium Chloride\", \"note\": \"HTH Calcium Plus is a popular brand.&nbsp;<div><br></div><div>Or search for a product that prevents corrosion damage to pools by boosting calcium content.&nbsp;</div>\", \"updated_at\": { \"$date\": \"2012-03-14T05:16:15.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f6022e7da72410001000048\": { \"_id\": { \"$oid\": \"4f6022e7da72410001000048\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5013e0ccb312360002000032\" }, { \"$oid\": \"5069cd18246eca0002000004\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-03-14T04:47:35.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"bowl, plastic or metal\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-11-11T02:55:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f78eeef2ab40b0001000009\": { \"_id\": { \"$oid\": \"4f78eeef2ab40b0001000009\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"501bdbc281a5270002000008\" }, { \"$oid\": \"4f78ee972ab40b0001000005\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-02T00:12:31.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"2L plastic bottle\", \"note\": \"Soda bottles work best.\", \"updated_at\": { \"$date\": \"2013-04-11T05:33:19.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f78ef032ab40b000100000d\": { \"_id\": { \"$oid\": \"4f78ef032ab40b000100000d\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f87648adc4c210001000060\" }, { \"$oid\": \"4f78ee972ab40b0001000005\" }, { \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-02T00:12:51.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"bottle cap\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-04-22T05:19:29.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f78f0522ab40b0001000025\": { \"_id\": { \"$oid\": \"4f78f0522ab40b0001000025\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5057b64c443f300002000008\" }, { \"$oid\": \"4f78ee972ab40b0001000005\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-02T00:18:26.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"large bucket or plastic container\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-04-11T05:33:19.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f78f0cc2ab40b0001000033\": { \"_id\": { \"$oid\": \"4f78f0cc2ab40b0001000033\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4f78ee972ab40b0001000005\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-02T00:20:28.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"teapot with hot water\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-04-11T05:33:19.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f7b44497a11da0001000008\": { \"_id\": { \"$oid\": \"4f7b44497a11da0001000008\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-03T18:41:15.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"light bulb holder\", \"note\": \"The holder must have two metal points at which you can connect wires to form your electrical circuit.&nbsp;\", \"updated_at\": { \"$date\": \"2012-04-22T04:27:55.000Z\" }, \"url\": \"http://www.hometrainingtools.com/bulb-socket-1-bulb/p/EL-LAMPSOC/\", \"T\": \"material\" }, \"4f7b44827a11da000100000c\": { \"_id\": { \"$oid\": \"4f7b44827a11da000100000c\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-03T18:42:11.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Light Bulb\", \"note\": \"Make sure it's compatible with the light bulb holder.&nbsp;\", \"updated_at\": { \"$date\": \"2012-04-03T19:35:06.000Z\" }, \"url\": \"http://www.hometrainingtools.com/bulb-screw-base-1-5-volt/p/EL-LAMP1.5/\", \"T\": \"material\" }, \"4f7b46e17a11da0001000011\": { \"_id\": { \"$oid\": \"4f7b46e17a11da0001000011\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-03T18:52:17.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Battery, C size\", \"note\": \"<br>\", \"updated_at\": { \"$date\": \"2012-04-03T19:35:06.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f7b46ff7a11da0001000015\": { \"_id\": { \"$oid\": \"4f7b46ff7a11da0001000015\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-03T18:52:47.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"battery holder, C size, 2 wire leads\", \"note\": \"One wire lead extending from each end of the holder.&nbsp;\", \"updated_at\": { \"$date\": \"2012-04-22T04:25:42.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f7b4a857a11da000100001a\": { \"_id\": { \"$oid\": \"4f7b4a857a11da000100001a\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-03T19:07:49.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Copper wire, insulated, 30 cm\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-04-03T19:35:06.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f7b4a997a11da000100001e\": { \"_id\": { \"$oid\": \"4f7b4a997a11da000100001e\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-03T19:08:09.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Eraser\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-04-11T05:15:59.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f7b4aa67a11da0001000022\": { \"_id\": { \"$oid\": \"4f7b4aa67a11da0001000022\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }, { \"$oid\": \"503d53a9f272270002000022\" }], \"acts_per_student_ids\": [{ \"$oid\": \"5011f5495dc28d000200000a\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-03T19:08:22.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"paper clip\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-10-02T21:53:53.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f7b4ba77a11da0001000026\": { \"_id\": { \"$oid\": \"4f7b4ba77a11da0001000026\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-03T19:12:39.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"copper wire, insulated, 5 cm\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-04-22T04:26:13.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f7b4bfa7a11da000100002a\": { \"_id\": { \"$oid\": \"4f7b4bfa7a11da000100002a\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-03T19:14:02.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"wire cutter\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-04-22T04:30:26.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f7b4c777a11da000100002f\": { \"_id\": { \"$oid\": \"4f7b4c777a11da000100002f\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-03T19:16:07.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Meterstick\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-04-03T19:35:06.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f850fa779626d000100000b\": { \"_id\": { \"$oid\": \"4f850fa779626d000100000b\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"4f850f9079626d0001000007\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-11T04:59:19.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"pinto bean\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-25T22:12:30.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f85117d79626d000100001a\": { \"_id\": { \"$oid\": \"4f85117d79626d000100001a\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"5013e0ccb312360002000032\" }, { \"$oid\": \"501bdbc281a5270002000008\" }], \"acts_per_group_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }], \"acts_per_student_ids\": [{ \"$oid\": \"4f850f9079626d0001000007\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-11T05:07:09.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"paper towels\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-25T22:12:30.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f85119f79626d0001000020\": { \"_id\": { \"$oid\": \"4f85119f79626d0001000020\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-11T05:07:43.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"plastic knife\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-11-12T21:51:53.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f8512f879626d0001000035\": { \"_id\": { \"$oid\": \"4f8512f879626d0001000035\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f850f9079626d0001000007\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-11T05:13:29.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"plastic stands for 8.5 X 11 paper\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-25T22:12:30.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f8755a3dc4c21000100001f\": { \"_id\": { \"$oid\": \"4f8755a3dc4c21000100001f\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"4f7a92c8965e190001000009\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-12T22:22:27.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"empty Pringles can or small cardboard tube\", \"note\": \"A large cardboard poster tube works well if it is cut into 6-10 inch tubes. Empty toilet paper rolls will work, but they lack the sturdiness of the can and heavy cardboard, so ultimately the children crush these.\", \"updated_at\": { \"$date\": \"2013-03-17T01:48:19.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f8755f1dc4c210001000023\": { \"_id\": { \"$oid\": \"4f8755f1dc4c210001000023\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"4f7a92c8965e190001000009\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-12T22:23:45.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"construction paper\", \"note\": \"One approximately six inch square of construction paper is needed to cover the opening of the can. Additional construction paper is needed to cover the cans in order to decorate it.\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f875602dc4c210001000027\": { \"_id\": { \"$oid\": \"4f875602dc4c210001000027\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"504670f0d69d6e000200001a\" }, { \"$oid\": \"4f7a92c8965e190001000009\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-12T22:24:02.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"pushpin\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-17T01:48:19.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f875610dc4c21000100002b\": { \"_id\": { \"$oid\": \"4f875610dc4c21000100002b\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f7a92c8965e190001000009\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-12T22:24:16.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Constellation Patterns Handout\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-17T01:48:19.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f87563adc4c21000100002f\": { \"_id\": { \"$oid\": \"4f87563adc4c21000100002f\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"504670f0d69d6e000200001a\" }, { \"$oid\": \"50985eb8985192000200006a\" }, { \"$oid\": \"506294db71e54a0002000005\" }, { \"$oid\": \"50e1269c3df52d0002000004\" }, { \"$oid\": \"506120e983f605000200003c\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [{ \"$oid\": \"502994905f6eb10002000013\" }, { \"$oid\": \"4f7a92c8965e190001000009\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-12T22:24:58.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"tape\", \"note\": \"A few pieces of tape are needed per student.\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f87564edc4c210001000033\": { \"_id\": { \"$oid\": \"4f87564edc4c210001000033\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5013e0ccb312360002000032\" }, { \"$oid\": \"501c098a8c154c000200000f\" }, { \"$oid\": \"50985eb8985192000200006a\" }, { \"$oid\": \"506294db71e54a0002000005\" }, { \"$oid\": \"513a45c112c8310002000003\" }, { \"$oid\": \"4f9e184c7b922d0001000006\" }], \"acts_per_student_ids\": [{ \"$oid\": \"50621a5695dae60002000026\" }, { \"$oid\": \"4f7a92c8965e190001000009\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-12T22:25:18.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"scissors\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f875674dc4c210001000037\": { \"_id\": { \"$oid\": \"4f875674dc4c210001000037\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"4f7a92c8965e190001000009\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-12T22:25:56.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"star finder handout\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-17T01:48:19.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f87572bdc4c21000100003c\": { \"_id\": { \"$oid\": \"4f87572bdc4c21000100003c\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-12T22:28:59.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"thick mat or magazine\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-04-12T22:44:18.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f875ab0dc4c210001000040\": { \"_id\": { \"$oid\": \"4f875ab0dc4c210001000040\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [{ \"$oid\": \"4f7a92c8965e190001000009\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-12T22:44:00.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"rubberband\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f875ad2dc4c210001000044\": { \"_id\": { \"$oid\": \"4f875ad2dc4c210001000044\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4f7a92c8965e190001000009\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-12T22:44:34.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"nail, small\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-17T01:48:19.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f875adddc4c210001000048\": { \"_id\": { \"$oid\": \"4f875adddc4c210001000048\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4f7a92c8965e190001000009\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-12T22:44:45.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"hammer, small\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-17T01:48:19.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f875d0cdc4c21000100004d\": { \"_id\": { \"$oid\": \"4f875d0cdc4c21000100004d\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"acts_per_student_ids\": [{ \"$oid\": \"4f9e184c7b922d0001000006\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-12T22:54:04.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"stickers\", \"note\": \"Space or star stickers would make the constellation viewer festive.\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f8b149df40044000100000f\": { \"_id\": { \"$oid\": \"4f8b149df40044000100000f\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-15T18:34:05.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"notecard, 4X6\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-04-15T19:22:28.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f8b2026f400440001000038\": { \"_id\": { \"$oid\": \"4f8b2026f400440001000038\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f87648adc4c210001000060\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-15T19:23:18.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"meter stick\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-04-11T05:31:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f8b2038f40044000100003c\": { \"_id\": { \"$oid\": \"4f8b2038f40044000100003c\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"5088986a99b7220002000019\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }], \"acts_per_group_ids\": [{ \"$oid\": \"4f87648adc4c210001000060\" }, { \"$oid\": \"50564226bc0c230002000004\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-15T19:23:36.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"masking tape\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f8b2064f400440001000040\": { \"_id\": { \"$oid\": \"4f8b2064f400440001000040\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f87648adc4c210001000060\" }, { \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"acts_per_student_ids\": [{ \"$oid\": \"50ddff045f296e0002000004\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-15T19:24:20.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"cardboard\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f8b2070f400440001000044\": { \"_id\": { \"$oid\": \"4f8b2070f400440001000044\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"51032d9d4965160002000006\" }, { \"$oid\": \"51453278d960ad000200000a\" }], \"acts_per_group_ids\": [{ \"$oid\": \"4f87648adc4c210001000060\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-15T19:24:32.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"books\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-04-11T05:31:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f8b2081f40044000100004a\": { \"_id\": { \"$oid\": \"4f8b2081f40044000100004a\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f87648adc4c210001000060\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-15T19:24:49.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"coins\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-04-11T05:31:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f8b2b8df400440001000051\": { \"_id\": { \"$oid\": \"4f8b2b8df400440001000051\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"5011f5495dc28d000200000a\" }], \"acts_per_group_ids\": [{ \"$oid\": \"501c098a8c154c000200000f\" }, { \"$oid\": \"504670f0d69d6e000200001a\" }, { \"$oid\": \"4f87648adc4c210001000060\" }, { \"$oid\": \"513a45c112c8310002000003\" }], \"acts_per_student_ids\": [{ \"$oid\": \"501c3a338c154c0002000036\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-15T20:11:57.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"ruler\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-05-01T01:15:40.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f9e18907b922d0001000010\": { \"_id\": { \"$oid\": \"4f9e18907b922d0001000010\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"4f9e184c7b922d0001000006\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-30T04:44:00.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"commercially purchased diffraction grating\", \"note\": \"<font>(plastic material with 13,440 grooves per square inch)</font>\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f9e18a47b922d0001000014\": { \"_id\": { \"$oid\": \"4f9e18a47b922d0001000014\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"4f9e184c7b922d0001000006\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-30T04:44:20.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"cardboard tube\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f9e18c77b922d0001000018\": { \"_id\": { \"$oid\": \"4f9e18c77b922d0001000018\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"4f9e184c7b922d0001000006\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-30T04:44:55.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"circle stickers\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f9e1a5b7b922d0001000022\": { \"_id\": { \"$oid\": \"4f9e1a5b7b922d0001000022\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"50b1734ce1081a0002000006\" }], \"acts_per_group_ids\": [{ \"$oid\": \"51032d9d4965160002000006\" }, { \"$oid\": \"51453278d960ad000200000a\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"acts_per_student_ids\": [{ \"$oid\": \"501c3a338c154c0002000036\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-30T04:51:39.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"crayons\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f9e1f107b922d0001000036\": { \"_id\": { \"$oid\": \"4f9e1f107b922d0001000036\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-04-30T05:11:44.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"white paper plate\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-21T17:49:40.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f9e1f217b922d000100003a\": { \"_id\": { \"$oid\": \"4f9e1f217b922d000100003a\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"513a45c112c8310002000003\" }, { \"$oid\": \"4f9e184c7b922d0001000006\" }], \"acts_per_student_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }, { \"$oid\": \"5013e0ccb312360002000032\" }, { \"$oid\": \"501bdbc281a5270002000008\" }, { \"$oid\": \"501c098a8c154c000200000f\" }, { \"$oid\": \"501c3a338c154c0002000036\" }, { \"$oid\": \"51032d9d4965160002000006\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-30T05:12:01.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"pencil\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f9ed2807b922d000100005f\": { \"_id\": { \"$oid\": \"4f9ed2807b922d000100005f\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"506294db71e54a0002000005\" }, { \"$oid\": \"4f9e184c7b922d0001000006\" }], \"acts_per_group_ids\": [{ \"$oid\": \"50985eb8985192000200006a\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-30T17:57:20.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"hole punch\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f9ee29d7b922d0001000064\": { \"_id\": { \"$oid\": \"4f9ee29d7b922d0001000064\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f9e184c7b922d0001000006\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-04-30T19:06:05.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"prism\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fa0b82b0d3d050001000013\": { \"_id\": { \"$oid\": \"4fa0b82b0d3d050001000013\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4fa0b76a0d3d050001000005\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-05-02T04:29:31.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"recycling items\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-07-07T19:09:49.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fa0cbcd0d3d05000100003f\": { \"_id\": { \"$oid\": \"4fa0cbcd0d3d05000100003f\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"501c3a338c154c0002000036\" }, { \"$oid\": \"504670f0d69d6e000200001a\" }, { \"$oid\": \"50985eb8985192000200006a\" }, { \"$oid\": \"50e1269c3df52d0002000004\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [{ \"$oid\": \"4fa0b76a0d3d050001000005\" }, { \"$oid\": \"4fa5b9e74497bf0001000006\" }, { \"$oid\": \"502994905f6eb10002000013\" }, { \"$oid\": \"50b1734ce1081a0002000006\" }, { \"$oid\": \"50c6b34fe8e3e10002000002\" }, { \"$oid\": \"506120e983f605000200003c\" }, { \"$oid\": \"50ddff045f296e0002000004\" }, { \"$oid\": \"54400b299394a00002000005\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-05-02T05:53:17.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"handouts\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fa16ee50d3d050001000059\": { \"_id\": { \"$oid\": \"4fa16ee50d3d050001000059\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4f53d9a7feb00c000100000e\" }], \"acts_per_group_ids\": [{ \"$oid\": \"4fa0b76a0d3d050001000005\" }, { \"$oid\": \"506120e983f605000200003c\" }, { \"$oid\": \"54400b299394a00002000005\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-05-02T17:29:09.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"timer\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fa5bde44497bf0001000018\": { \"_id\": { \"$oid\": \"4fa5bde44497bf0001000018\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-05-05T23:55:16.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"bug magnifying jars\", \"note\": \"<font>If bug magnifying jars are not available, use plastic boxes with holes in them, glass jars with hole drilled in the lids or covered with&nbsp;cheesecloth, or berry containers. Anything&nbsp;see-through&nbsp;and breathable will do.</font>\", \"updated_at\": { \"$date\": \"2012-10-29T18:49:38.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fa5c4ce4497bf0001000026\": { \"_id\": { \"$oid\": \"4fa5c4ce4497bf0001000026\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-05-06T00:24:46.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"ladybugs\", \"note\": \"Ladybugs can be purchased at local gardening stores.&nbsp;Do this&nbsp;activity in autumn&nbsp;before the cold weather begins, or in spring&nbsp;when&nbsp;it’s warm.\", \"updated_at\": { \"$date\": \"2012-10-29T18:49:38.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fa5cc764497bf000100003b\": { \"_id\": { \"$oid\": \"4fa5cc764497bf000100003b\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-05-06T00:57:26.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"food scraps\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-10-29T18:49:38.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fab49b1feccef000100000d\": { \"_id\": { \"$oid\": \"4fab49b1feccef000100000d\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-05-10T04:53:05.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"8.5\\\" X 11\\\" acrylic stands\", \"note\": \"The photo stands are used when students need to have a diagram or photo to look at while they're doing observations.\", \"updated_at\": { \"$date\": \"2012-10-29T18:49:38.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fc3fa657fcc320003000011\": { \"_id\": { \"$oid\": \"4fc3fa657fcc320003000011\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4fc454d9a4d1f8000300000d\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-05-28T22:21:25.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"liquid laundry starch\", \"note\": \"<font><br></font>\", \"updated_at\": { \"$date\": \"2012-06-16T22:09:33.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fc3fa937fcc320003000015\": { \"_id\": { \"$oid\": \"4fc3fa937fcc320003000015\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4fc454d9a4d1f8000300000d\" }, { \"$oid\": \"50b1734ce1081a0002000006\" }, { \"$oid\": \"50985eb8985192000200006a\" }, { \"$oid\": \"50ddff045f296e0002000004\" }, { \"$oid\": \"50fb6911df018b0002000008\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-05-28T22:22:11.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"white glue\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-12-21T02:00:23.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fc3faf57fcc32000300001d\": { \"_id\": { \"$oid\": \"4fc3faf57fcc32000300001d\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4fc454d9a4d1f8000300000d\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-05-28T22:23:49.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"cornstarch\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-06-16T22:09:33.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fc40a6c5c38c50003000024\": { \"_id\": { \"$oid\": \"4fc40a6c5c38c50003000024\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4fc454d9a4d1f8000300000d\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-05-28T23:29:48.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"food coloring\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-06-16T22:09:33.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fc4552ca4d1f80003000015\": { \"_id\": { \"$oid\": \"4fc4552ca4d1f80003000015\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"5013e0ccb312360002000032\" }, { \"$oid\": \"501bdbc281a5270002000008\" }, { \"$oid\": \"5011f5495dc28d000200000a\" }], \"acts_per_group_ids\": [{ \"$oid\": \"4fc454d9a4d1f8000300000d\" }, { \"$oid\": \"51032d9d4965160002000006\" }], \"acts_per_student_ids\": [{ \"$oid\": \"50621a5695dae60002000026\" }, { \"$oid\": \"508ee3b5d35ec10002000018\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-05-29T04:48:44.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"water\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-17T03:29:50.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4fd167a76a51d70003000006\": { \"_id\": { \"$oid\": \"4fd167a76a51d70003000006\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5057b64c443f300002000008\" }, { \"$oid\": \"4f53d9a7feb00c000100000e\" }], \"acts_per_student_ids\": [{ \"$oid\": \"50621a5695dae60002000026\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-06-08T02:47:03.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"plastic bags\", \"note\": \"zip-loc-type bags that seal\", \"updated_at\": { \"$date\": \"2013-03-03T20:41:21.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50121fb15dc28d0002000017\": { \"_id\": { \"$oid\": \"50121fb15dc28d0002000017\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5013e0ccb312360002000032\" }, { \"$oid\": \"5011f5495dc28d000200000a\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-07-27T04:57:21.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Sturdy Container\", \"note\": \"<br>\", \"updated_at\": { \"$date\": \"2012-09-25T02:42:08.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"501220515dc28d000200001d\": { \"_id\": { \"$oid\": \"501220515dc28d000200001d\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"5011f5495dc28d000200000a\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2012-07-27T05:00:01.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Aluminum Foil\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-09-25T02:42:08.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5013b3b1b31236000200000e\": { \"_id\": { \"$oid\": \"5013b3b1b31236000200000e\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-07-28T09:41:05.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Periodic Table of Elements\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-08-04T04:59:42.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5013b3c9b312360002000012\": { \"_id\": { \"$oid\": \"5013b3c9b312360002000012\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"501c098a8c154c000200000f\" }], \"acts_per_student_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }, { \"$oid\": \"50621a5695dae60002000026\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-07-28T09:41:29.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"mfg\": \"\", \"model\": \"\", \"name\": \"clay\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-10-02T17:42:03.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5013b3eab312360002000016\": { \"_id\": { \"$oid\": \"5013b3eab312360002000016\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"51032d9d4965160002000006\" }], \"acts_per_student_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-07-28T09:42:02.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Toothpicks\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-17T03:29:50.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"501bdcf481a527000200000e\": { \"_id\": { \"$oid\": \"501bdcf481a527000200000e\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5057b64c443f300002000008\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-08-03T14:15:16.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"mfg\": \"\", \"model\": \"\", \"name\": \"duct tape\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-09-25T02:53:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"501c21858c154c000200002d\": { \"_id\": { \"$oid\": \"501c21858c154c000200002d\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"501c098a8c154c000200000f\" }, { \"$oid\": \"50985eb8985192000200006a\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }], \"acts_per_student_ids\": [{ \"$oid\": \"513a45c112c8310002000003\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-08-03T19:07:49.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"mfg\": \"\", \"model\": \"\", \"name\": \"string\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"501caa448c154c0002000053\": { \"_id\": { \"$oid\": \"501caa448c154c0002000053\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5013e0ccb312360002000032\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-08-04T04:51:16.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"mfg\": \"\", \"model\": \"\", \"name\": \"pebbles, small\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-08-04T05:00:24.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"502453070b84e4000200002f\": { \"_id\": { \"$oid\": \"502453070b84e4000200002f\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"50b1734ce1081a0002000006\" }], \"acts_per_student_ids\": [{ \"$oid\": \"501c3a338c154c0002000036\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-08-10T00:17:11.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"mfg\": \"\", \"model\": \"\", \"name\": \"graph paper\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-12-11T04:32:41.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5056430fbc0c230002000008\": { \"_id\": { \"$oid\": \"5056430fbc0c230002000008\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"50564226bc0c230002000004\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-16T21:22:23.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"container -- sturdy\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5056431ebc0c23000200000c\": { \"_id\": { \"$oid\": \"5056431ebc0c23000200000c\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"50564226bc0c230002000004\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-09-16T21:22:38.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"egg\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50564b9bbc0c23000200002f\": { \"_id\": { \"$oid\": \"50564b9bbc0c23000200002f\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"50564226bc0c230002000004\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-16T21:58:51.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"measuring cup\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50580d28443f300002000035\": { \"_id\": { \"$oid\": \"50580d28443f300002000035\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5057b64c443f300002000008\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-09-18T05:56:56.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"shortening\", \"note\": \"Use Crisco or other shortening or lard.\", \"updated_at\": { \"$date\": \"2012-09-25T02:53:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50580d8e443f300002000039\": { \"_id\": { \"$oid\": \"50580d8e443f300002000039\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5057b64c443f300002000008\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-18T05:58:38.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"ice chest\", \"note\": \"An insulated lunch bag will work too. Please be aware of timing to make sure that ice or other items that must be kept frozen or cold remain at an acceptable temperature.\", \"updated_at\": { \"$date\": \"2012-09-25T02:53:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"505fef0483f605000200000b\": { \"_id\": { \"$oid\": \"505fef0483f605000200000b\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-24T05:26:28.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"apple\", \"note\": \"real apples should look like the plastic/faux apple models\", \"updated_at\": { \"$date\": \"2012-10-18T05:32:00.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"505fefbe83f605000200000e\": { \"_id\": { \"$oid\": \"505fefbe83f605000200000e\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-24T05:29:34.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"3D apple and 2D pictures of apples\", \"note\": \"The 3D model is the \\\"fake\\\" apple.<div>The 2D models range from closest to a real apple (photograph), to furtherest from a real apple (word \\\"apple\\\"&nbsp;in a different language).</div><div>The order is as follows:&nbsp;photograph of an apple, drawings of apples, finally, the word \\\"apple\\\" on a piece of paper in English and then on another piece of paper in a different language that has an alphabet, the in another language without an alphabet.</div>\", \"updated_at\": { \"$date\": \"2012-10-18T05:32:00.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5061279083f605000200004b\": { \"_id\": { \"$oid\": \"5061279083f605000200004b\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-25T03:40:00.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"game\", \"note\": \"Use \\\"Bird Concentration\\\" card game if time permits.\", \"updated_at\": { \"$date\": \"2012-10-25T00:41:35.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"506130d783f6050002000051\": { \"_id\": { \"$oid\": \"506130d783f6050002000051\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }, { \"$oid\": \"506120e983f605000200003c\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-25T04:19:35.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"beads\", \"note\": \"<font>Pony beads are&nbsp;ubiquitous, sold in craft stores and teacher-supply&nbsp;warehouses&nbsp;such as the RAFT.</font>\", \"updated_at\": { \"$date\": \"2013-04-22T04:24:20.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"506130ed83f6050002000054\": { \"_id\": { \"$oid\": \"506130ed83f6050002000054\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"506120e983f605000200003c\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-25T04:19:57.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"fabric\", \"note\": \"See notes for individual activity.\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5061312983f6050002000056\": { \"_id\": { \"$oid\": \"5061312983f6050002000056\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"506120e983f605000200003c\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-25T04:20:57.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"forks, plastic\", \"note\": \"<br>\", \"updated_at\": { \"$date\": \"2013-04-22T04:24:20.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5061375f83f605000200005f\": { \"_id\": { \"$oid\": \"5061375f83f605000200005f\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5069cd18246eca0002000004\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-09-25T04:47:27.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"gravel\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5061377083f6050002000062\": { \"_id\": { \"$oid\": \"5061377083f6050002000062\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [{ \"$oid\": \"508ee3b5d35ec10002000018\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-09-25T04:47:44.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"soil\", \"note\": \"organic all-purpose potting soil is best\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"506137a483f6050002000064\": { \"_id\": { \"$oid\": \"506137a483f6050002000064\" }, \"acts_per_clas_ids\": [], \"acts_per_student_ids\": [], \"acts_per_group_ids\": [], \"name\": \"spray bottle\", \"mfg\": \"\", \"model\": \"\", \"consumable\": false, \"url\": \"\", \"note\": \"\", \"creator\": \"4f2db509af0c2e000100000b\", \"updated_at\": { \"$date\": \"2012-09-25T04:48:36.000Z\" }, \"created_at\": { \"$date\": \"2012-09-25T04:48:36.000Z\" }, \"T\": \"material\" }, \"5061383283f605000200006a\": { \"_id\": { \"$oid\": \"5061383283f605000200006a\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5069cd18246eca0002000004\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-09-25T04:50:58.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"sand\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5061384f83f605000200006c\": { \"_id\": { \"$oid\": \"5061384f83f605000200006c\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [{ \"$oid\": \"508ee3b5d35ec10002000018\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-09-25T04:51:27.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"newspaper\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5061386783f605000200006e\": { \"_id\": { \"$oid\": \"5061386783f605000200006e\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-25T04:51:51.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"earthworms 12-25\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5061388583f6050002000070\": { \"_id\": { \"$oid\": \"5061388583f6050002000070\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"51451bfac2cb3b0002000009\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-25T04:52:21.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"measuring tape\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5061389c83f6050002000072\": { \"_id\": { \"$oid\": \"5061389c83f6050002000072\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5069cd18246eca0002000004\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-25T04:52:44.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"cheesecloth\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-11-11T02:55:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"506138b583f6050002000074\": { \"_id\": { \"$oid\": \"506138b583f6050002000074\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-09-25T04:53:09.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"organic matter\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"506213d895dae6000200001b\": { \"_id\": { \"$oid\": \"506213d895dae6000200001b\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-25T20:28:08.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"bin\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5062268995dae60002000033\": { \"_id\": { \"$oid\": \"5062268995dae60002000033\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"50621a5695dae60002000026\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-25T21:47:53.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"fossils\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-09-25T21:57:15.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5062269395dae60002000035\": { \"_id\": { \"$oid\": \"5062269395dae60002000035\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"50621a5695dae60002000026\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2012-09-25T21:48:03.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"Plaster of Paris\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-09-25T21:57:15.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"506226d895dae60002000038\": { \"_id\": { \"$oid\": \"506226d895dae60002000038\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"50a0085c2ace730002000006\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"50621a5695dae60002000026\" }, { \"$oid\": \"506294db71e54a0002000005\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-09-25T21:49:12.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"natural materials\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5063ac9c71e54a000200001c\": { \"_id\": { \"$oid\": \"5063ac9c71e54a000200001c\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"50b1734ce1081a0002000006\" }, { \"$oid\": \"506294db71e54a0002000005\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-09-27T01:32:12.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"portion cup, plastic\", \"note\": \"2oz. size or equivalent. Can be found at restaurant supply stores, or a friendly neighborhood restaurant that serves salsa, etc., and is willing to donate enough for a class!\", \"updated_at\": { \"$date\": \"2013-01-20T03:50:02.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5063acd371e54a000200001f\": { \"_id\": { \"$oid\": \"5063acd371e54a000200001f\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }], \"acts_per_student_ids\": [{ \"$oid\": \"506294db71e54a0002000005\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-09-27T01:33:07.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"straws\", \"note\": \"Flexible straws are optimal.\", \"updated_at\": { \"$date\": \"2013-01-20T03:50:02.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5063ad1871e54a0002000022\": { \"_id\": { \"$oid\": \"5063ad1871e54a0002000022\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"506294db71e54a0002000005\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-09-27T01:34:16.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"cheese cloth\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-01-20T03:50:02.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5063adde71e54a0002000027\": { \"_id\": { \"$oid\": \"5063adde71e54a0002000027\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"506294db71e54a0002000005\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-09-27T01:37:34.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"plastic wrap\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-01-20T03:50:02.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5069d3e3246eca000200000f\": { \"_id\": { \"$oid\": \"5069d3e3246eca000200000f\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5069cd18246eca0002000004\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-10-01T17:33:23.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"sphagnum moss\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-11-11T02:55:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5069d46e246eca0002000012\": { \"_id\": { \"$oid\": \"5069d46e246eca0002000012\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5069cd18246eca0002000004\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-10-01T17:35:42.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"sieve\", \"note\": \"kitchen sieve or strainer\", \"updated_at\": { \"$date\": \"2012-11-11T02:55:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5069d49c246eca0002000014\": { \"_id\": { \"$oid\": \"5069d49c246eca0002000014\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5069cd18246eca0002000004\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-10-01T17:36:28.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"scale\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-21T17:49:40.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"506b603c7b70820002000015\": { \"_id\": { \"$oid\": \"506b603c7b70820002000015\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-10-02T21:44:28.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"clear lid\", \"note\": \"<ul><li>one-sided corrugated sheet, flute size E,&nbsp;flutes parallel to the short side&nbsp;7.5 cm x 27.3 cm (3” x 10.75”)&nbsp;</li><li>adhesive foam block, single sided,&nbsp;2.3 cm x 4.6 cm (½” x 1”), 5 mm (3/16”)&nbsp;thick</li></ul>\", \"updated_at\": { \"$date\": \"2012-10-02T21:53:53.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"506b60797b70820002000017\": { \"_id\": { \"$oid\": \"506b60797b70820002000017\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }], \"acts_per_student_ids\": [{ \"$oid\": \"513a45c112c8310002000003\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-10-02T21:45:29.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"corrugated cardboard\", \"note\": \"<div><br></div>\", \"updated_at\": { \"$date\": \"2013-05-01T01:15:40.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"506b60947b70820002000019\": { \"_id\": { \"$oid\": \"506b60947b70820002000019\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-10-02T21:45:56.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"foam block\", \"note\": \"<br>\", \"updated_at\": { \"$date\": \"2012-10-02T21:53:53.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"508884c899b7220002000008\": { \"_id\": { \"$oid\": \"508884c899b7220002000008\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"51032d9d4965160002000006\" }, { \"$oid\": \"50564226bc0c230002000004\" }], \"acts_per_group_ids\": [{ \"$oid\": \"5069cd18246eca0002000004\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-10-25T00:16:08.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"pitcher\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"508898c999b722000200001b\": { \"_id\": { \"$oid\": \"508898c999b722000200001b\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"5088986a99b7220002000019\" }], \"acts_per_student_ids\": [{ \"$oid\": \"50fb6911df018b0002000008\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-10-25T01:41:29.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"egg carton\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-12-21T02:00:23.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"508898e799b722000200001e\": { \"_id\": { \"$oid\": \"508898e799b722000200001e\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"5088986a99b7220002000019\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-10-25T01:41:59.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"garden area\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-01-26T01:18:31.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"508ee98ad35ec1000200001e\": { \"_id\": { \"$oid\": \"508ee98ad35ec1000200001e\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"508ee3b5d35ec10002000018\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-10-29T20:39:39.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"PotMaker\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-15T17:10:04.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"508ee99ed35ec10002000020\": { \"_id\": { \"$oid\": \"508ee99ed35ec10002000020\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"50b1734ce1081a0002000006\" }, { \"$oid\": \"508ee3b5d35ec10002000018\" }, { \"$oid\": \"50c6b34fe8e3e10002000002\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-10-29T20:39:58.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"seeds\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"509749889851920002000016\": { \"_id\": { \"$oid\": \"509749889851920002000016\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"509746a1985192000200000a\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-11-05T05:07:20.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"pictues\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-01-24T22:27:24.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50974c2c9851920002000018\": { \"_id\": { \"$oid\": \"50974c2c9851920002000018\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"509746a1985192000200000a\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-11-05T05:18:36.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"videos\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-01-24T22:27:24.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50981533985192000200004a\": { \"_id\": { \"$oid\": \"50981533985192000200004a\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"504670f0d69d6e000200001a\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-11-05T19:36:19.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"hinged container,  foam\", \"note\": \"<br>\", \"updated_at\": { \"$date\": \"2012-11-05T19:49:02.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50984e929851920002000056\": { \"_id\": { \"$oid\": \"50984e929851920002000056\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"502994905f6eb10002000013\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-11-05T23:41:06.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"mylar\", \"note\": \"12cm square per student\", \"updated_at\": { \"$date\": \"2012-11-05T23:44:54.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50984ea29851920002000058\": { \"_id\": { \"$oid\": \"50984ea29851920002000058\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"502994905f6eb10002000013\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2012-11-05T23:41:22.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"CD case\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-11-05T23:44:54.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50984ec2985192000200005b\": { \"_id\": { \"$oid\": \"50984ec2985192000200005b\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"502994905f6eb10002000013\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2012-11-05T23:41:54.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"CDs, 2\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-11-05T23:44:54.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50984ee7985192000200005d\": { \"_id\": { \"$oid\": \"50984ee7985192000200005d\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"502994905f6eb10002000013\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2012-11-05T23:42:31.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"transparency\", \"note\": \"one square to fit CD case\", \"updated_at\": { \"$date\": \"2012-11-05T23:44:54.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"509862739851920002000075\": { \"_id\": { \"$oid\": \"509862739851920002000075\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"50985eb8985192000200006a\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-11-06T01:05:55.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"lids\", \"note\": \"<div><br></div>\", \"updated_at\": { \"$date\": \"2012-12-29T18:36:34.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"509862909851920002000077\": { \"_id\": { \"$oid\": \"509862909851920002000077\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-11-06T01:06:24.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"index cards\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-01-25T00:28:35.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"509863139851920002000079\": { \"_id\": { \"$oid\": \"509863139851920002000079\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"50985eb8985192000200006a\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-11-06T01:08:35.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"hanger for mobile\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-12-29T18:36:34.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5098637e985192000200007b\": { \"_id\": { \"$oid\": \"5098637e985192000200007b\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"50985eb8985192000200006a\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-11-06T01:10:22.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"earth photo\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-12-29T18:36:34.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50a0086a2ace730002000008\": { \"_id\": { \"$oid\": \"50a0086a2ace730002000008\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"50a0085c2ace730002000006\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-11-11T20:19:54.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"objects\", \"note\": \"\", \"updated_at\": { \"$date\": \"2012-11-15T05:39:26.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50a056922ace730002000026\": { \"_id\": { \"$oid\": \"50a056922ace730002000026\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"509746a1985192000200000a\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-11-12T01:53:22.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"computer\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-01-24T22:27:24.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50a16f95a7c9e70002000005\": { \"_id\": { \"$oid\": \"50a16f95a7c9e70002000005\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"51032d9d4965160002000006\" }, { \"$oid\": \"4f850f9079626d0001000007\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-11-12T21:52:21.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"knife\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-25T22:12:30.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50c6b4a3e8e3e10002000004\": { \"_id\": { \"$oid\": \"50c6b4a3e8e3e10002000004\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"50c6b34fe8e3e10002000002\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-12-11T04:20:51.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"vegetables\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-04-22T01:14:21.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50c6b4ade8e3e10002000006\": { \"_id\": { \"$oid\": \"50c6b4ade8e3e10002000006\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"50c6b34fe8e3e10002000002\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-12-11T04:21:01.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"fruits\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-04-22T01:14:21.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50d146b4c25e6e0002000002\": { \"_id\": { \"$oid\": \"50d146b4c25e6e0002000002\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"50985eb8985192000200006a\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2012-12-19T04:46:44.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"stapler\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50e127553df52d000200000f\": { \"_id\": { \"$oid\": \"50e127553df52d000200000f\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"50e1269c3df52d0002000004\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2012-12-31T05:49:26.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"toilet paper\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-02-04T20:11:49.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50fb6b20df018b0002000010\": { \"_id\": { \"$oid\": \"50fb6b20df018b0002000010\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"50fb6911df018b0002000008\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2013-01-20T03:57:20.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"pipe cleaners\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-12-21T02:00:23.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50fb6b2fdf018b0002000012\": { \"_id\": { \"$oid\": \"50fb6b2fdf018b0002000012\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"50fb6911df018b0002000008\" }], \"acts_per_group_ids\": [{ \"$oid\": \"5174ba34d1ccd2000200000c\" }, { \"$oid\": \"513a45c112c8310002000003\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2013-01-20T03:57:35.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"markers\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-12-21T02:00:23.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"50fb6b5adf018b0002000014\": { \"_id\": { \"$oid\": \"50fb6b5adf018b0002000014\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"50fb6911df018b0002000008\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2013-01-20T03:58:18.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"eyes\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-12-21T02:00:23.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5101d54e8c3e5f0002000027\": { \"_id\": { \"$oid\": \"5101d54e8c3e5f0002000027\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"50ddff045f296e0002000004\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2013-01-25T00:43:58.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"cable\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"510332a767071c0002000004\": { \"_id\": { \"$oid\": \"510332a767071c0002000004\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"51032d9d4965160002000006\" }], \"acts_per_student_ids\": [], \"consumable\": true, \"created_at\": { \"$date\": \"2013-01-26T01:34:31.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"sweet potato\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-17T03:29:50.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5103335f67071c0002000006\": { \"_id\": { \"$oid\": \"5103335f67071c0002000006\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"51032d9d4965160002000006\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2013-01-26T01:37:35.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"cutting board\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-17T03:29:50.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5103381567071c000200000c\": { \"_id\": { \"$oid\": \"5103381567071c000200000c\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"50ddff045f296e0002000004\" }], \"consumable\": false, \"created_at\": { \"$date\": \"2013-01-26T01:57:41.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"tissue paper\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"51452360c2cb3b000200002a\": { \"_id\": { \"$oid\": \"51452360c2cb3b000200002a\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"513a45c112c8310002000003\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2013-03-17T01:58:56.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"circular objects\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-05-01T01:15:40.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"51452436c2cb3b000200002c\": { \"_id\": { \"$oid\": \"51452436c2cb3b000200002c\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"513a45c112c8310002000003\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2013-03-17T02:02:30.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"compass\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-05-01T01:15:40.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"514532f3d960ad0002000018\": { \"_id\": { \"$oid\": \"514532f3d960ad0002000018\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [{ \"$oid\": \"51453278d960ad000200000a\" }], \"consumable\": true, \"created_at\": { \"$date\": \"2013-03-17T03:05:23.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"craft sticks\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-19T23:52:33.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5145334fd960ad000200001a\": { \"_id\": { \"$oid\": \"5145334fd960ad000200001a\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"51453278d960ad000200000a\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2013-03-17T03:06:55.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"flashlight\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-19T23:52:33.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"5145336dd960ad000200001c\": { \"_id\": { \"$oid\": \"5145336dd960ad000200001c\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"51453278d960ad000200000a\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2013-03-17T03:07:25.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"butcher paper\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-19T23:52:33.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"514b46f857a8440002000006\": { \"_id\": { \"$oid\": \"514b46f857a8440002000006\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"513a45c112c8310002000003\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2013-03-21T17:44:24.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"bamboo skewer\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-05-01T01:15:40.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"514b483e57a844000200000b\": { \"_id\": { \"$oid\": \"514b483e57a844000200000b\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"51451bfac2cb3b0002000009\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2013-03-21T17:49:50.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"wood\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-21T17:49:50.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"514b485057a844000200000d\": { \"_id\": { \"$oid\": \"514b485057a844000200000d\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"51451bfac2cb3b0002000009\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2013-03-21T17:50:08.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"plastic\", \"note\": \"\", \"updated_at\": { \"$date\": \"2013-03-21T17:50:08.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"54400e3e9394a00002000007\": { \"_id\": { \"$oid\": \"54400e3e9394a00002000007\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"54400b299394a00002000005\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2014-10-16T18:28:14.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"vinegar\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"54400e499394a00002000009\": { \"_id\": { \"$oid\": \"54400e499394a00002000009\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"54400b299394a00002000005\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2014-10-16T18:28:25.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"milk\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"54400e539394a0000200000b\": { \"_id\": { \"$oid\": \"54400e539394a0000200000b\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"54400b299394a00002000005\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2014-10-16T18:28:35.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"oil\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"54400e879394a0000200000d\": { \"_id\": { \"$oid\": \"54400e879394a0000200000d\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"54400b299394a00002000005\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2014-10-16T18:29:27.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"clear jars\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"54400e9e9394a0000200000f\": { \"_id\": { \"$oid\": \"54400e9e9394a0000200000f\" }, \"acts_per_clas_ids\": [], \"acts_per_group_ids\": [{ \"$oid\": \"54400b299394a00002000005\" }], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2014-10-16T18:29:50.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"candy\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"544322bd1c27240002000002\": { \"_id\": { \"$oid\": \"544322bd1c27240002000002\" }, \"acts_per_clas_ids\": [{ \"$oid\": \"54400b299394a00002000005\" }], \"acts_per_group_ids\": [], \"acts_per_student_ids\": [], \"consumable\": false, \"created_at\": { \"$date\": \"2014-10-19T02:32:29.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"mfg\": \"\", \"model\": \"\", \"name\": \"pitchers\", \"note\": \"\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"url\": \"\", \"T\": \"material\" }, \"4f28bdf6023c640001000001\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000001\" }, \"act_ids\": [{ \"$oid\": \"50a0085c2ace730002000006\" }, { \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"body\": \"CA\", \"grade\": 0, \"note\": \"Properties of materials can be observed, measured, and predicted.\", \"standard_id\": \"1\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000002\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000002\" }, \"act_ids\": [{ \"$oid\": \"5011f5495dc28d000200000a\" }], \"body\": \"CA\", \"grade\": 0, \"note\": \"Students know objects can be described in terms of the materials they are made of (e.g., clay, cloth, paper) and their physical properties (e.g., color, size, shape, weight, texture, flexibility, attraction to magnets, floating, sinking).\", \"standard_id\": \"1a\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000003\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000003\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 0, \"standard_id\": \"1b\", \"note\": \"Students know water can be a liquid or a solid and can be made to change back and forth from one form to the other.\", \"T\": \"std\" }, \"4f28bdf6023c640001000004\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000004\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 0, \"standard_id\": \"1c\", \"note\": \"Students know water left in an open container evaporates (goes into the air) but water in a closed container does not.\", \"T\": \"std\" }, \"4f28bdf6023c640001000005\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000005\" }, \"act_ids\": [{ \"$oid\": \"50629bee71e54a0002000014\" }, { \"$oid\": \"4fa5b9e74497bf0001000006\" }, { \"$oid\": \"509746a1985192000200000a\" }, { \"$oid\": \"5088986a99b7220002000019\" }, { \"$oid\": \"51032d9d4965160002000006\" }], \"body\": \"CA\", \"grade\": 0, \"note\": \"Different types of plants and animals inhabit the earth.\", \"standard_id\": \"2\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000006\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000006\" }, \"act_ids\": [{ \"$oid\": \"506294db71e54a0002000005\" }, { \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"body\": \"CA\", \"grade\": 0, \"note\": \"Students know how to observe and describe similarities and differences in the appearance and behavior of plants and animals (e.g., seed-bearing plants, birds, fish, insects).\", \"standard_id\": \"2a\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000007\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000007\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"life\", \"grade\": 0, \"standard_id\": \"2b\", \"note\": \"Students know stories sometimes give plants and animals attributes they do not really have.\", \"T\": \"std\" }, \"4f28bdf6023c640001000008\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000008\" }, \"act_ids\": [{ \"$oid\": \"509807f2985192000200003c\" }, { \"$oid\": \"4f850f9079626d0001000007\" }, { \"$oid\": \"50b1734ce1081a0002000006\" }, { \"$oid\": \"50ddfd695f296e0002000002\" }, { \"$oid\": \"50ddff045f296e0002000004\" }, { \"$oid\": \"51032d9d4965160002000006\" }, { \"$oid\": \"50c6b34fe8e3e10002000002\" }], \"body\": \"CA\", \"grade\": 0, \"note\": \"Students know how to identify major structures of common plants and animals (e.g., stems, leaves, roots, arms, wings, legs).\", \"standard_id\": \"2c\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000009\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000009\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 0, \"standard_id\": \"3\", \"note\": \"Earth is composed of land, air, and water.\", \"T\": \"std\" }, \"4f28bdf6023c64000100000a\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100000a\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 0, \"standard_id\": \"3a\", \"note\": \"Students know characteristics of mountains, rivers, oceans, valleys, deserts, and local landforms.\", \"T\": \"std\" }, \"4f28bdf6023c64000100000b\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100000b\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 0, \"standard_id\": \"3b\", \"note\": \"Students know changes in weather occur from day to day and across seasons, affecting Earth and its inhabitants.\", \"T\": \"std\" }, \"4f28bdf6023c64000100000c\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100000c\" }, \"act_ids\": [{ \"$oid\": \"508ee3b5d35ec10002000018\" }], \"body\": \"CA\", \"grade\": 0, \"note\": \"Students know how to identify resources from Earth that are used in everyday life and understand that many resources can be conserved.\", \"standard_id\": \"3c\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c64000100000d\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100000d\" }, \"act_ids\": [{ \"$oid\": \"509807f2985192000200003c\" }, { \"$oid\": \"51453278d960ad000200000a\" }], \"body\": \"CA\", \"grade\": 0, \"note\": \"Scientific progress is made by asking meaningful questions and conducting careful investigations. As a basis for understanding this concept and addressing the content in the other three strands, students should develop their own questions and perform investigations.\", \"standard_id\": \"4\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c64000100000e\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100000e\" }, \"act_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }, { \"$oid\": \"50a0085c2ace730002000006\" }, { \"$oid\": \"50ddff045f296e0002000004\" }, { \"$oid\": \"5088986a99b7220002000019\" }, { \"$oid\": \"51453278d960ad000200000a\" }], \"body\": \"CA\", \"grade\": 0, \"note\": \"Observe common objects by using the five senses.\", \"standard_id\": \"4a\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c64000100000f\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100000f\" }, \"act_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }, { \"$oid\": \"5011f5495dc28d000200000a\" }, { \"$oid\": \"508ee3b5d35ec10002000018\" }, { \"$oid\": \"509746a1985192000200000a\" }, { \"$oid\": \"50a0085c2ace730002000006\" }, { \"$oid\": \"5088986a99b7220002000019\" }], \"body\": \"CA\", \"grade\": 0, \"note\": \"Describe the properties of common objects.\", \"standard_id\": \"4b\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000010\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000010\" }, \"act_ids\": [{ \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"body\": \"CA\", \"grade\": 0, \"note\": \"Describe the relative position of objects by using one reference (e.g., above or below).\", \"standard_id\": \"4c\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000011\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000011\" }, \"act_ids\": [{ \"$oid\": \"50b1734ce1081a0002000006\" }, { \"$oid\": \"50ddff045f296e0002000004\" }, { \"$oid\": \"5088986a99b7220002000019\" }, { \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"body\": \"CA\", \"grade\": 0, \"note\": \"Compare and sort common objects by one physical attribute (e.g., color, shape, texture, size, weight).\", \"standard_id\": \"4d\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000012\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000012\" }, \"act_ids\": [{ \"$oid\": \"5088986a99b7220002000019\" }, { \"$oid\": \"51453278d960ad000200000a\" }], \"body\": \"CA\", \"grade\": 0, \"note\": \"Communicate observations orally and through drawings. \", \"standard_id\": \"4e\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000013\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000013\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 1, \"standard_id\": \"1\", \"note\": \"Materials come in different forms (states), including solids, liquids, and gases.\", \"T\": \"std\" }, \"4f28bdf6023c640001000014\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000014\" }, \"act_ids\": [{ \"$oid\": \"50469bc6d69d6e000200003c\" }, { \"$oid\": \"5088986a99b7220002000019\" }], \"body\": \"CA\", \"grade\": 1, \"note\": \"Students know solids, liquids, and gases have different properties.\", \"standard_id\": \"1a\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000015\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000015\" }, \"act_ids\": [{ \"$oid\": \"50469bc6d69d6e000200003c\" }], \"body\": \"CA\", \"grade\": 1, \"note\": \"Students know the properties of substances can change when the substances are mixed, cooled, or heated.\", \"standard_id\": \"1b\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000016\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000016\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"life\", \"grade\": 1, \"standard_id\": \"2\", \"note\": \"Plants and animals meet their needs in different ways.\", \"T\": \"std\" }, \"4f28bdf6023c640001000017\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000017\" }, \"act_ids\": [{ \"$oid\": \"50c6b34fe8e3e10002000002\" }], \"body\": \"CA\", \"grade\": 1, \"note\": \"Students know different plants and animals inhabit different kinds of environments and have external features that help them thrive in different kinds of places.\", \"standard_id\": \"2a\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000018\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000018\" }, \"act_ids\": [{ \"$oid\": \"508ee3b5d35ec10002000018\" }, { \"$oid\": \"509746a1985192000200000a\" }, { \"$oid\": \"509807f2985192000200003c\" }, { \"$oid\": \"50ddfd695f296e0002000002\" }], \"body\": \"CA\", \"grade\": 1, \"note\": \"Students know both plants and animals need water, animals need food, and plants need light.\", \"standard_id\": \"2b\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000019\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000019\" }, \"act_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"body\": \"CA\", \"grade\": 1, \"note\": \"Students know animals eat plants or other animals for food and may also use plants or even other animals for shelter and nesting.\", \"standard_id\": \"2c\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c64000100001a\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100001a\" }, \"act_ids\": [], \"body\": \"CA\", \"grade\": 1, \"note\": \"Students know how to infer what animals eat from the shapes of their teeth (e.g., sharp teeth: eats meat; flat teeth: eats plants).\", \"standard_id\": \"2d\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c64000100001b\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100001b\" }, \"act_ids\": [{ \"$oid\": \"50ddfd695f296e0002000002\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"body\": \"CA\", \"grade\": 1, \"note\": \"Students know roots are associated with the intake of water and soil nutrients and green leaves are associated with making food from sunlight.\", \"standard_id\": \"2e\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c64000100001c\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100001c\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 1, \"standard_id\": \"3\", \"note\": \"Weather can be observed, measured, and described.\", \"T\": \"std\" }, \"4f28bdf6023c64000100001d\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100001d\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 1, \"standard_id\": \"3a\", \"note\": \"Students know how to use simple tools (e.g., thermometer, wind vane) to measure weather conditions and record changes from day to day and across the seasons.\", \"T\": \"std\" }, \"4f28bdf6023c64000100001e\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100001e\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 1, \"standard_id\": \"3b\", \"note\": \"Students know that the weather changes from day to day but that trends in temperature or of rain (or snow) tend to be predictable during a season.\", \"T\": \"std\" }, \"4f28bdf6023c64000100001f\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100001f\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 1, \"standard_id\": \"3c\", \"note\": \"Students know the sun warms the land, air, and water.\", \"T\": \"std\" }, \"4f28bdf6023c640001000020\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000020\" }, \"act_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }], \"body\": \"CA\", \"grade\": 1, \"note\": \"Scientific progress is made by asking meaningful questions and conducting careful investigations. As a basis for understanding this concept and addressing the content in the other three strands, students should develop their own questions and perform investigations.\", \"standard_id\": \"4\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000021\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000021\" }, \"act_ids\": [{ \"$oid\": \"50ddfd695f296e0002000002\" }], \"body\": \"CA\", \"grade\": 1, \"note\": \"Draw pictures that portray some features of the thing being described.\", \"standard_id\": \"4a\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000022\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000022\" }, \"act_ids\": [{ \"$oid\": \"4f28d42204cff50001000007\" }, { \"$oid\": \"4f53d9a7feb00c000100000e\" }, { \"$oid\": \"508ee3b5d35ec10002000018\" }, { \"$oid\": \"509807f2985192000200003c\" }, { \"$oid\": \"50a0085c2ace730002000006\" }, { \"$oid\": \"50ddfd695f296e0002000002\" }], \"body\": \"CA\", \"grade\": 1, \"note\": \"Record observations and data with pictures, numbers, or written statements.\", \"standard_id\": \"4b\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000023\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000023\" }, \"act_ids\": [{ \"$oid\": \"4f28d42204cff50001000007\" }, { \"$oid\": \"50b1734ce1081a0002000006\" }], \"body\": \"CA\", \"grade\": 1, \"note\": \"Record observations on a bar graph.\", \"standard_id\": \"4c\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000024\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000024\" }, \"act_ids\": [{ \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"body\": \"CA\", \"grade\": 1, \"note\": \"Describe the relative position of objects by using two references (e.g., above and next to, below and left of).\", \"standard_id\": \"4d\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000025\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000025\" }, \"act_ids\": [{ \"$oid\": \"5088986a99b7220002000019\" }, { \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"body\": \"CA\", \"grade\": 1, \"note\": \"Make new observations when discrepancies exist between two descriptions of the same object or phenomenon.\", \"standard_id\": \"4e\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000026\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000026\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 2, \"standard_id\": \"1\", \"note\": \"The motion of objects can be observed and measured.\", \"T\": \"std\" }, \"4f28bdf6023c640001000027\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000027\" }, \"act_ids\": [{ \"$oid\": \"503d21f8f27227000200000f\" }, { \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know the position of an object can be described by locating it in relation to another object or to the background.\", \"standard_id\": \"1a\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000028\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000028\" }, \"act_ids\": [{ \"$oid\": \"503d21f8f27227000200000f\" }, { \"$oid\": \"503d53a9f272270002000022\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know an object's motion can be described by recording the change in position of the object over time.\", \"standard_id\": \"1b\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000029\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000029\" }, \"act_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know the way to change how something is moving is by giving it a push or a pull. The size of the change is related to the strength, or the amount of force, of the push or pull.\", \"standard_id\": \"1c\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c64000100002a\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100002a\" }, \"act_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know tools and machines are used to apply pushes and pulls (forces) to make things move.\", \"standard_id\": \"1d\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c64000100002b\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100002b\" }, \"act_ids\": [{ \"$oid\": \"5011f5495dc28d000200000a\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know objects fall to the ground unless something holds them up.\", \"standard_id\": \"1e\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c64000100002c\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100002c\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 2, \"standard_id\": \"1f\", \"note\": \"Students know magnets can be used to make some objects move without being touched.\", \"T\": \"std\" }, \"4f28bdf6023c64000100002d\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100002d\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 2, \"standard_id\": \"1g\", \"note\": \"Students know sound is made by vibrating objects and can be described by its pitch and volume.\", \"T\": \"std\" }, \"4f28bdf6023c64000100002e\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100002e\" }, \"act_ids\": [{ \"$oid\": \"509807f2985192000200003c\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Plants and animals have predictable life cycles.\", \"standard_id\": \"2\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c64000100002f\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100002f\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"life\", \"grade\": 2, \"standard_id\": \"2a\", \"note\": \"Students know that organisms reproduce offspring of their own kind and that the offspring resemble their parents and one another.\", \"T\": \"std\" }, \"4f28bdf6023c640001000030\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000030\" }, \"act_ids\": [{ \"$oid\": \"4f8b3e3bf400440001000062\" }, { \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know the sequential stages of life cycles are different for different animals, such as butterflies, frogs, and mice.\", \"standard_id\": \"2b\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000031\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000031\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"life\", \"grade\": 2, \"standard_id\": \"2c\", \"note\": \"Students know many characteristics of an organism are inherited from the parents. Some characteristics are caused or influenced by the environment.\", \"T\": \"std\" }, \"4f28bdf6023c640001000032\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000032\" }, \"act_ids\": [{ \"$oid\": \"4f850f9079626d0001000007\" }, { \"$oid\": \"50ddfd695f296e0002000002\" }, { \"$oid\": \"50c6b34fe8e3e10002000002\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know there is variation among individuals of one kind within a population.\", \"standard_id\": \"2d\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000033\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000033\" }, \"act_ids\": [{ \"$oid\": \"50ddfd695f296e0002000002\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know light, gravity, touch, or environmental stress can affect the germination, growth, and development of plants.\", \"standard_id\": \"2e\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000034\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000034\" }, \"act_ids\": [{ \"$oid\": \"4f8b3e3bf400440001000062\" }, { \"$oid\": \"509746a1985192000200000a\" }, { \"$oid\": \"50c6b34fe8e3e10002000002\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know flowers and fruits are associated with reproduction in plants.\", \"standard_id\": \"2f\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000035\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000035\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 2, \"standard_id\": \"3\", \"note\": \"Earth is made of materials that have distinct properties and provide resources for human activities.\", \"T\": \"std\" }, \"4f28bdf6023c640001000036\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000036\" }, \"act_ids\": [{ \"$oid\": \"50b6f6592b89ee0002000005\" }, { \"$oid\": \"512d99685f2f520002000006\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know how to compare the physical properties of different kinds of rocks and know that rock is composed of different combinations of minerals.\", \"standard_id\": \"3a\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c640001000037\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000037\" }, \"act_ids\": [{ \"$oid\": \"512d99685f2f520002000006\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know smaller rocks come from the breakage and weathering of larger rocks.\", \"standard_id\": \"3b\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c640001000038\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000038\" }, \"act_ids\": [{ \"$oid\": \"508ee3b5d35ec10002000018\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know that soil is made partly from weathered rock and partly from organic materials and that soils differ in their color, texture, capacity to retain water, and ability to support the growth of many kinds of plants.\", \"standard_id\": \"3c\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c640001000039\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000039\" }, \"act_ids\": [{ \"$oid\": \"50621a5695dae60002000026\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Students know that fossils provide evidence about the plants and animals that lived long ago and that scientists learn about the past history of Earth by studying fossils.\", \"standard_id\": \"3d\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c64000100003a\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100003a\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 2, \"standard_id\": \"3e\", \"note\": \"Students know rock, water, plants, and soil provide many resources, including food, fuel, and building materials, that humans use.\", \"T\": \"std\" }, \"4f28bdf6023c64000100003b\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100003b\" }, \"act_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }, { \"$oid\": \"50c6b34fe8e3e10002000002\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Scientific progress is made by asking meaningful questions and conducting careful investigations.\", \"standard_id\": \"4\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c64000100003c\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100003c\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"ie\", \"grade\": 2, \"standard_id\": \"4a\", \"note\": \"Make predictions based on observed patterns and not random guessing.\", \"T\": \"std\" }, \"4f28bdf6023c64000100003d\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100003d\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"ie\", \"grade\": 2, \"standard_id\": \"4b\", \"note\": \"Measure length, weight, temperature, and liquid volume with appropriate tools and express those measurements in standard metric system units.\", \"T\": \"std\" }, \"4f28bdf6023c64000100003e\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100003e\" }, \"act_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }, { \"$oid\": \"509746a1985192000200000a\" }, { \"$oid\": \"50b6f6592b89ee0002000005\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }, { \"$oid\": \"50c6b34fe8e3e10002000002\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Compare and sort common objects according to two or more physical attributes (e.g., color, shape, texture, size, weight).\", \"standard_id\": \"4c\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c64000100003f\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100003f\" }, \"act_ids\": [{ \"$oid\": \"509807f2985192000200003c\" }, { \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Write or draw descriptions of a sequence of steps, events, and observations.\", \"standard_id\": \"4d\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000040\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000040\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"ie\", \"grade\": 2, \"standard_id\": \"4e\", \"note\": \"Construct bar graphs to record data, using appropriately labeled axes.\", \"T\": \"std\" }, \"4f28bdf6023c640001000041\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000041\" }, \"act_ids\": [{ \"$oid\": \"4f8b3e3bf400440001000062\" }, { \"$oid\": \"4f850f9079626d0001000007\" }, { \"$oid\": \"50b6f6592b89ee0002000005\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }, { \"$oid\": \"50c6b34fe8e3e10002000002\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Use magnifiers or microscopes to observe and draw descriptions of small objects or small features of objects.\", \"standard_id\": \"4f\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000042\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000042\" }, \"act_ids\": [{ \"$oid\": \"4f53d9a7feb00c000100000e\" }, { \"$oid\": \"509807f2985192000200003c\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }], \"body\": \"CA\", \"grade\": 2, \"note\": \"Follow oral instructions for a scientific investigation.\", \"standard_id\": \"4g\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000043\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000043\" }, \"act_ids\": [{ \"$oid\": \"4f53d9a7feb00c000100000e\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Energy and matter have multiple forms and can be changed from one form to another.\", \"standard_id\": \"1\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000044\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000044\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 3, \"standard_id\": \"1a\", \"note\": \"Students know energy comes from the Sun to Earth in the form of light.\", \"T\": \"std\" }, \"4f28bdf6023c640001000045\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000045\" }, \"act_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know sources of stored energy take many forms, such as food, fuel, and batteries.\", \"standard_id\": \"1b\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000046\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000046\" }, \"act_ids\": [{ \"$oid\": \"4f87648adc4c210001000060\" }, { \"$oid\": \"503d53a9f272270002000022\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know machines and living things convert stored energy to motion and heat.\", \"standard_id\": \"1c\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000047\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000047\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 3, \"standard_id\": \"1d\", \"note\": \"Students know energy can be carried from one place to another by waves, such as water waves and sound waves, by electric current, and by moving objects.\", \"T\": \"std\" }, \"4f28bdf6023c640001000048\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000048\" }, \"act_ids\": [{ \"$oid\": \"4fc454d9a4d1f8000300000d\" }, { \"$oid\": \"4f53d9a7feb00c000100000e\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know matter has three forms: solid, liquid, and gas.\", \"standard_id\": \"1e\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000049\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000049\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 3, \"standard_id\": \"1f\", \"note\": \"Students know evaporation and melting are changes that occur when the objects are heated.\", \"T\": \"std\" }, \"4f28bdf6023c64000100004a\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100004a\" }, \"act_ids\": [{ \"$oid\": \"4fc454d9a4d1f8000300000d\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know that when two or more substances are combined, a new substance may be formed with properties that are different from those of the original materials.\", \"standard_id\": \"1g\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c64000100004b\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100004b\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 3, \"standard_id\": \"1h\", \"note\": \"Students know all matter is made of small particles called atoms, too small to see with the naked eye.\", \"T\": \"std\" }, \"4f28bdf6023c64000100004c\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100004c\" }, \"act_ids\": [{ \"$oid\": \"50465ebbd69d6e0002000008\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know people once thought that earth, wind, fire, and water were the basic elements that made up all matter. Science experiments show that there are more than 100 different types of atoms, which are presented on the periodic table of the elements.\", \"standard_id\": \"1i\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c64000100004d\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100004d\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 3, \"standard_id\": \"2\", \"note\": \"Light has a source and travels in a direction.\", \"T\": \"std\" }, \"4f28bdf6023c64000100004e\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100004e\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 3, \"standard_id\": \"2a\", \"note\": \"Students know sunlight can be blocked to create shadows.\", \"T\": \"std\" }, \"4f28bdf6023c64000100004f\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100004f\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 3, \"standard_id\": \"2b\", \"note\": \"Students know light is reflected from mirrors and other surfaces.\", \"T\": \"std\" }, \"4f28bdf6023c640001000050\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000050\" }, \"act_ids\": [{ \"$oid\": \"4f9e184c7b922d0001000006\" }, { \"$oid\": \"513a45c112c8310002000003\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know the color of light striking an object affects the way the object is seen.\", \"standard_id\": \"2c\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000051\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000051\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 3, \"standard_id\": \"2d\", \"note\": \"Students know an object is seen when light traveling from the object enters the eye.\", \"T\": \"std\" }, \"4f28bdf6023c640001000052\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000052\" }, \"act_ids\": [{ \"$oid\": \"506120e983f605000200003c\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Adaptations in physical structure or behavior may improve an organism's chance for survival.\", \"standard_id\": \"3\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000053\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000053\" }, \"act_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }, { \"$oid\": \"509746a1985192000200000a\" }, { \"$oid\": \"4f850f9079626d0001000007\" }, { \"$oid\": \"50ddfd695f296e0002000002\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know plants and animals have structures that serve different functions in growth, survival, and reproduction.\", \"standard_id\": \"3a\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000054\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000054\" }, \"act_ids\": [{ \"$oid\": \"50564226bc0c230002000004\" }, { \"$oid\": \"5057b64c443f300002000008\" }, { \"$oid\": \"5069cd18246eca0002000004\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know examples of diverse life forms in different environments, such as oceans, deserts, tundra, forests, grasslands, and wetlands.\", \"standard_id\": \"3b\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000055\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000055\" }, \"act_ids\": [{ \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know living things cause changes in the environment in which they live: some of these changes are detrimental to the organism or other organisms, and some are beneficial.\", \"standard_id\": \"3c\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000056\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000056\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"life\", \"grade\": 3, \"standard_id\": \"3d\", \"note\": \"Students know when the environment changes, some plants and animals survive and reproduce; others die or move to new locations.\", \"T\": \"std\" }, \"4f28bdf6023c640001000057\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000057\" }, \"act_ids\": [{ \"$oid\": \"50621a5695dae60002000026\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know that some kinds of organisms that once lived on Earth have completely disappeared and that some of those resembled others that are alive today.\", \"standard_id\": \"3e\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000058\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000058\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 3, \"standard_id\": \"4\", \"note\": \"Objects in the sky move in regular and predictable patterns.\", \"T\": \"std\" }, \"4f28bdf6023c640001000059\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000059\" }, \"act_ids\": [{ \"$oid\": \"4f7a92c8965e190001000009\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know the patterns of stars stay the same, although they appear to move across the sky nightly, and different stars can be seen in different seasons.\", \"standard_id\": \"4a\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c64000100005a\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100005a\" }, \"act_ids\": [{ \"$oid\": \"50985eb8985192000200006a\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know the way in which the Moon's appearance changes during the fourweek lunar cycle.\", \"standard_id\": \"4b\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c64000100005b\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100005b\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 3, \"standard_id\": \"4c\", \"note\": \"Students know telescopes magnify the appearance of some distant objects in the sky, including the Moon and the planets. The number of stars that can be seen through telescopes is dramatically greater than the number that can be seen by the unaided eye.\", \"T\": \"std\" }, \"4f28bdf6023c64000100005c\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100005c\" }, \"act_ids\": [{ \"$oid\": \"504670f0d69d6e000200001a\" }, { \"$oid\": \"50e1269c3df52d0002000004\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Students know that Earth is one of several planets that orbit the Sun and that the Moon orbits Earth.\", \"standard_id\": \"4d\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c64000100005d\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100005d\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 3, \"standard_id\": \"4e\", \"note\": \"Students know the position of the Sun in the sky changes during the course of the day and from season to season.\", \"T\": \"std\" }, \"4f28bdf6023c64000100005e\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100005e\" }, \"act_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Scientific progress is made by asking meaningful questions and conducting careful investigations.\", \"standard_id\": \"5\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c64000100005f\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100005f\" }, \"act_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }, { \"$oid\": \"4f53d9a7feb00c000100000e\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Repeat observations to improve accuracy and know that the results of similar scientific investigations seldom turn out exactly the same because of differences in the things being investigated, methods being used, or uncertainty in the observation.\", \"standard_id\": \"5a\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000060\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000060\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"ie\", \"grade\": 3, \"standard_id\": \"5b\", \"note\": \"Differentiate evidence from opinion and know that scientists do not rely on claims or conclusions unless they are backed by observations that can be confirmed.\", \"T\": \"std\" }, \"4f28bdf6023c640001000061\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000061\" }, \"act_ids\": [{ \"$oid\": \"50564226bc0c230002000004\" }, { \"$oid\": \"509807f2985192000200003c\" }, { \"$oid\": \"50e1269c3df52d0002000004\" }, { \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Use numerical data in describing and comparing objects, events, and measurements.\", \"standard_id\": \"5c\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000062\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000062\" }, \"act_ids\": [{ \"$oid\": \"4f78ee972ab40b0001000005\" }, { \"$oid\": \"4f9e184c7b922d0001000006\" }, { \"$oid\": \"5069cd18246eca0002000004\" }, { \"$oid\": \"513a45c112c8310002000003\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Predict the outcome of a simple investigation and compare the result with the prediction.\", \"standard_id\": \"5d\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000063\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000063\" }, \"act_ids\": [{ \"$oid\": \"4f87648adc4c210001000060\" }, { \"$oid\": \"4f53d9a7feb00c000100000e\" }, { \"$oid\": \"5069cd18246eca0002000004\" }], \"body\": \"CA\", \"grade\": 3, \"note\": \"Collect data in an investigation and analyze those data to develop a logical conclusion.\", \"standard_id\": \"5e\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000064\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000064\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 4, \"standard_id\": \"1\", \"note\": \"Electricity and magnetism are related effects that have many useful applications in everyday life.\", \"T\": \"std\" }, \"4f28bdf6023c640001000065\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000065\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 4, \"standard_id\": \"1a\", \"note\": \"Students know how to design and build simple series and parallel circuits by using components such as wires, batteries, and bulbs.\", \"T\": \"std\" }, \"4f28bdf6023c640001000066\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000066\" }, \"act_ids\": [{ \"$oid\": \"503c0615ef7c680002000004\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Students know how to build a simple compass and use it to detect magnetic effects, including Earth's magnetic field.\", \"standard_id\": \"1b\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000067\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000067\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 4, \"standard_id\": \"1c\", \"note\": \"Students know electric currents produce magnetic fields and know how to build a simple electromagnet.\", \"T\": \"std\" }, \"4f28bdf6023c640001000068\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000068\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 4, \"standard_id\": \"1d\", \"note\": \"Students know the role of electromagnets in the construction of electric motors, electric generators, and simple devices, such as doorbells and earphones.\", \"T\": \"std\" }, \"4f28bdf6023c640001000069\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000069\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 4, \"standard_id\": \"1e\", \"note\": \"Students know electrically charged objects attract or repel each other.\", \"T\": \"std\" }, \"4f28bdf6023c64000100006a\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100006a\" }, \"act_ids\": [{ \"$oid\": \"503c0615ef7c680002000004\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Students know that magnets have two poles (north and south) and that like poles repel each other while unlike poles attract each other.\", \"standard_id\": \"1f\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c64000100006b\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100006b\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 4, \"standard_id\": \"1g\", \"note\": \"Students know electrical energy can be converted to heat, light, and motion.\", \"T\": \"std\" }, \"4f28bdf6023c64000100006c\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100006c\" }, \"act_ids\": [{ \"$oid\": \"503c22d3ef7c68000200001f\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"All organisms need energy and matter to live and grow.\", \"standard_id\": \"2\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c64000100006d\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100006d\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"life\", \"grade\": 4, \"standard_id\": \"2a\", \"note\": \"Students know plants are the primary source of matter and energy entering most food chains.\", \"T\": \"std\" }, \"4f28bdf6023c64000100006e\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100006e\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"life\", \"grade\": 4, \"standard_id\": \"2b\", \"note\": \"Students know producers and consumers (herbivores, carnivores, omnivores, and decomposers) are related in food chains and food webs and may compete with each other for resources in an ecosystem.\", \"T\": \"std\" }, \"4f28bdf6023c64000100006f\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100006f\" }, \"act_ids\": [{ \"$oid\": \"506294db71e54a0002000005\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Students know decomposers, including many fungi, insects, and microorganisms, recycle matter from dead plants and animals.\", \"standard_id\": \"2c\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000070\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000070\" }, \"act_ids\": [{ \"$oid\": \"506120e983f605000200003c\" }, { \"$oid\": \"509746a1985192000200000a\" }, { \"$oid\": \"50ddfd695f296e0002000002\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Living organisms depend on one another and on their environment for survival.\", \"standard_id\": \"3\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000071\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000071\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"life\", \"grade\": 4, \"standard_id\": \"3a\", \"note\": \"Students know ecosystems can be characterized by their living and nonliving components.\", \"T\": \"std\" }, \"4f28bdf6023c640001000072\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000072\" }, \"act_ids\": [{ \"$oid\": \"5057b64c443f300002000008\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Students know that in any particular environment, some kinds of plants and animals survive well, some survive less well, and some cannot survive at all.\", \"standard_id\": \"3b\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000073\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000073\" }, \"act_ids\": [{ \"$oid\": \"4f850f9079626d0001000007\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Students know many plants depend on animals for pollination and seed dispersal, and animals depend on plants for food and shelter.\", \"standard_id\": \"3c\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000074\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000074\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"life\", \"grade\": 4, \"standard_id\": \"3d\", \"note\": \"Students know that most microorganisms do not cause disease and that many are beneficial.\", \"T\": \"std\" }, \"4f28bdf6023c640001000075\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000075\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 4, \"standard_id\": \"4\", \"note\": \"The properties of rocks and minerals reflect the processes that formed them.\", \"T\": \"std\" }, \"4f28bdf6023c640001000076\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000076\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 4, \"standard_id\": \"4a\", \"note\": \"Students know how to differentiate among igneous, sedimentary, and metamorphic rocks by referring to their properties and methods of formation (the rock cycle).\", \"T\": \"std\" }, \"4f28bdf6023c640001000077\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000077\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 4, \"standard_id\": \"4b\", \"note\": \"Students know how to identify common rock-forming minerals (including quartz, calcite, feldspar, mica, and hornblende) and ore minerals by using a table of diagnostic properties.\", \"T\": \"std\" }, \"4f28bdf6023c640001000078\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000078\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 4, \"standard_id\": \"5\", \"note\": \"Waves, wind, water, and ice shape and reshape Earth's land surface.\", \"T\": \"std\" }, \"4f28bdf6023c640001000079\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000079\" }, \"act_ids\": [{ \"$oid\": \"503d21f8f27227000200000f\" }, { \"$oid\": \"50469bc6d69d6e000200003c\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Students know some changes in the earth are due to slow processes, such as erosion, and some changes are due to rapid processes, such as landslides, volcanic eruptions, and earthquakes.\", \"standard_id\": \"5a\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c64000100007a\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100007a\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 4, \"standard_id\": \"5b\", \"note\": \"Students know natural processes, including freezing and thawing and the growth of roots, cause rocks to break down into smaller pieces.\", \"T\": \"std\" }, \"4f28bdf6023c64000100007b\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100007b\" }, \"act_ids\": [{ \"$oid\": \"503d21f8f27227000200000f\" }, { \"$oid\": \"50469bc6d69d6e000200003c\" }, { \"$oid\": \"5069cd18246eca0002000004\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Students know moving water erodes landforms, reshaping the land by taking it away from some places and depositing it as pebbles, sand, silt, and mud in other places (weathering, transport, and deposition).\", \"standard_id\": \"5c\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c64000100007c\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100007c\" }, \"act_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Scientific progress is made by asking meaningful questions and conducting careful investigations.\", \"standard_id\": \"6\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c64000100007d\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100007d\" }, \"act_ids\": [{ \"$oid\": \"4f53d9a7feb00c000100000e\" }, { \"$oid\": \"509746a1985192000200000a\" }, { \"$oid\": \"4f850f9079626d0001000007\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Differentiate observation from inference (interpretation) and know scientists explanations come partly from what they observe and partly from how they interpret their observations.\", \"standard_id\": \"6a\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c64000100007e\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100007e\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"ie\", \"grade\": 4, \"standard_id\": \"6b\", \"note\": \"Measure and estimate the weight, length, or volume of objects.\", \"T\": \"std\" }, \"4f28bdf6023c64000100007f\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100007f\" }, \"act_ids\": [{ \"$oid\": \"5069cd18246eca0002000004\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Formulate and justify predictions based on cause-and-effect relationships.\", \"standard_id\": \"6c\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000080\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000080\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"ie\", \"grade\": 4, \"standard_id\": \"6d\", \"note\": \"Conduct multiple trials to test a prediction and draw conclusions about the relationships between predictions and results.\", \"T\": \"std\" }, \"4f28bdf6023c640001000081\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000081\" }, \"act_ids\": [{ \"$oid\": \"509807f2985192000200003c\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Construct and interpret graphs from measurements.\", \"standard_id\": \"6e\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000082\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000082\" }, \"act_ids\": [{ \"$oid\": \"5069cd18246eca0002000004\" }], \"body\": \"CA\", \"grade\": 4, \"note\": \"Follow a set of written instructions for a scientific investigation.\", \"standard_id\": \"6f\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c640001000083\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000083\" }, \"act_ids\": [{ \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Elements and their combinations account for all the varied types of matter in the world.\", \"standard_id\": \"1\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000084\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000084\" }, \"act_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know that during chemical reactions the atoms in the reactants rearrange to form products with different properties.\", \"standard_id\": \"1a\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000085\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000085\" }, \"act_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know all matter is made of atoms, which may combine to form molecules.\", \"standard_id\": \"1b\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000086\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000086\" }, \"act_ids\": [{ \"$oid\": \"5011f5495dc28d000200000a\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know metals have properties in common, such as high electrical and thermal conductivity. Some metals, such as aluminum (Al), iron (Fe), nickel (Ni), copper (Cu), silver (Ag), and gold (Au), are pure elements; others, such as steel and brass, are composed of a combination of elemental metals.\", \"standard_id\": \"1c\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000087\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000087\" }, \"act_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }, { \"$oid\": \"50465ebbd69d6e0002000008\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know that each element is made of one kind of atom and that the elements are organized in the periodic table by their chemical properties.\", \"standard_id\": \"1d\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c640001000088\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000088\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 5, \"standard_id\": \"1e\", \"note\": \"Students know scientists have developed instruments that can create discrete images of atoms and molecules that show that the atoms and molecules often occur in well-ordered arrays.\", \"T\": \"std\" }, \"4f28bdf6023c640001000089\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000089\" }, \"act_ids\": [{ \"$oid\": \"4f2db7c5af0c2e0001000011\" }, { \"$oid\": \"502994545f6eb1000200000f\" }, { \"$oid\": \"503d21f8f27227000200000f\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know differences in chemical and physical properties of substances are used to separate mixtures and identify compounds.\", \"standard_id\": \"1f\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c64000100008a\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100008a\" }, \"act_ids\": [{ \"$oid\": \"5011f5495dc28d000200000a\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know properties of solid, liquid, and gaseous substances, such as sugar (C6H12O6), water (H2O), helium (He), oxygen (O2), nitrogen (N2), and carbon dioxide (CO2).\", \"standard_id\": \"1g\", \"subject\": \"phys\", \"T\": \"std\" }, \"4f28bdf6023c64000100008b\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100008b\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 5, \"standard_id\": \"1h\", \"note\": \"Students know living organisms and most materials are composed of just a few elements.\", \"T\": \"std\" }, \"4f28bdf6023c64000100008c\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100008c\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"phys\", \"grade\": 5, \"standard_id\": \"1i\", \"note\": \"Students know the common properties of salts, such as sodium chloride (NaCl).\", \"T\": \"std\" }, \"4f28bdf6023c64000100008d\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100008d\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"life\", \"grade\": 5, \"standard_id\": \"2\", \"note\": \"Plants and animals have structures for respiration, digestion, waste disposal, and transport of materials.\", \"T\": \"std\" }, \"4f28bdf6023c64000100008e\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100008e\" }, \"act_ids\": [{ \"$oid\": \"50ddfd695f296e0002000002\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know many multicellular organisms have specialized structures to support the transport of materials.\", \"standard_id\": \"2a\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c64000100008f\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100008f\" }, \"act_ids\": [{ \"$oid\": \"5029941b5f6eb1000200000b\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know how blood circulates through the heart chambers, lungs, and body and how carbon dioxide (CO2) and oxygen (O2) are exchanged in the lungs and tissues.\", \"standard_id\": \"2b\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000090\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000090\" }, \"act_ids\": [{ \"$oid\": \"502993dc5f6eb10002000007\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know the sequential steps of digestion and the roles of teeth and the mouth, esophagus, stomach, small intestine, large intestine, and colon in the function of the digestive system.\", \"standard_id\": \"2c\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000091\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000091\" }, \"act_ids\": [{ \"$oid\": \"5013e0ccb312360002000032\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know the role of the kidney in removing cellular waste from blood and converting it into urine, which is stored in the bladder.\", \"standard_id\": \"2d\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000092\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000092\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"life\", \"grade\": 5, \"standard_id\": \"2e\", \"note\": \"Students know how sugar, water, and minerals are transported in a vascular plant.\", \"T\": \"std\" }, \"4f28bdf6023c640001000093\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000093\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"life\", \"grade\": 5, \"standard_id\": \"2f\", \"note\": \"Students know plants use carbon dioxide (CO2) and energy from sunlight to build molecules of sugar and release oxygen.\", \"T\": \"std\" }, \"4f28bdf6023c640001000094\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000094\" }, \"act_ids\": [{ \"$oid\": \"503c22d3ef7c68000200001f\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know plant and animal cells break down sugar to obtain energy, a process resulting in carbon dioxide (CO) and water (respiration).\", \"standard_id\": \"2g\", \"subject\": \"life\", \"T\": \"std\" }, \"4f28bdf6023c640001000095\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000095\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 5, \"standard_id\": \"3\", \"note\": \"Water on Earth moves between the oceans and land through the processes of evaporation and condensation.\", \"T\": \"std\" }, \"4f28bdf6023c640001000096\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000096\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 5, \"standard_id\": \"3a\", \"note\": \"Students know most of Earth's water is present as salt water in the oceans, which cover most of Earth's surface.\", \"T\": \"std\" }, \"4f28bdf6023c640001000097\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000097\" }, \"act_ids\": [{ \"$oid\": \"502994545f6eb1000200000f\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know when liquid water evaporates, it turns into water vapor in the air and can reappear as a liquid when cooled or as a solid if cooled below the freezing point of water.\", \"standard_id\": \"3b\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c640001000098\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000098\" }, \"act_ids\": [{ \"$oid\": \"502994905f6eb10002000013\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know water vapor in the air moves from one place to another and can form fog or clouds, which are tiny droplets of water or ice, and can fall to Earth as rain, hail, sleet, or snow.\", \"standard_id\": \"3c\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c640001000099\": { \"_id\": { \"$oid\": \"4f28bdf6023c640001000099\" }, \"act_ids\": [{ \"$oid\": \"4fa0b76a0d3d050001000005\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know that the amount of fresh water located in rivers, lakes, underground sources, and glaciers is limited and that its availability can be extended by recycling and decreasing the use of water.\", \"standard_id\": \"3d\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c64000100009a\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100009a\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 5, \"standard_id\": \"3e\", \"note\": \"Students know the origin of the water used by their local communities.\", \"T\": \"std\" }, \"4f28bdf6023c64000100009b\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100009b\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 5, \"standard_id\": \"4\", \"note\": \"Energy from the Sun heats Earth unevenly, causing air movements that result in changing weather patterns.\", \"T\": \"std\" }, \"4f28bdf6023c64000100009c\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100009c\" }, \"act_ids\": [{ \"$oid\": \"501bdbc281a5270002000008\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know uneven heating of Earth causes air movements (convection currents).\", \"standard_id\": \"4a\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c64000100009d\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100009d\" }, \"act_ids\": [{ \"$oid\": \"502994905f6eb10002000013\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know the influence that the ocean has on the weather and the role that the water cycle plays in weather patterns.\", \"standard_id\": \"4b\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c64000100009e\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100009e\" }, \"act_ids\": [{ \"$oid\": \"501bdbc281a5270002000008\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know the causes and effects of different types of severe weather.\", \"standard_id\": \"4c\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c64000100009f\": { \"_id\": { \"$oid\": \"4f28bdf6023c64000100009f\" }, \"act_ids\": [], \"body\": \"CA\", \"subject\": \"earth\", \"grade\": 5, \"standard_id\": \"4d\", \"note\": \"Students know how to use weather maps and data to predict local weather and know that weather forecasts depend on many variables.\", \"T\": \"std\" }, \"4f28bdf6023c6400010000a0\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000a0\" }, \"act_ids\": [{ \"$oid\": \"501bdbc281a5270002000008\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know that the Earth's atmosphere exerts a pressure that decreases with distance above Earth's surface and that at any point it exerts this pressure equally in all directions.\", \"standard_id\": \"4e\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c6400010000a1\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000a1\" }, \"act_ids\": [{ \"$oid\": \"504670f0d69d6e000200001a\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"The solar system consists of planets and other bodies that orbit the Sun in predictable paths.\", \"standard_id\": \"5\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c6400010000a2\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000a2\" }, \"act_ids\": [{ \"$oid\": \"501c098a8c154c000200000f\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know the Sun, an average star, is the central and largest body in the solar system and is composed primarily of hydrogen and helium.\", \"standard_id\": \"5a\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c6400010000a3\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000a3\" }, \"act_ids\": [{ \"$oid\": \"501c3a338c154c0002000036\" }, { \"$oid\": \"504670f0d69d6e000200001a\" }, { \"$oid\": \"50985eb8985192000200006a\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know the solar system includes the planet Earth, the Moon, the Sun, eight other planets and their satellites, and smaller objects, such as asteroids and comets.\", \"standard_id\": \"5b\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c6400010000a4\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000a4\" }, \"act_ids\": [{ \"$oid\": \"501c098a8c154c000200000f\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Students know the path of a planet around the Sun is due to the gravitational attraction between the Sun and the planet.\", \"standard_id\": \"5c\", \"subject\": \"earth\", \"T\": \"std\" }, \"4f28bdf6023c6400010000a5\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000a5\" }, \"act_ids\": [{ \"$oid\": \"4fa0b76a0d3d050001000005\" }, { \"$oid\": \"505fabe323d0730002000008\" }, { \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Scientific progress is made by asking meaningful questions and conducting careful investigations.\", \"standard_id\": \"6\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c6400010000a6\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000a6\" }, \"act_ids\": [{ \"$oid\": \"501c3a338c154c0002000036\" }, { \"$oid\": \"505fabe323d0730002000008\" }, { \"$oid\": \"509746a1985192000200000a\" }, { \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Classify objects (e.g., rocks, plants, leaves) in accordance with appropriate criteria.\", \"standard_id\": \"6a\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c6400010000a7\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000a7\" }, \"act_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }, { \"$oid\": \"501bdbc281a5270002000008\" }, { \"$oid\": \"501c098a8c154c000200000f\" }, { \"$oid\": \"501c3a338c154c0002000036\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Develop a testable question.\", \"standard_id\": \"6b\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c6400010000a8\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000a8\" }, \"act_ids\": [{ \"$oid\": \"4f2db7c5af0c2e0001000011\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Plan and conduct a simple investigation based on a student-developed question and write instructions others can follow to carry out the procedure.\", \"standard_id\": \"6c\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c6400010000a9\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000a9\" }, \"act_ids\": [{ \"$oid\": \"501c098a8c154c000200000f\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Identify the dependent and controlled variables in an investigation.\", \"standard_id\": \"6d\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c6400010000aa\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000aa\" }, \"act_ids\": [{ \"$oid\": \"501c098a8c154c000200000f\" }, { \"$oid\": \"501c3a338c154c0002000036\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Identify a single independent variable in a scientific investigation and explain how this variable can be used to collect information to answer a question about the results of the experiment.\", \"standard_id\": \"6e\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c6400010000ab\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000ab\" }, \"act_ids\": [{ \"$oid\": \"501c098a8c154c000200000f\" }, { \"$oid\": \"509807f2985192000200003c\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Select appropriate tools (e.g., thermometers, meter sticks, balances, and graduated cylinders) and make quantitative observations.\", \"standard_id\": \"6f\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c6400010000ac\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000ac\" }, \"act_ids\": [{ \"$oid\": \"4f2db7c5af0c2e0001000011\" }, { \"$oid\": \"501c3a338c154c0002000036\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Record data by using appropriate graphic representations (including charts, graphs, and labeled diagrams) and make inferences based on those data.\", \"standard_id\": \"6g\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c6400010000ad\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000ad\" }, \"act_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }, { \"$oid\": \"5013e0ccb312360002000032\" }, { \"$oid\": \"501bdbc281a5270002000008\" }, { \"$oid\": \"501c098a8c154c000200000f\" }, { \"$oid\": \"501c3a338c154c0002000036\" }, { \"$oid\": \"5011f5495dc28d000200000a\" }, { \"$oid\": \"4f53d9a7feb00c000100000e\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Draw conclusions from scientific evidence and indicate whether further information is needed to support a specific conclusion.\", \"standard_id\": \"6h\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f28bdf6023c6400010000ae\": { \"_id\": { \"$oid\": \"4f28bdf6023c6400010000ae\" }, \"act_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }, { \"$oid\": \"5013e0ccb312360002000032\" }, { \"$oid\": \"501bdbc281a5270002000008\" }, { \"$oid\": \"501c098a8c154c000200000f\" }, { \"$oid\": \"501c3a338c154c0002000036\" }, { \"$oid\": \"5011f5495dc28d000200000a\" }], \"body\": \"CA\", \"grade\": 5, \"note\": \"Write a report of an investigation that includes conducting tests, collecting data or examining evidence, and drawing conclusions.\", \"standard_id\": \"6i\", \"subject\": \"ie\", \"T\": \"std\" }, \"4f2f5a8fa056bc0001000004\": { \"_id\": { \"$oid\": \"4f2f5a8fa056bc0001000004\" }, \"act_ids\": [{ \"$oid\": \"4f2db7c5af0c2e0001000011\" }, { \"$oid\": \"502994545f6eb1000200000f\" }], \"def\": \"Process by which particles leave a liquid and become gas.\\r\\n\", \"term\": \"Evaporation\", \"updated_at\": { \"$date\": \"2012-08-25T20:10:00.000Z\" }, \"T\": \"term\" }, \"4f2f5ac3a056bc0001000008\": { \"_id\": { \"$oid\": \"4f2f5ac3a056bc0001000008\" }, \"act_ids\": [{ \"$oid\": \"4f2db7c5af0c2e0001000011\" }, { \"$oid\": \"4f459103eeaf0a000100000f\" }, { \"$oid\": \"4f6018b5da7241000100001b\" }], \"def\": \"The trait of something that can be measured by volume, mass, and weight.\\r\\n\", \"term\": \"Physical Property\", \"updated_at\": { \"$date\": \"2012-03-14T05:16:15.000Z\" }, \"T\": \"term\" }, \"4f2f5afca056bc000100000c\": { \"_id\": { \"$oid\": \"4f2f5afca056bc000100000c\" }, \"act_ids\": [{ \"$oid\": \"4f2db7c5af0c2e0001000011\" }], \"def\": \"To pass (a liquid, gas, light, or sound) through a device to remove unwanted material.\\r\\n\\r\\n\", \"term\": \"Filter\", \"updated_at\": { \"$date\": \"2012-02-14T02:58:31.000Z\" }, \"T\": \"term\" }, \"4f2f5b13a056bc0001000010\": { \"_id\": { \"$oid\": \"4f2f5b13a056bc0001000010\" }, \"act_ids\": [{ \"$oid\": \"4f2db7c5af0c2e0001000011\" }, { \"$oid\": \"50564226bc0c230002000004\" }], \"def\": \"A physical combination of two or more substances that do not form new substances.\", \"term\": \"Mixture\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"T\": \"term\" }, \"4f2f5b6ba056bc0001000018\": { \"_id\": { \"$oid\": \"4f2f5b6ba056bc0001000018\" }, \"act_ids\": [{ \"$oid\": \"4f2db7c5af0c2e0001000011\" }, { \"$oid\": \"4f6018b5da7241000100001b\" }, { \"$oid\": \"4f7b369b965e190001000021\" }], \"def\": \"A kind of matter with uniform properties.\\r\\n\", \"term\": \"Substance\", \"updated_at\": { \"$date\": \"2012-04-03T19:35:04.000Z\" }, \"T\": \"term\" }, \"4f2f5b86a056bc000100001c\": { \"_id\": { \"$oid\": \"4f2f5b86a056bc000100001c\" }, \"act_ids\": [{ \"$oid\": \"4f2db7c5af0c2e0001000011\" }], \"def\": \"A type of homogenous mixture that contains at least one substance dissolved in another. Particles in a mixture are the size of atoms or molecules and the mixture looks the same everywhere.\\r\\n\", \"term\": \"Solution\", \"updated_at\": { \"$date\": \"2012-02-14T02:58:31.000Z\" }, \"T\": \"term\" }, \"4f2f5bcba056bc0001000024\": { \"_id\": { \"$oid\": \"4f2f5bcba056bc0001000024\" }, \"act_ids\": [{ \"$oid\": \"4f2db7c5af0c2e0001000011\" }], \"def\": \"To pour (a mainly liquid substance) through a porous or perforated device or material in order to separate out any solid matter.\\r\\n\", \"term\": \"Strain\", \"updated_at\": { \"$date\": \"2012-02-14T02:58:31.000Z\" }, \"T\": \"term\" }, \"4f2f5d7fa056bc000100002e\": { \"_id\": { \"$oid\": \"4f2f5d7fa056bc000100002e\" }, \"act_ids\": [{ \"$oid\": \"4f2db7c5af0c2e0001000011\" }, { \"$oid\": \"4f459103eeaf0a000100000f\" }, { \"$oid\": \"4f2f5d2ea056bc000100002a\" }, { \"$oid\": \"50621a5695dae60002000026\" }, { \"$oid\": \"505fabe323d0730002000008\" }, { \"$oid\": \"4fa5b9e74497bf0001000006\" }, { \"$oid\": \"509807f2985192000200003c\" }, { \"$oid\": \"50a0085c2ace730002000006\" }, { \"$oid\": \"506294db71e54a0002000005\" }, { \"$oid\": \"509746a1985192000200000a\" }, { \"$oid\": \"51032d9d4965160002000006\" }, { \"$oid\": \"51453278d960ad000200000a\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }, { \"$oid\": \"4f78ee972ab40b0001000005\" }, { \"$oid\": \"506120e983f605000200003c\" }, { \"$oid\": \"5174ba34d1ccd2000200000c\" }, { \"$oid\": \"50564226bc0c230002000004\" }], \"def\": \"Process of watching or noticing something using one or more of your senses to carefully to gain information.\\r\\n\", \"term\": \"observation\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"T\": \"term\" }, \"4f2f5d9da056bc0001000032\": { \"_id\": { \"$oid\": \"4f2f5d9da056bc0001000032\" }, \"act_ids\": [{ \"$oid\": \"4f2f5d2ea056bc000100002a\" }], \"def\": \"Tubes that carry sugar away from the leaves to the rest of the plant.\\r\\n\", \"term\": \"Phloem\", \"updated_at\": { \"$date\": \"2012-04-02T22:57:44.000Z\" }, \"T\": \"term\" }, \"4f2f5dc1a056bc0001000036\": { \"_id\": { \"$oid\": \"4f2f5dc1a056bc0001000036\" }, \"act_ids\": [{ \"$oid\": \"4f2f5d2ea056bc000100002a\" }], \"def\": \"System of tubes used to transport materials.\\r\\n\", \"term\": \"Vascular system\", \"updated_at\": { \"$date\": \"2012-04-02T22:57:44.000Z\" }, \"T\": \"term\" }, \"4f2f5ddba056bc000100003a\": { \"_id\": { \"$oid\": \"4f2f5ddba056bc000100003a\" }, \"act_ids\": [{ \"$oid\": \"4f2f5d2ea056bc000100002a\" }], \"def\": \"Tubes that carry materials from the plant's roots to its leaves.\", \"term\": \"Xylem\", \"updated_at\": { \"$date\": \"2012-04-02T22:57:44.000Z\" }, \"T\": \"term\" }, \"4f53dcf9feb00c0001000028\": { \"_id\": { \"$oid\": \"4f53dcf9feb00c0001000028\" }, \"act_ids\": [{ \"$oid\": \"503c22d3ef7c68000200001f\" }, { \"$oid\": \"5011f5495dc28d000200000a\" }, { \"$oid\": \"4f53d9a7feb00c000100000e\" }], \"created_at\": { \"$date\": \"2012-03-04T21:22:01.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"Matter is anything that takes up space.\", \"term\": \"Matter\", \"updated_at\": { \"$date\": \"2013-03-03T20:41:21.000Z\" }, \"T\": \"term\" }, \"4f53dd49feb00c000100002c\": { \"_id\": { \"$oid\": \"4f53dd49feb00c000100002c\" }, \"act_ids\": [{ \"$oid\": \"4f53d9a7feb00c000100000e\" }], \"created_at\": { \"$date\": \"2012-03-04T21:23:21.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"Traits that describe an object. For example the way an object tastes, smells, feels and sounds. Properties are used to identify matter.\", \"term\": \"Properties\", \"updated_at\": { \"$date\": \"2013-03-03T20:41:21.000Z\" }, \"T\": \"term\" }, \"4f53dd6dfeb00c0001000030\": { \"_id\": { \"$oid\": \"4f53dd6dfeb00c0001000030\" }, \"act_ids\": [{ \"$oid\": \"50469bc6d69d6e000200003c\" }, { \"$oid\": \"4f53d9a7feb00c000100000e\" }], \"created_at\": { \"$date\": \"2012-03-04T21:23:57.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"Matter that has a definite shape and volume.\", \"term\": \"Solid\", \"updated_at\": { \"$date\": \"2013-03-03T20:41:21.000Z\" }, \"T\": \"term\" }, \"4f53dd87feb00c0001000034\": { \"_id\": { \"$oid\": \"4f53dd87feb00c0001000034\" }, \"act_ids\": [{ \"$oid\": \"5011f5495dc28d000200000a\" }, { \"$oid\": \"502993dc5f6eb10002000007\" }, { \"$oid\": \"4f53d9a7feb00c000100000e\" }], \"created_at\": { \"$date\": \"2012-03-04T21:24:23.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The amount of space that an object takes up.\", \"term\": \"Volume\", \"updated_at\": { \"$date\": \"2013-03-03T20:41:21.000Z\" }, \"T\": \"term\" }, \"4f53e1f8feb00c0001000038\": { \"_id\": { \"$oid\": \"4f53e1f8feb00c0001000038\" }, \"act_ids\": [{ \"$oid\": \"4f53d9a7feb00c000100000e\" }, { \"$oid\": \"4f87648adc4c210001000060\" }, { \"$oid\": \"513a45c112c8310002000003\" }, { \"$oid\": \"50564226bc0c230002000004\" }], \"created_at\": { \"$date\": \"2012-03-04T21:43:20.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"To develop an idea based on facts or observation.\", \"term\": \"infer\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"T\": \"term\" }, \"4f5d041c4a6ca80001000004\": { \"_id\": { \"$oid\": \"4f5d041c4a6ca80001000004\" }, \"act_ids\": [{ \"$oid\": \"4f459103eeaf0a000100000f\" }, { \"$oid\": \"4f6018b5da7241000100001b\" }], \"created_at\": { \"$date\": \"2012-03-11T19:59:24.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"def\": \"The smallest physical particle of an element or compound, consisting of one atom in an element and two or more different atoms in a compound.&nbsp;\", \"term\": \"Molecule\", \"updated_at\": { \"$date\": \"2012-07-28T09:39:17.000Z\" }, \"T\": \"term\" }, \"4f5d04f44a6ca8000100000a\": { \"_id\": { \"$oid\": \"4f5d04f44a6ca8000100000a\" }, \"act_ids\": [{ \"$oid\": \"4f459103eeaf0a000100000f\" }], \"created_at\": { \"$date\": \"2012-03-11T20:03:00.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"def\": \"A physical property of a substance that measures the average motion, or kinetic energy, of each molecule in that substance. Can be measured in kelvin (K), degrees Farenheit (F), or degrees Celcius (C).\", \"term\": \"Temperature\", \"updated_at\": { \"$date\": \"2012-03-14T03:23:49.000Z\" }, \"T\": \"term\" }, \"4f601db5da72410001000023\": { \"_id\": { \"$oid\": \"4f601db5da72410001000023\" }, \"act_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }], \"created_at\": { \"$date\": \"2012-03-14T04:25:25.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"def\": \"Occurs when the bonds are created or broken between molecules.&nbsp;\", \"term\": \"Chemical Reaction\", \"updated_at\": { \"$date\": \"2012-08-04T04:59:42.000Z\" }, \"T\": \"term\" }, \"4f601fbeda72410001000036\": { \"_id\": { \"$oid\": \"4f601fbeda72410001000036\" }, \"act_ids\": [], \"term\": \"Water, tap\", \"def\": \"This can be from a faucet or hose.&nbsp;\", \"creator\": \"4f45904eeeaf0a0001000008\", \"updated_at\": { \"$date\": \"2012-03-14T04:34:06.000Z\" }, \"created_at\": { \"$date\": \"2012-03-14T04:34:06.000Z\" }, \"T\": \"term\" }, \"4f78f1432ab40b0001000038\": { \"_id\": { \"$oid\": \"4f78f1432ab40b0001000038\" }, \"act_ids\": [{ \"$oid\": \"4f78ee972ab40b0001000005\" }], \"created_at\": { \"$date\": \"2012-04-02T00:22:27.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"To state likely results of an event or experiment.\", \"term\": \"Predict\", \"updated_at\": { \"$date\": \"2013-04-11T05:33:19.000Z\" }, \"T\": \"term\" }, \"4f78f1af2ab40b000100003c\": { \"_id\": { \"$oid\": \"4f78f1af2ab40b000100003c\" }, \"act_ids\": [{ \"$oid\": \"4f78ee972ab40b0001000005\" }], \"created_at\": { \"$date\": \"2012-04-02T00:24:15.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The invisible gas that surrounds the earth. It is made of mostly of oxygen and nitrogen.&nbsp;\", \"term\": \"Air\", \"updated_at\": { \"$date\": \"2013-04-11T05:33:19.000Z\" }, \"T\": \"term\" }, \"4f78f2082ab40b0001000040\": { \"_id\": { \"$oid\": \"4f78f2082ab40b0001000040\" }, \"act_ids\": [{ \"$oid\": \"4f78ee972ab40b0001000005\" }], \"created_at\": { \"$date\": \"2012-04-02T00:25:44.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div>A form of energy that is a result of the random motion of molecules.</div><div><br></div>\", \"term\": \"heat\", \"updated_at\": { \"$date\": \"2013-04-11T05:33:19.000Z\" }, \"T\": \"term\" }, \"4f78f94c2ab40b0001000056\": { \"_id\": { \"$oid\": \"4f78f94c2ab40b0001000056\" }, \"act_ids\": [{ \"$oid\": \"4f87648adc4c210001000060\" }, { \"$oid\": \"4f78ee972ab40b0001000005\" }, { \"$oid\": \"54400b299394a00002000005\" }], \"created_at\": { \"$date\": \"2012-04-02T00:56:44.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<font>A test designed to support or disprove a hypothesis.</font><div><font>http://www.sciencekidsathome.com/science_fair/what_is_an_experiment.html</font></div>\", \"term\": \"experiment\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"T\": \"term\" }, \"4f7b38d0965e190001000027\": { \"_id\": { \"$oid\": \"4f7b38d0965e190001000027\" }, \"act_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }], \"created_at\": { \"$date\": \"2012-04-03T17:52:16.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"def\": \"A complete system through which electricity can flow.&nbsp;\", \"term\": \"Circuit\", \"updated_at\": { \"$date\": \"2012-04-03T19:35:04.000Z\" }, \"T\": \"term\" }, \"4f7b39d9965e19000100002b\": { \"_id\": { \"$oid\": \"4f7b39d9965e19000100002b\" }, \"act_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }], \"created_at\": { \"$date\": \"2012-04-03T17:56:41.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"def\": \"The measurement of how easily electricity flows through a particular substance.&nbsp;\", \"term\": \"Conductivity\", \"updated_at\": { \"$date\": \"2012-04-03T19:35:04.000Z\" }, \"T\": \"term\" }, \"4f7b3a6b965e19000100002f\": { \"_id\": { \"$oid\": \"4f7b3a6b965e19000100002f\" }, \"act_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }], \"created_at\": { \"$date\": \"2012-04-03T17:59:07.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"def\": \"The flow of electricity through something\", \"term\": \"Current\", \"updated_at\": { \"$date\": \"2012-04-03T19:35:04.000Z\" }, \"T\": \"term\" }, \"4f7b3b3b965e190001000034\": { \"_id\": { \"$oid\": \"4f7b3b3b965e190001000034\" }, \"act_ids\": [{ \"$oid\": \"4f7b369b965e190001000021\" }], \"created_at\": { \"$date\": \"2012-04-03T18:02:35.000Z\" }, \"creator\": \"4f45904eeeaf0a0001000008\", \"def\": \"The flow of electrons.&nbsp;\", \"term\": \"Electricity\", \"updated_at\": { \"$date\": \"2012-04-03T19:35:04.000Z\" }, \"T\": \"term\" }, \"4f85105e79626d0001000016\": { \"_id\": { \"$oid\": \"4f85105e79626d0001000016\" }, \"act_ids\": [{ \"$oid\": \"4f850f9079626d0001000007\" }], \"created_at\": { \"$date\": \"2012-04-11T05:02:22.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The action of dissecting a body or plant to study its internal parts. For example, the dissection of animals for scientific research.\", \"term\": \"dissection\", \"updated_at\": { \"$date\": \"2013-03-25T22:12:30.000Z\" }, \"T\": \"term\" }, \"4f8511f479626d0001000027\": { \"_id\": { \"$oid\": \"4f8511f479626d0001000027\" }, \"act_ids\": [{ \"$oid\": \"509807f2985192000200003c\" }, { \"$oid\": \"50b1734ce1081a0002000006\" }, { \"$oid\": \"508ee3b5d35ec10002000018\" }, { \"$oid\": \"4f850f9079626d0001000007\" }, { \"$oid\": \"50c6b34fe8e3e10002000002\" }], \"created_at\": { \"$date\": \"2012-04-11T05:09:08.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"A flowering plant's unit of reproduction, capable of developing into another such plant.\", \"term\": \"seed\", \"updated_at\": { \"$date\": \"2013-04-22T01:14:21.000Z\" }, \"T\": \"term\" }, \"4f85123279626d000100002b\": { \"_id\": { \"$oid\": \"4f85123279626d000100002b\" }, \"act_ids\": [{ \"$oid\": \"51032d9d4965160002000006\" }, { \"$oid\": \"4f850f9079626d0001000007\" }, { \"$oid\": \"50c6b34fe8e3e10002000002\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"created_at\": { \"$date\": \"2012-04-11T05:10:10.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The part of a plant that attaches it to the ground or to a support, typically underground, conveying water and nourishment to the rest of the plant via numerous branches and fibers: cacti have deep and spreading roots | a tree root.\", \"term\": \"root\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"T\": \"term\" }, \"4f865fd47d6824000100000a\": { \"_id\": { \"$oid\": \"4f865fd47d6824000100000a\" }, \"act_ids\": [{ \"$oid\": \"4f850f9079626d0001000007\" }], \"created_at\": { \"$date\": \"2012-04-12T04:53:40.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">An embryonic leaf in seed-bearing plants, one or more of which are the first leaves to appear from a germinating seed.</p>\", \"term\": \"cotyledon\", \"updated_at\": { \"$date\": \"2013-03-25T22:12:30.000Z\" }, \"T\": \"term\" }, \"4f8660457d68240001000014\": { \"_id\": { \"$oid\": \"4f8660457d68240001000014\" }, \"act_ids\": [{ \"$oid\": \"4f850f9079626d0001000007\" }], \"created_at\": { \"$date\": \"2012-04-12T04:55:33.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">The rudimentary shoot or stem of an embryo plant.</p>\", \"term\": \"plumule\", \"updated_at\": { \"$date\": \"2013-03-25T22:12:30.000Z\" }, \"T\": \"term\" }, \"4f8660817d68240001000018\": { \"_id\": { \"$oid\": \"4f8660817d68240001000018\" }, \"act_ids\": [{ \"$oid\": \"4f850f9079626d0001000007\" }], \"created_at\": { \"$date\": \"2012-04-12T04:56:33.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">The region of an embryo or seedling stem above the cotyledon.</p>\", \"term\": \"epicotyl\", \"updated_at\": { \"$date\": \"2013-03-25T22:12:30.000Z\" }, \"T\": \"term\" }, \"4f8660ce7d6824000100001f\": { \"_id\": { \"$oid\": \"4f8660ce7d6824000100001f\" }, \"act_ids\": [{ \"$oid\": \"4f850f9079626d0001000007\" }], \"created_at\": { \"$date\": \"2012-04-12T04:57:50.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">The part of the stem of an embryo plant beneath the stalks of the seed leaves, or cotyledons, and directly above the root.</p>\", \"term\": \"hypocotyl\", \"updated_at\": { \"$date\": \"2013-03-25T22:12:30.000Z\" }, \"T\": \"term\" }, \"4f86610e7d68240001000023\": { \"_id\": { \"$oid\": \"4f86610e7d68240001000023\" }, \"act_ids\": [{ \"$oid\": \"4f850f9079626d0001000007\" }], \"created_at\": { \"$date\": \"2012-04-12T04:58:54.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">Botany -&nbsp;the part of a plant embryo that develops into the primary root.</p><p class=\\\"p1\\\">Anatomy - &nbsp;a rootlike subdivision of a nerve or vein.</p>\", \"term\": \"radicle\", \"updated_at\": { \"$date\": \"2013-03-25T22:12:30.000Z\" }, \"T\": \"term\" }, \"4f8754ccdc4c210001000015\": { \"_id\": { \"$oid\": \"4f8754ccdc4c210001000015\" }, \"act_ids\": [{ \"$oid\": \"4f7a92c8965e190001000009\" }], \"created_at\": { \"$date\": \"2012-04-12T22:18:52.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"A group of stars forming a recognizable pattern that is traditionally named after its apparent form or identified with a mythological figure. Modern astronomers divide the sky into eighty-eight constellations with defined boundaries.\", \"term\": \"constellation\", \"updated_at\": { \"$date\": \"2013-03-17T01:48:19.000Z\" }, \"T\": \"term\" }, \"4f87a5aadd735d0001000004\": { \"_id\": { \"$oid\": \"4f87a5aadd735d0001000004\" }, \"act_ids\": [{ \"$oid\": \"501c098a8c154c000200000f\" }, { \"$oid\": \"5011f5495dc28d000200000a\" }, { \"$oid\": \"4f87648adc4c210001000060\" }], \"created_at\": { \"$date\": \"2012-04-13T04:03:54.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">The force that attracts a body toward the center of the earth, or toward any other physical body having mass. For most purposes Newton's laws of gravity apply, with minor modifications to take the general theory of relativity into account.</p>\", \"term\": \"gravity\", \"updated_at\": { \"$date\": \"2013-04-11T05:31:05.000Z\" }, \"T\": \"term\" }, \"4f87a80cdd735d0001000008\": { \"_id\": { \"$oid\": \"4f87a80cdd735d0001000008\" }, \"act_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }, { \"$oid\": \"4f87648adc4c210001000060\" }], \"created_at\": { \"$date\": \"2012-04-13T04:14:04.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<font>Stored energy that is available to be used.&nbsp;</font>It is&nbsp;the energy of position, or&nbsp;gravitational energy.<div><font><br></font><div>The&nbsp;<font>forms of potential energy are: chemical energy, stored mechanical energy,&nbsp;</font>gravitational energy and<font>&nbsp;nuclear energy.</font></div></div>\", \"term\": \"potential energy\", \"updated_at\": { \"$date\": \"2013-04-11T05:31:05.000Z\" }, \"T\": \"term\" }, \"4f87a820dd735d000100000c\": { \"_id\": { \"$oid\": \"4f87a820dd735d000100000c\" }, \"act_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }, { \"$oid\": \"4f87648adc4c210001000060\" }], \"created_at\": { \"$date\": \"2012-04-13T04:14:24.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"Energy of motion. It is&nbsp;the motion of waves,&nbsp;electrons,atoms, molecules,&nbsp;substances, and objects.\", \"term\": \"kinetic energy\", \"updated_at\": { \"$date\": \"2013-04-11T05:31:05.000Z\" }, \"T\": \"term\" }, \"4f87a85fdd735d0001000010\": { \"_id\": { \"$oid\": \"4f87a85fdd735d0001000010\" }, \"act_ids\": [{ \"$oid\": \"503c22d3ef7c68000200001f\" }, { \"$oid\": \"503d53a9f272270002000022\" }, { \"$oid\": \"4f87648adc4c210001000060\" }], \"created_at\": { \"$date\": \"2012-04-13T04:15:27.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\"><font>Scientists define energy as the ability to do work.</font></p><p class=\\\"p1\\\">In physics,&nbsp;the property of matter and radiation that is manifest as a capacity to perform work (such as causing motion or the interaction of molecules):<i> a collision in which no energy is transferred</i>.</p>\", \"term\": \"energy\", \"updated_at\": { \"$date\": \"2013-04-11T05:31:05.000Z\" }, \"T\": \"term\" }, \"4f8b1f08f40044000100002d\": { \"_id\": { \"$oid\": \"4f8b1f08f40044000100002d\" }, \"act_ids\": [{ \"$oid\": \"4f87648adc4c210001000060\" }, { \"$oid\": \"50564226bc0c230002000004\" }], \"created_at\": { \"$date\": \"2012-04-15T19:18:32.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<font>A suggested statement or explanation that can be tested to answer a question.</font><div><font>The hypothesis is an educated guess about the relationship between the independent and dependent variables.</font></div>\", \"term\": \"hypothesis\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"T\": \"term\" }, \"4f8b2012f400440001000034\": { \"_id\": { \"$oid\": \"4f8b2012f400440001000034\" }, \"act_ids\": [{ \"$oid\": \"4f87648adc4c210001000060\" }], \"created_at\": { \"$date\": \"2012-04-15T19:22:58.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"Something that can be changed or controlled.\", \"term\": \"variable\", \"updated_at\": { \"$date\": \"2013-04-11T05:31:05.000Z\" }, \"T\": \"term\" }, \"4f9e1cf37b922d0001000026\": { \"_id\": { \"$oid\": \"4f9e1cf37b922d0001000026\" }, \"act_ids\": [{ \"$oid\": \"4f9e184c7b922d0001000006\" }], \"created_at\": { \"$date\": \"2012-04-30T05:02:43.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The process by which a beam of light or other system of waves is spread out as a result of passing through a narrow aperture or across an edge, typically accompanied by interference between the wave forms produced.\", \"term\": \"diffraction\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"T\": \"term\" }, \"4f9e1d6a7b922d000100002a\": { \"_id\": { \"$oid\": \"4f9e1d6a7b922d000100002a\" }, \"act_ids\": [{ \"$oid\": \"4f9e184c7b922d0001000006\" }], \"created_at\": { \"$date\": \"2012-04-30T05:04:42.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"A special lens that separates white light.\", \"term\": \"prism\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"T\": \"term\" }, \"4f9e1d9e7b922d000100002e\": { \"_id\": { \"$oid\": \"4f9e1d9e7b922d000100002e\" }, \"act_ids\": [{ \"$oid\": \"513a45c112c8310002000003\" }, { \"$oid\": \"4f9e184c7b922d0001000006\" }], \"created_at\": { \"$date\": \"2012-04-30T05:05:34.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">To take in or soak up (energy, or a liquid or other substance) by chemical or physical action, typically gradually.</p>\", \"term\": \"absorb\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"T\": \"term\" }, \"4f9e1dcd7b922d0001000032\": { \"_id\": { \"$oid\": \"4f9e1dcd7b922d0001000032\" }, \"act_ids\": [{ \"$oid\": \"4f9e184c7b922d0001000006\" }], \"created_at\": { \"$date\": \"2012-04-30T05:06:21.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<font>To throw back (heat, light, or sound) without absorbing it.&nbsp;</font>\", \"term\": \"reflect\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"T\": \"term\" }, \"4f9e20187b922d000100003e\": { \"_id\": { \"$oid\": \"4f9e20187b922d000100003e\" }, \"act_ids\": [{ \"$oid\": \"4f9e184c7b922d0001000006\" }], \"created_at\": { \"$date\": \"2012-04-30T05:16:08.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<font>An optical device for producing and observing a spectrum of light or radiation from any source, consisting essentially of a slit through which the radiation passes, a collimating lens, and an Amici prism.</font>\", \"term\": \"spectroscope\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"T\": \"term\" }, \"4f9ed05b7b922d000100004d\": { \"_id\": { \"$oid\": \"4f9ed05b7b922d000100004d\" }, \"act_ids\": [{ \"$oid\": \"4fa66f22c2feba0001000014\" }, { \"$oid\": \"51453278d960ad000200000a\" }, { \"$oid\": \"513a45c112c8310002000003\" }, { \"$oid\": \"4f9e184c7b922d0001000006\" }], \"created_at\": { \"$date\": \"2012-04-30T17:48:11.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"A form of energy that stimulates sight and makes things visible. Light is made of transverse waves that move up and down.\", \"term\": \"light\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"T\": \"term\" }, \"4f9ed0887b922d0001000051\": { \"_id\": { \"$oid\": \"4f9ed0887b922d0001000051\" }, \"act_ids\": [{ \"$oid\": \"513a45c112c8310002000003\" }, { \"$oid\": \"4f9e184c7b922d0001000006\" }], \"created_at\": { \"$date\": \"2012-04-30T17:48:56.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"Light that you can see. Some waves of light energy are visible and color is the light that we can see.\", \"term\": \"visible light\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"T\": \"term\" }, \"4f9ed0a97b922d0001000055\": { \"_id\": { \"$oid\": \"4f9ed0a97b922d0001000055\" }, \"act_ids\": [{ \"$oid\": \"4f9e184c7b922d0001000006\" }], \"created_at\": { \"$date\": \"2012-04-30T17:49:29.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The bouncing of light waves off an object.\", \"term\": \"reflection\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"T\": \"term\" }, \"4f9ed0f17b922d0001000059\": { \"_id\": { \"$oid\": \"4f9ed0f17b922d0001000059\" }, \"act_ids\": [{ \"$oid\": \"4f9e184c7b922d0001000006\" }], \"created_at\": { \"$date\": \"2012-04-30T17:50:41.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"A picture formed from light bouncing off of a surface. An optical appearance or counterpart produced by light or other radiation from an object reflected in a mirror or refracted through a lens.\", \"term\": \"image\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"T\": \"term\" }, \"4fa16e040d3d05000100004b\": { \"_id\": { \"$oid\": \"4fa16e040d3d05000100004b\" }, \"act_ids\": [{ \"$oid\": \"4fa0b76a0d3d050001000005\" }], \"created_at\": { \"$date\": \"2012-05-02T17:25:24.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<font>To make smaller or less in amount, degree, or size.</font>\", \"term\": \"reduce\", \"updated_at\": { \"$date\": \"2012-07-07T19:09:49.000Z\" }, \"T\": \"term\" }, \"4fa16e3f0d3d05000100004f\": { \"_id\": { \"$oid\": \"4fa16e3f0d3d05000100004f\" }, \"act_ids\": [{ \"$oid\": \"4fa0b76a0d3d050001000005\" }], \"created_at\": { \"$date\": \"2012-05-02T17:26:23.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div>To use again or more than once.</div>\", \"term\": \"reuse\", \"updated_at\": { \"$date\": \"2012-07-07T19:09:49.000Z\" }, \"T\": \"term\" }, \"4fa16e800d3d050001000054\": { \"_id\": { \"$oid\": \"4fa16e800d3d050001000054\" }, \"act_ids\": [{ \"$oid\": \"4fa0b76a0d3d050001000005\" }, { \"$oid\": \"506294db71e54a0002000005\" }], \"created_at\": { \"$date\": \"2012-05-02T17:27:28.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"To convert (waste) into reusable material.\", \"term\": \"recycle\", \"updated_at\": { \"$date\": \"2013-01-20T03:50:02.000Z\" }, \"T\": \"term\" }, \"4fa176fc0d3d050001000065\": { \"_id\": { \"$oid\": \"4fa176fc0d3d050001000065\" }, \"act_ids\": [{ \"$oid\": \"4fa0b76a0d3d050001000005\" }], \"created_at\": { \"$date\": \"2012-05-02T18:03:40.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"An approximate calculation or judgment of the value, number, quantity, or extent of something.\", \"term\": \"estimate\", \"updated_at\": { \"$date\": \"2012-07-07T19:09:49.000Z\" }, \"T\": \"term\" }, \"4fa5ba2f4497bf000100000a\": { \"_id\": { \"$oid\": \"4fa5ba2f4497bf000100000a\" }, \"act_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"created_at\": { \"$date\": \"2012-05-05T23:39:27.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The process of transformation from an immature form to an adult form in two or more distinct stages.\", \"term\": \"metamorphosis\", \"updated_at\": { \"$date\": \"2012-10-29T18:49:38.000Z\" }, \"T\": \"term\" }, \"4fa5ba944497bf000100000e\": { \"_id\": { \"$oid\": \"4fa5ba944497bf000100000e\" }, \"act_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"created_at\": { \"$date\": \"2012-05-05T23:41:08.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The newly hatched, wingless, often wormlike form of many insects before metamorphosis.\", \"term\": \"larva\", \"updated_at\": { \"$date\": \"2012-10-29T18:49:38.000Z\" }, \"T\": \"term\" }, \"4fa5c9fc4497bf0001000031\": { \"_id\": { \"$oid\": \"4fa5c9fc4497bf0001000031\" }, \"act_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"created_at\": { \"$date\": \"2012-05-06T00:46:52.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<font>The branch of science concerned with the study of insects.</font>\", \"term\": \"entomology\", \"updated_at\": { \"$date\": \"2012-10-29T18:49:38.000Z\" }, \"T\": \"term\" }, \"4fa5ca384497bf0001000035\": { \"_id\": { \"$oid\": \"4fa5ca384497bf0001000035\" }, \"act_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"created_at\": { \"$date\": \"2012-05-06T00:47:52.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">An insect in its inactive immature form between larva and adult, e.g., a chrysalis.</p>\", \"term\": \"pupa\", \"updated_at\": { \"$date\": \"2012-10-29T18:49:38.000Z\" }, \"T\": \"term\" }, \"4fa81171ee52d30001000007\": { \"_id\": { \"$oid\": \"4fa81171ee52d30001000007\" }, \"act_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"created_at\": { \"$date\": \"2012-05-07T18:16:17.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">An oval or round object laid by a female bird, reptile, fish, or invertebrate, usually containing a developing embryo.</p>\", \"term\": \"egg\", \"updated_at\": { \"$date\": \"2012-10-29T18:49:38.000Z\" }, \"T\": \"term\" }, \"4fa8127eee52d3000100000b\": { \"_id\": { \"$oid\": \"4fa8127eee52d3000100000b\" }, \"act_ids\": [{ \"$oid\": \"4fa5b9e74497bf0001000006\" }], \"created_at\": { \"$date\": \"2012-05-07T18:20:46.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"A ladybug is really a bettle. The most familiar type is the <i>convergent ladybug</i>&nbsp;that is a&nbsp;small beetle with a domed back, typically red or yellow with black spots. Both the adults and larvae are important predators of aphids.\", \"term\": \"ladybug\", \"updated_at\": { \"$date\": \"2012-10-29T18:49:38.000Z\" }, \"T\": \"term\" }, \"4fdcfcaa1bc42e0003000004\": { \"_id\": { \"$oid\": \"4fdcfcaa1bc42e0003000004\" }, \"act_ids\": [], \"created_at\": { \"$date\": \"2012-06-16T21:37:46.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"A fluid whose stress at each point is linearly proportional to its strain rate at that point. The concept was first deduced by Isaac Newton and is directly analogous to Hooke's law for a solid. All gases are newtonian, as are most common liquids such as water, hydrocarbons, and oils.\", \"term\": \"newtonian fluid\", \"updated_at\": { \"$date\": \"2012-06-16T21:37:46.000Z\" }, \"T\": \"term\" }, \"4fdcfce61bc42e0003000008\": { \"_id\": { \"$oid\": \"4fdcfce61bc42e0003000008\" }, \"act_ids\": [], \"created_at\": { \"$date\": \"2012-06-16T21:38:46.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"One of three fundamental conditions of matter: the solid, liquid, and gaseous states.\", \"term\": \"state of matter\", \"updated_at\": { \"$date\": \"2012-06-16T21:38:46.000Z\" }, \"T\": \"term\" }, \"501221935dc28d0002000027\": { \"_id\": { \"$oid\": \"501221935dc28d0002000027\" }, \"act_ids\": [{ \"$oid\": \"5011f5495dc28d000200000a\" }], \"created_at\": { \"$date\": \"2012-07-27T05:05:23.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The size of the surface enclosed by an object.\", \"term\": \"Area\", \"updated_at\": { \"$date\": \"2012-09-25T02:42:08.000Z\" }, \"T\": \"term\" }, \"501221e25dc28d000200002c\": { \"_id\": { \"$oid\": \"501221e25dc28d000200002c\" }, \"act_ids\": [{ \"$oid\": \"5011f5495dc28d000200000a\" }], \"created_at\": { \"$date\": \"2012-07-27T05:06:42.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The force exerted over an area.\", \"term\": \"Pressure\", \"updated_at\": { \"$date\": \"2012-09-25T02:42:08.000Z\" }, \"T\": \"term\" }, \"5013b4c7b31236000200001a\": { \"_id\": { \"$oid\": \"5013b4c7b31236000200001a\" }, \"act_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }], \"created_at\": { \"$date\": \"2012-07-28T09:45:43.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The smallest unit of an element, which has the properties of the element. &nbsp;A cluster of protons and neutrons surrounded by electrons.\", \"term\": \"Atom\", \"updated_at\": { \"$date\": \"2012-08-04T04:59:42.000Z\" }, \"T\": \"term\" }, \"5013baa0b312360002000020\": { \"_id\": { \"$oid\": \"5013baa0b312360002000020\" }, \"act_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }], \"created_at\": { \"$date\": \"2012-07-28T10:10:40.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"Any of a number of forces between atoms forming them into molecules.\", \"term\": \"Chemical Bond\", \"updated_at\": { \"$date\": \"2012-08-04T04:59:42.000Z\" }, \"T\": \"term\" }, \"5013baf1b312360002000024\": { \"_id\": { \"$oid\": \"5013baf1b312360002000024\" }, \"act_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }, { \"$oid\": \"50465ebbd69d6e0002000008\" }], \"created_at\": { \"$date\": \"2012-07-28T10:12:01.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"One of over a hundred materials which make everything in the universe. &nbsp;A material is an element if it consists of atoms of one type.\", \"term\": \"Element\", \"updated_at\": { \"$date\": \"2012-09-04T21:30:12.000Z\" }, \"T\": \"term\" }, \"5013bb9cb312360002000028\": { \"_id\": { \"$oid\": \"5013bb9cb312360002000028\" }, \"act_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }], \"created_at\": { \"$date\": \"2012-07-28T10:14:52.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The initial components of a chemical reaction. &nbsp;The bonds of the reactants are rearranged during a chemical reactions.\", \"term\": \"Reactant\", \"updated_at\": { \"$date\": \"2012-08-04T04:59:42.000Z\" }, \"T\": \"term\" }, \"5013bbe5b31236000200002c\": { \"_id\": { \"$oid\": \"5013bbe5b31236000200002c\" }, \"act_ids\": [{ \"$oid\": \"5013b345b31236000200000a\" }], \"created_at\": { \"$date\": \"2012-07-28T10:16:05.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The product of a chemical reaction are the final form of the reactants. &nbsp;The reactants and products have different properties.\", \"term\": \"Product\", \"updated_at\": { \"$date\": \"2012-08-04T04:59:42.000Z\" }, \"T\": \"term\" }, \"5013ff4210784b0002000004\": { \"_id\": { \"$oid\": \"5013ff4210784b0002000004\" }, \"act_ids\": [{ \"$oid\": \"5013e0ccb312360002000032\" }], \"created_at\": { \"$date\": \"2012-07-28T15:03:30.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A thin layer of tissue which allows water to flow through. &nbsp;\", \"term\": \"Membrane\", \"updated_at\": { \"$date\": \"2012-08-04T05:00:24.000Z\" }, \"T\": \"term\" }, \"501400aa10784b0002000010\": { \"_id\": { \"$oid\": \"501400aa10784b0002000010\" }, \"act_ids\": [{ \"$oid\": \"5013e0ccb312360002000032\" }], \"created_at\": { \"$date\": \"2012-07-28T15:09:30.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"Ducts which transfer urine from the kidneys to the bladder.\", \"term\": \"Ureter\", \"updated_at\": { \"$date\": \"2012-08-04T05:00:24.000Z\" }, \"T\": \"term\" }, \"501bfc5a81a5270002000012\": { \"_id\": { \"$oid\": \"501bfc5a81a5270002000012\" }, \"act_ids\": [{ \"$oid\": \"501bdbc281a5270002000008\" }], \"created_at\": { \"$date\": \"2012-08-03T16:29:14.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"Air that rises and falls rapidly in a circular motion due to unequal heating.\", \"term\": \"Convection Cell\", \"updated_at\": { \"$date\": \"2012-08-04T05:00:55.000Z\" }, \"T\": \"term\" }, \"501bfd9981a527000200001b\": { \"_id\": { \"$oid\": \"501bfd9981a527000200001b\" }, \"act_ids\": [{ \"$oid\": \"501bdbc281a5270002000008\" }], \"created_at\": { \"$date\": \"2012-08-03T16:34:33.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"One possible result of a severe storm, a rapidly rotating wind that moves across the ground\", \"term\": \"Tornado\", \"updated_at\": { \"$date\": \"2012-08-04T05:00:55.000Z\" }, \"T\": \"term\" }, \"501bfe988c154c0002000002\": { \"_id\": { \"$oid\": \"501bfe988c154c0002000002\" }, \"act_ids\": [{ \"$oid\": \"501bdbc281a5270002000008\" }], \"created_at\": { \"$date\": \"2012-08-03T16:38:48.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A common precursor to tornadoes, a series of rotating winds that start within a convection cell and approaches the ground\", \"term\": \"Funnel Cloud\", \"updated_at\": { \"$date\": \"2012-08-04T05:00:55.000Z\" }, \"T\": \"term\" }, \"501c1f8d8c154c0002000022\": { \"_id\": { \"$oid\": \"501c1f8d8c154c0002000022\" }, \"act_ids\": [{ \"$oid\": \"501c098a8c154c000200000f\" }, { \"$oid\": \"501c3a338c154c0002000036\" }, { \"$oid\": \"504670f0d69d6e000200001a\" }], \"created_at\": { \"$date\": \"2012-08-03T18:59:25.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"Path taken by an object in space as it revolves around another object in space\", \"term\": \"Orbit\", \"updated_at\": { \"$date\": \"2012-11-05T19:49:02.000Z\" }, \"T\": \"term\" }, \"502450480b84e40002000013\": { \"_id\": { \"$oid\": \"502450480b84e40002000013\" }, \"act_ids\": [{ \"$oid\": \"501c3a338c154c0002000036\" }], \"created_at\": { \"$date\": \"2012-08-10T00:05:28.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The amount of matter an object consists of.\", \"term\": \"Mass\", \"updated_at\": { \"$date\": \"2012-08-10T00:19:54.000Z\" }, \"T\": \"term\" }, \"502450830b84e40002000017\": { \"_id\": { \"$oid\": \"502450830b84e40002000017\" }, \"act_ids\": [{ \"$oid\": \"501c3a338c154c0002000036\" }], \"created_at\": { \"$date\": \"2012-08-10T00:06:27.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The maximum length a single straight line can have inside a circle.\", \"term\": \"Diameter\", \"updated_at\": { \"$date\": \"2012-08-10T00:19:54.000Z\" }, \"T\": \"term\" }, \"502e3a8a3f3615000200000b\": { \"_id\": { \"$oid\": \"502e3a8a3f3615000200000b\" }, \"act_ids\": [{ \"$oid\": \"502994905f6eb10002000013\" }], \"created_at\": { \"$date\": \"2012-08-17T12:35:22.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"An instrument for observing clouds, specifically their speed and direction\", \"term\": \"Nephoscope\", \"updated_at\": { \"$date\": \"2012-11-05T23:44:54.000Z\" }, \"T\": \"term\" }, \"502e3b033f3615000200000f\": { \"_id\": { \"$oid\": \"502e3b033f3615000200000f\" }, \"act_ids\": [{ \"$oid\": \"502994905f6eb10002000013\" }], \"created_at\": { \"$date\": \"2012-08-17T12:37:23.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The lowest part of the Earth's atmosphere. &nbsp;This is where almost all weather takes place.\", \"term\": \"Troposphere\", \"updated_at\": { \"$date\": \"2012-11-05T23:44:54.000Z\" }, \"T\": \"term\" }, \"502e3b9b3f36150002000015\": { \"_id\": { \"$oid\": \"502e3b9b3f36150002000015\" }, \"act_ids\": [{ \"$oid\": \"502994905f6eb10002000013\" }], \"created_at\": { \"$date\": \"2012-08-17T12:39:55.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"Large white puffy clouds which can form thunderheads on a hot day.\", \"term\": \"Cumulus Clouds\", \"updated_at\": { \"$date\": \"2012-11-05T23:44:54.000Z\" }, \"T\": \"term\" }, \"502e3c923f36150002000019\": { \"_id\": { \"$oid\": \"502e3c923f36150002000019\" }, \"act_ids\": [{ \"$oid\": \"502994905f6eb10002000013\" }], \"created_at\": { \"$date\": \"2012-08-17T12:44:02.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"Low hanging clouds that are usually a bit grey and horizontal.\", \"term\": \"Stratus Clouds\", \"updated_at\": { \"$date\": \"2012-11-05T23:44:54.000Z\" }, \"T\": \"term\" }, \"502e3f253f36150002000026\": { \"_id\": { \"$oid\": \"502e3f253f36150002000026\" }, \"act_ids\": [{ \"$oid\": \"502994905f6eb10002000013\" }], \"created_at\": { \"$date\": \"2012-08-17T12:55:01.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"High altitude clouds that look thin and wispy; typically form series of bands across the sky\", \"term\": \"Cirrus Clouds\", \"updated_at\": { \"$date\": \"2012-11-05T23:44:54.000Z\" }, \"T\": \"term\" }, \"502e4dc13f36150002000033\": { \"_id\": { \"$oid\": \"502e4dc13f36150002000033\" }, \"act_ids\": [{ \"$oid\": \"5029941b5f6eb1000200000b\" }], \"created_at\": { \"$date\": \"2012-08-17T13:57:21.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"Inflammation of air passages leading to the lungs\", \"term\": \"Bronchitis\", \"updated_at\": { \"$date\": \"2012-08-25T18:54:23.000Z\" }, \"T\": \"term\" }, \"503093d45854e8000200000a\": { \"_id\": { \"$oid\": \"503093d45854e8000200000a\" }, \"act_ids\": [{ \"$oid\": \"5029941b5f6eb1000200000b\" }], \"created_at\": { \"$date\": \"2012-08-19T07:20:52.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A single tiny, thin, sac in the lungs where carbon dioxide and oxygen are exchanged. &nbsp;Also called air sac, there are millions of these in each lung.\", \"term\": \"Alveolus\", \"updated_at\": { \"$date\": \"2012-08-25T18:54:23.000Z\" }, \"T\": \"term\" }, \"503096fa5854e8000200000e\": { \"_id\": { \"$oid\": \"503096fa5854e8000200000e\" }, \"act_ids\": [{ \"$oid\": \"5029941b5f6eb1000200000b\" }], \"created_at\": { \"$date\": \"2012-08-19T07:34:18.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A form of a long term lung disease where air passages narrow and the lungs are destroyed over time.\", \"term\": \"Emphysema\", \"updated_at\": { \"$date\": \"2012-08-25T18:54:23.000Z\" }, \"T\": \"term\" }, \"503097b95854e80002000012\": { \"_id\": { \"$oid\": \"503097b95854e80002000012\" }, \"act_ids\": [{ \"$oid\": \"5029941b5f6eb1000200000b\" }], \"created_at\": { \"$date\": \"2012-08-19T07:37:29.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A long term recurring disease where the air passages in the lungs narrow making it harder to breathe.\", \"term\": \"Chronic Obstructive Pulmonary Disease\", \"updated_at\": { \"$date\": \"2012-08-25T18:54:23.000Z\" }, \"T\": \"term\" }, \"50309c475854e80002000020\": { \"_id\": { \"$oid\": \"50309c475854e80002000020\" }, \"act_ids\": [{ \"$oid\": \"502993dc5f6eb10002000007\" }], \"created_at\": { \"$date\": \"2012-08-19T07:56:55.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The amount of space in the outside surface of an object. &nbsp;Meaning, the minimum amount of cloth needed to cover an object completely.\", \"term\": \"Surface Area\", \"updated_at\": { \"$date\": \"2012-11-11T04:48:20.000Z\" }, \"T\": \"term\" }, \"50309cae5854e80002000024\": { \"_id\": { \"$oid\": \"50309cae5854e80002000024\" }, \"act_ids\": [{ \"$oid\": \"502993dc5f6eb10002000007\" }], \"created_at\": { \"$date\": \"2012-08-19T07:58:38.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"All the different organs and all the things they do to process and move food throughout the human body.\", \"term\": \"Digestive System\", \"updated_at\": { \"$date\": \"2012-11-11T04:48:20.000Z\" }, \"T\": \"term\" }, \"50309dc25854e80002000028\": { \"_id\": { \"$oid\": \"50309dc25854e80002000028\" }, \"act_ids\": [{ \"$oid\": \"502993dc5f6eb10002000007\" }], \"created_at\": { \"$date\": \"2012-08-19T08:03:14.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"<font>A strong acid&nbsp;secreted&nbsp;by the stomach to help break down food for further digestion by the&nbsp;intestines.</font>\", \"term\": \"Gastric Juices\", \"updated_at\": { \"$date\": \"2012-11-11T04:48:20.000Z\" }, \"T\": \"term\" }, \"5030a0545854e8000200002c\": { \"_id\": { \"$oid\": \"5030a0545854e8000200002c\" }, \"act_ids\": [], \"created_at\": { \"$date\": \"2012-08-19T08:14:12.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A liquid that typically has a sour taste and a burning feeling. &nbsp;A strong acid can cause burns; all acids should be handled carefully.\", \"term\": \"Acid\", \"updated_at\": { \"$date\": \"2012-08-19T08:15:23.000Z\" }, \"T\": \"term\" }, \"5030a13c5854e80002000030\": { \"_id\": { \"$oid\": \"5030a13c5854e80002000030\" }, \"act_ids\": [{ \"$oid\": \"502993dc5f6eb10002000007\" }], \"created_at\": { \"$date\": \"2012-08-19T08:18:04.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A molecule that manipulates initial components of reaction so that the reaction requires less energy to occur. &nbsp;Reactions often have a specific or several specific enzymes.\", \"term\": \"Enzymes\", \"updated_at\": { \"$date\": \"2012-11-11T04:48:20.000Z\" }, \"T\": \"term\" }, \"5030a3515854e80002000037\": { \"_id\": { \"$oid\": \"5030a3515854e80002000037\" }, \"act_ids\": [{ \"$oid\": \"502994545f6eb1000200000f\" }], \"created_at\": { \"$date\": \"2012-08-19T08:26:57.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"When a gas or vapor becomes a liquid, typically by releasing energy or coming in contact with cooler object, which absorbs some of its energy.\", \"term\": \"Condensation\", \"updated_at\": { \"$date\": \"2012-08-25T20:10:00.000Z\" }, \"T\": \"term\" }, \"5030a3de5854e8000200003b\": { \"_id\": { \"$oid\": \"5030a3de5854e8000200003b\" }, \"act_ids\": [{ \"$oid\": \"502994545f6eb1000200000f\" }], \"created_at\": { \"$date\": \"2012-08-19T08:29:18.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The process by which water travels as a vapor, liquid, and solid throughout the planet, typically as surface water, clouds, and precipitation.\", \"term\": \"Water Cycle\", \"updated_at\": { \"$date\": \"2012-08-25T20:10:00.000Z\" }, \"T\": \"term\" }, \"503c0920ef7c680002000008\": { \"_id\": { \"$oid\": \"503c0920ef7c680002000008\" }, \"act_ids\": [{ \"$oid\": \"503c0615ef7c680002000004\" }], \"created_at\": { \"$date\": \"2012-08-27T23:56:16.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"the force exerted by magnets or magnetized items\", \"term\": \"Magnetism\", \"updated_at\": { \"$date\": \"2012-08-28T00:41:54.000Z\" }, \"T\": \"term\" }, \"503c0bafef7c68000200000c\": { \"_id\": { \"$oid\": \"503c0bafef7c68000200000c\" }, \"act_ids\": [{ \"$oid\": \"503c0615ef7c680002000004\" }], \"created_at\": { \"$date\": \"2012-08-28T00:07:11.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The magnetic north pole is where the south end of magnets point. &nbsp;The magnetic south pole is where the north end of magnets point. &nbsp;This is because the earth itself is magnet and has it's own magnetic field as shown below.<div><img src=\\\"http://www.unc.edu/depts/oceanweb/turtles/geomag.gif\\\"><div><div>Image from University of Northern Carolina at Chapel Hill</div><div><b><br></b></div></div></div>\", \"term\": \"Magnetic Poles\", \"updated_at\": { \"$date\": \"2012-08-28T00:44:55.000Z\" }, \"T\": \"term\" }, \"503c0fcaef7c680002000010\": { \"_id\": { \"$oid\": \"503c0fcaef7c680002000010\" }, \"act_ids\": [{ \"$oid\": \"503c0615ef7c680002000004\" }], \"created_at\": { \"$date\": \"2012-08-28T00:24:42.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The space around a magnet that is affected by its magnetic pull. &nbsp;In the image below you can see how pieces of iron are affected by the magnetic pull and also how the compass is influenced.<div><br></div><div><img src=\\\"http://www.school-for-champions.com/science/images/magnetic_detection-iron_filings.jpg\\\"></div><div>Image from Ron Kurtus' School for Champions</div>\", \"term\": \"Magnetic Field\", \"updated_at\": { \"$date\": \"2012-08-28T00:41:54.000Z\" }, \"T\": \"term\" }, \"503c1273ef7c680002000014\": { \"_id\": { \"$oid\": \"503c1273ef7c680002000014\" }, \"act_ids\": [{ \"$oid\": \"503c0615ef7c680002000004\" }], \"created_at\": { \"$date\": \"2012-08-28T00:36:03.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"where the axis of rotation of the planets intersects the surface of the planet<div><img src=\\\"http://www.school-for-champions.com/astronomy/images/earth_motion__rotates_axis.gif\\\"><font><br></font><div>Image from Ron Kurtus' School for Champions</div></div>\", \"term\": \"Geographic Poles\", \"updated_at\": { \"$date\": \"2012-08-28T00:41:54.000Z\" }, \"T\": \"term\" }, \"503c2351ef7c680002000026\": { \"_id\": { \"$oid\": \"503c2351ef7c680002000026\" }, \"act_ids\": [{ \"$oid\": \"503c22d3ef7c68000200001f\" }], \"created_at\": { \"$date\": \"2012-08-28T01:48:01.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"<font>the series of processes by a living organism&nbsp;necessary&nbsp;to convert matter into energy</font>\", \"term\": \"Metabolism\", \"updated_at\": { \"$date\": \"2012-09-05T18:46:16.000Z\" }, \"T\": \"term\" }, \"503c2456ef7c68000200002a\": { \"_id\": { \"$oid\": \"503c2456ef7c68000200002a\" }, \"act_ids\": [{ \"$oid\": \"503c22d3ef7c68000200001f\" }], \"created_at\": { \"$date\": \"2012-08-28T01:52:22.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A series of relationships where one organism eat another or the product of another organism. &nbsp;One example is a plant absorbs sunlight and matter to grow, then a mouse eats the seeds from the plant, the mouse is then eaten by snake, which is then eaten by a hawk, and finally when the hawk dies it will decompose becoming a part of the soil to be used by a plant to grow.\", \"term\": \"Food Chain\", \"updated_at\": { \"$date\": \"2012-09-05T18:46:16.000Z\" }, \"T\": \"term\" }, \"503d24fff272270002000015\": { \"_id\": { \"$oid\": \"503d24fff272270002000015\" }, \"act_ids\": [{ \"$oid\": \"503d21f8f27227000200000f\" }, { \"$oid\": \"50564226bc0c230002000004\" }], \"created_at\": { \"$date\": \"2012-08-28T20:07:27.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"<font>The ratio between a material's mass and their volume. &nbsp;For example, magnetite, one form of black sand has a density of 5.2 grams per milliliter while salt has a density around 2.2 grams per&nbsp;milliliter. &nbsp;This means magnetite is more dense than salt or has more mass given the same amount.</font>\", \"term\": \"Density\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"T\": \"term\" }, \"503d254df272270002000019\": { \"_id\": { \"$oid\": \"503d254df272270002000019\" }, \"act_ids\": [{ \"$oid\": \"50469bc6d69d6e000200003c\" }, { \"$oid\": \"503d21f8f27227000200000f\" }], \"created_at\": { \"$date\": \"2012-08-28T20:08:45.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The removal and transportation of earth over time by wind, water, and other natural causes.&nbsp;\", \"term\": \"Erosion\", \"updated_at\": { \"$date\": \"2012-10-02T21:52:46.000Z\" }, \"T\": \"term\" }, \"503d5507f272270002000026\": { \"_id\": { \"$oid\": \"503d5507f272270002000026\" }, \"act_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }], \"created_at\": { \"$date\": \"2012-08-28T23:32:23.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A rigid pole balanced on a point used to move an object on one end by moving the other. &nbsp;A seesaw is a lever, by pushing up on the lowered end of the seesaw, the other end comes down.\", \"term\": \"Lever\", \"updated_at\": { \"$date\": \"2012-10-02T21:53:53.000Z\" }, \"T\": \"term\" }, \"503d55d8f27227000200002a\": { \"_id\": { \"$oid\": \"503d55d8f27227000200002a\" }, \"act_ids\": [{ \"$oid\": \"503d53a9f272270002000022\" }], \"created_at\": { \"$date\": \"2012-08-28T23:35:52.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A physical device with fixed and moving parts that converts one form of energy to another more useful form of energy.\", \"term\": \"Simple Machine\", \"updated_at\": { \"$date\": \"2012-10-02T21:53:53.000Z\" }, \"T\": \"term\" }, \"50465f5ed69d6e000200000c\": { \"_id\": { \"$oid\": \"50465f5ed69d6e000200000c\" }, \"act_ids\": [{ \"$oid\": \"50465ebbd69d6e0002000008\" }], \"created_at\": { \"$date\": \"2012-09-04T20:06:54.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A diagram describing the different properties and relationships of the elements.\", \"term\": \"Periodic Table of Elements\", \"updated_at\": { \"$date\": \"2012-09-04T21:30:12.000Z\" }, \"T\": \"term\" }, \"50465fbfd69d6e0002000010\": { \"_id\": { \"$oid\": \"50465fbfd69d6e0002000010\" }, \"act_ids\": [{ \"$oid\": \"50465ebbd69d6e0002000008\" }], \"created_at\": { \"$date\": \"2012-09-04T20:08:31.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A one or two letter abbreviation for a specific element used in shorthand and also in chemical equations. The first letter is capitalized and the second is lowercase.\\r\\n\", \"term\": \"Chemical Symbol\", \"updated_at\": { \"$date\": \"2012-09-04T21:30:12.000Z\" }, \"T\": \"term\" }, \"5046711fd69d6e000200001e\": { \"_id\": { \"$oid\": \"5046711fd69d6e000200001e\" }, \"act_ids\": [{ \"$oid\": \"504670f0d69d6e000200001a\" }], \"created_at\": { \"$date\": \"2012-09-04T21:22:39.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A measurement of how wide an angle is or the position of one line in relation to another line.\", \"term\": \"Degrees\", \"updated_at\": { \"$date\": \"2012-11-05T19:49:02.000Z\" }, \"T\": \"term\" }, \"50467134d69d6e0002000022\": { \"_id\": { \"$oid\": \"50467134d69d6e0002000022\" }, \"act_ids\": [{ \"$oid\": \"504670f0d69d6e000200001a\" }], \"created_at\": { \"$date\": \"2012-09-04T21:23:00.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A descriptive term meaning in “relation to the sun”. &nbsp;For example heliocentric degrees means degrees measure where the sun is in the center.\", \"term\": \"Heliocentric\", \"updated_at\": { \"$date\": \"2012-11-05T19:49:02.000Z\" }, \"T\": \"term\" }, \"50467147d69d6e0002000026\": { \"_id\": { \"$oid\": \"50467147d69d6e0002000026\" }, \"act_ids\": [{ \"$oid\": \"504670f0d69d6e000200001a\" }], \"created_at\": { \"$date\": \"2012-09-04T21:23:19.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The nearest distance to the sun\", \"term\": \"Aphelion\", \"updated_at\": { \"$date\": \"2012-11-05T19:49:02.000Z\" }, \"T\": \"term\" }, \"5046715bd69d6e000200002a\": { \"_id\": { \"$oid\": \"5046715bd69d6e000200002a\" }, \"act_ids\": [{ \"$oid\": \"504670f0d69d6e000200001a\" }], \"created_at\": { \"$date\": \"2012-09-04T21:23:39.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The farthest distance to the sun\", \"term\": \"Perihelion\", \"updated_at\": { \"$date\": \"2012-11-05T19:49:02.000Z\" }, \"T\": \"term\" }, \"5046716dd69d6e000200002e\": { \"_id\": { \"$oid\": \"5046716dd69d6e000200002e\" }, \"act_ids\": [{ \"$oid\": \"504670f0d69d6e000200001a\" }], \"created_at\": { \"$date\": \"2012-09-04T21:23:57.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"How elongated a circle or ellipse is\", \"term\": \"Eccentricity\", \"updated_at\": { \"$date\": \"2012-11-05T19:49:02.000Z\" }, \"T\": \"term\" }, \"50467184d69d6e0002000032\": { \"_id\": { \"$oid\": \"50467184d69d6e0002000032\" }, \"act_ids\": [{ \"$oid\": \"504670f0d69d6e000200001a\" }], \"created_at\": { \"$date\": \"2012-09-04T21:24:20.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The position in degrees of an object in perspective of a center object and a fixed line. &nbsp;For example, San Francisco has a longitude of around 122 degrees west of a fixed line going through London, England.\", \"term\": \"Longitude\", \"updated_at\": { \"$date\": \"2012-11-05T19:49:02.000Z\" }, \"T\": \"term\" }, \"50469c46d69d6e0002000040\": { \"_id\": { \"$oid\": \"50469c46d69d6e0002000040\" }, \"act_ids\": [{ \"$oid\": \"50469bc6d69d6e000200003c\" }], \"created_at\": { \"$date\": \"2012-09-05T00:26:46.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"The shape formed by a series of bend made by a stream or river\", \"term\": \"Meander\", \"updated_at\": { \"$date\": \"2012-09-25T20:46:05.000Z\" }, \"T\": \"term\" }, \"50469c56d69d6e0002000044\": { \"_id\": { \"$oid\": \"50469c56d69d6e0002000044\" }, \"act_ids\": [{ \"$oid\": \"50469bc6d69d6e000200003c\" }], \"created_at\": { \"$date\": \"2012-09-05T00:27:02.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A narrow crack or opening\", \"term\": \"Crevice\", \"updated_at\": { \"$date\": \"2012-09-25T20:46:05.000Z\" }, \"T\": \"term\" }, \"50469c8fd69d6e0002000048\": { \"_id\": { \"$oid\": \"50469c8fd69d6e0002000048\" }, \"act_ids\": [{ \"$oid\": \"50469bc6d69d6e000200003c\" }], \"created_at\": { \"$date\": \"2012-09-05T00:27:59.000Z\" }, \"creator\": \"500f07cb5103340002000011\", \"def\": \"A specific state of matter where the object flows and is hard to compress\", \"term\": \"Liquid\", \"updated_at\": { \"$date\": \"2012-09-25T20:46:05.000Z\" }, \"T\": \"term\" }, \"50564365bc0c230002000010\": { \"_id\": { \"$oid\": \"50564365bc0c230002000010\" }, \"act_ids\": [{ \"$oid\": \"5174ba34d1ccd2000200000c\" }, { \"$oid\": \"50564226bc0c230002000004\" }], \"created_at\": { \"$date\": \"2012-09-16T21:23:49.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div><font>The act of asking for information.</font></div>\", \"term\": \"inquiry\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"T\": \"term\" }, \"50564388bc0c230002000014\": { \"_id\": { \"$oid\": \"50564388bc0c230002000014\" }, \"act_ids\": [{ \"$oid\": \"506120e983f605000200003c\" }, { \"$oid\": \"50564226bc0c230002000004\" }], \"created_at\": { \"$date\": \"2012-09-16T21:24:24.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div><div>A living thing’s act of changing to better suit an environment.</div></div><div>A special trait that helps a living thing survive in its environment.</div>\", \"term\": \"adaptation\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"T\": \"term\" }, \"505643a4bc0c230002000018\": { \"_id\": { \"$oid\": \"505643a4bc0c230002000018\" }, \"act_ids\": [{ \"$oid\": \"50564226bc0c230002000004\" }], \"created_at\": { \"$date\": \"2012-09-16T21:24:52.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div><div>A way of doing something or a series of actions conducted in a particular order or manner.</div></div>\", \"term\": \"procedure\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"T\": \"term\" }, \"505643c4bc0c23000200001c\": { \"_id\": { \"$oid\": \"505643c4bc0c23000200001c\" }, \"act_ids\": [{ \"$oid\": \"50564226bc0c230002000004\" }], \"created_at\": { \"$date\": \"2012-09-16T21:25:25.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div><font>Water from a piped supply, safe for human drinking and use.</font></div>\", \"term\": \"tap water\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:24.000Z\" }, \"T\": \"term\" }, \"50580acf443f30000200001c\": { \"_id\": { \"$oid\": \"50580acf443f30000200001c\" }, \"act_ids\": [{ \"$oid\": \"5057b64c443f300002000008\" }], \"created_at\": { \"$date\": \"2012-09-18T05:46:55.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div><font>A material or substance used in insulating such as soundproof cork insulation or a layer of trapped air that serves as insulation.</font></div>\", \"term\": \"insulation\", \"updated_at\": { \"$date\": \"2012-09-25T02:53:05.000Z\" }, \"T\": \"term\" }, \"50580b19443f300002000020\": { \"_id\": { \"$oid\": \"50580b19443f300002000020\" }, \"act_ids\": [{ \"$oid\": \"5057b64c443f300002000008\" }], \"created_at\": { \"$date\": \"2012-09-18T05:48:09.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<font>The thick layer of fat between the skin and the muscle layers of whales and other marine mammals. Oil can be extracte from blubber.</font>\", \"term\": \"blubber\", \"updated_at\": { \"$date\": \"2012-09-25T02:53:05.000Z\" }, \"T\": \"term\" }, \"50580ba4443f300002000026\": { \"_id\": { \"$oid\": \"50580ba4443f300002000026\" }, \"act_ids\": [{ \"$oid\": \"5057b64c443f300002000008\" }], \"created_at\": { \"$date\": \"2012-09-18T05:50:28.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div><font>A warm-blooded vertebrate from the animal class of Mammalia. Humans are included in this class, and the class is characterized by a covering of hair on the skin and, in the female, milk-producing mammary glands for nourishing the offspring. Some mammals live in the ocean.</font></div>\", \"term\": \"mammal\", \"updated_at\": { \"$date\": \"2012-09-25T02:53:05.000Z\" }, \"T\": \"term\" }, \"50580c54443f30000200002a\": { \"_id\": { \"$oid\": \"50580c54443f30000200002a\" }, \"act_ids\": [{ \"$oid\": \"5057b64c443f300002000008\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"created_at\": { \"$date\": \"2012-09-18T05:53:24.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div><font>A living thing's surroundings; especially the physical things around it that influence its growth, development, and survival.</font></div>\", \"term\": \"environment\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"T\": \"term\" }, \"505b912e8e6e180002000009\": { \"_id\": { \"$oid\": \"505b912e8e6e180002000009\" }, \"act_ids\": [{ \"$oid\": \"509807f2985192000200003c\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }, { \"$oid\": \"4f87648adc4c210001000060\" }], \"created_at\": { \"$date\": \"2012-09-20T21:57:02.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"Facts, often in the form of numbers, collected to help analyze or make sense of something.&nbsp;\", \"term\": \"data\", \"updated_at\": { \"$date\": \"2013-04-11T05:31:05.000Z\" }, \"T\": \"term\" }, \"505fed9a83f6050002000005\": { \"_id\": { \"$oid\": \"505fed9a83f6050002000005\" }, \"act_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }], \"created_at\": { \"$date\": \"2012-09-24T05:20:26.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"To discover or reveal (something) through such examination.\", \"term\": \"analyze\", \"updated_at\": { \"$date\": \"2012-10-18T05:32:00.000Z\" }, \"T\": \"term\" }, \"505fede683f6050002000007\": { \"_id\": { \"$oid\": \"505fede683f6050002000007\" }, \"act_ids\": [{ \"$oid\": \"505fabe323d0730002000008\" }, { \"$oid\": \"50e1269c3df52d0002000004\" }], \"created_at\": { \"$date\": \"2012-09-24T05:21:42.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"A three-dimensional representation of a person or thing or of a proposed structure, typically on a smaller scale than the original, such as a model airplane.\", \"term\": \"model\", \"updated_at\": { \"$date\": \"2013-02-04T20:11:49.000Z\" }, \"T\": \"term\" }, \"5061261b83f6050002000042\": { \"_id\": { \"$oid\": \"5061261b83f6050002000042\" }, \"act_ids\": [{ \"$oid\": \"506120e983f605000200003c\" }], \"created_at\": { \"$date\": \"2012-09-25T03:33:47.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">The process by which different kinds of living organisms are thought to have developed and diversified from earlier forms during the history of the earth.</p>\", \"term\": \"evolution\", \"updated_at\": { \"$date\": \"2013-04-22T04:24:20.000Z\" }, \"T\": \"term\" }, \"506126b083f6050002000044\": { \"_id\": { \"$oid\": \"506126b083f6050002000044\" }, \"act_ids\": [{ \"$oid\": \"506120e983f605000200003c\" }], \"created_at\": { \"$date\": \"2012-09-25T03:36:16.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"Imitation&nbsp;or&nbsp;enactment of something.\", \"term\": \"simulation\", \"updated_at\": { \"$date\": \"2013-04-22T04:24:20.000Z\" }, \"T\": \"term\" }, \"506126fe83f6050002000046\": { \"_id\": { \"$oid\": \"506126fe83f6050002000046\" }, \"act_ids\": [{ \"$oid\": \"506120e983f605000200003c\" }], \"created_at\": { \"$date\": \"2012-09-25T03:37:34.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">An animal that naturally preys on others.</p>\", \"term\": \"predator\", \"updated_at\": { \"$date\": \"2013-04-22T04:24:20.000Z\" }, \"T\": \"term\" }, \"5061271883f6050002000049\": { \"_id\": { \"$oid\": \"5061271883f6050002000049\" }, \"act_ids\": [{ \"$oid\": \"506120e983f605000200003c\" }], \"created_at\": { \"$date\": \"2012-09-25T03:38:00.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">An animal that is hunted and killed by another for food.</p>\", \"term\": \"prey\", \"updated_at\": { \"$date\": \"2013-04-22T04:24:20.000Z\" }, \"T\": \"term\" }, \"506135e983f605000200005b\": { \"_id\": { \"$oid\": \"506135e983f605000200005b\" }, \"act_ids\": [{ \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"created_at\": { \"$date\": \"2012-09-25T04:41:13.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">A family or biological community of organisms that interact with each other and their physical environment.</p>\", \"term\": \"ecosystem\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"T\": \"term\" }, \"5061360a83f605000200005d\": { \"_id\": { \"$oid\": \"5061360a83f605000200005d\" }, \"act_ids\": [{ \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"created_at\": { \"$date\": \"2012-09-25T04:41:46.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">The natural home or environment of an animal, plant, or other organism.</p>\", \"term\": \"habitat\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"T\": \"term\" }, \"5062113b95dae60002000019\": { \"_id\": { \"$oid\": \"5062113b95dae60002000019\" }, \"act_ids\": [{ \"$oid\": \"506294db71e54a0002000005\" }, { \"$oid\": \"4f9f70f64d6c1d0001000006\" }], \"created_at\": { \"$date\": \"2012-09-25T20:16:59.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">A living organism, esp. a soil bacterium, fungus, or invertebrate, that decomposes (breaks down or decays) organic material.</p>\", \"term\": \"decomposer\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:47.000Z\" }, \"T\": \"term\" }, \"5062167495dae6000200001e\": { \"_id\": { \"$oid\": \"5062167495dae6000200001e\" }, \"act_ids\": [{ \"$oid\": \"506120e983f605000200003c\" }], \"created_at\": { \"$date\": \"2012-09-25T20:39:16.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div>Traits passed on from parent&nbsp;to offspring.</div>\", \"term\": \"heritable characteristics\", \"updated_at\": { \"$date\": \"2013-04-22T04:24:20.000Z\" }, \"T\": \"term\" }, \"506227d295dae6000200003a\": { \"_id\": { \"$oid\": \"506227d295dae6000200003a\" }, \"act_ids\": [{ \"$oid\": \"50621a5695dae60002000026\" }], \"created_at\": { \"$date\": \"2012-09-25T21:53:22.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">The remains or impression of a prehistoric organism preserved in petrified form or as a mold or cast in rock.</p>\", \"term\": \"fossil\", \"updated_at\": { \"$date\": \"2012-09-25T21:57:15.000Z\" }, \"T\": \"term\" }, \"506227fd95dae6000200003c\": { \"_id\": { \"$oid\": \"506227fd95dae6000200003c\" }, \"act_ids\": [{ \"$oid\": \"50621a5695dae60002000026\" }], \"created_at\": { \"$date\": \"2012-09-25T21:54:05.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">The branch of science concerned with fossil animals and plants.</p>\", \"term\": \"paleontologist\", \"updated_at\": { \"$date\": \"2012-09-25T21:57:15.000Z\" }, \"T\": \"term\" }, \"5062959c71e54a0002000007\": { \"_id\": { \"$oid\": \"5062959c71e54a0002000007\" }, \"act_ids\": [{ \"$oid\": \"506294db71e54a0002000005\" }], \"created_at\": { \"$date\": \"2012-09-26T05:41:48.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">Any small invertebrate animal, especially one with several pairs of legs.</p>\", \"term\": \"insect\", \"updated_at\": { \"$date\": \"2013-01-20T03:50:02.000Z\" }, \"T\": \"term\" }, \"5062974471e54a000200000d\": { \"_id\": { \"$oid\": \"5062974471e54a000200000d\" }, \"act_ids\": [{ \"$oid\": \"506294db71e54a0002000005\" }], \"created_at\": { \"$date\": \"2012-09-26T05:48:52.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">An invertebrate animal of the large phylum Arthropoda, such as an insect, spider, or crustacean.</p>\", \"term\": \"arthropod\", \"updated_at\": { \"$date\": \"2013-01-20T03:50:02.000Z\" }, \"T\": \"term\" }, \"5062977871e54a000200000f\": { \"_id\": { \"$oid\": \"5062977871e54a000200000f\" }, \"act_ids\": [{ \"$oid\": \"506294db71e54a0002000005\" }, { \"$oid\": \"5088986a99b7220002000019\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }], \"created_at\": { \"$date\": \"2012-09-26T05:49:44.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">A category into which something is put.</p>\", \"term\": \"classification\", \"updated_at\": { \"$date\": \"2013-03-21T17:49:40.000Z\" }, \"T\": \"term\" }, \"5063b0a271e54a000200002d\": { \"_id\": { \"$oid\": \"5063b0a271e54a000200002d\" }, \"act_ids\": [{ \"$oid\": \"506294db71e54a0002000005\" }], \"created_at\": { \"$date\": \"2012-09-27T01:49:22.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">An individual animal, plant, piece of a mineral, etc., used as an example of its species or type for scientific study or display.</p>\", \"term\": \"specimen\", \"updated_at\": { \"$date\": \"2013-01-20T03:50:02.000Z\" }, \"T\": \"term\" }, \"5069cd45246eca0002000006\": { \"_id\": { \"$oid\": \"5069cd45246eca0002000006\" }, \"act_ids\": [{ \"$oid\": \"5069cd18246eca0002000004\" }], \"created_at\": { \"$date\": \"2012-10-01T17:05:09.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div>The branch of science concerned with the properties of the earth's water, esp. its movement in relation to land.</div>\", \"term\": \"hydrology\", \"updated_at\": { \"$date\": \"2012-11-11T02:55:05.000Z\" }, \"T\": \"term\" }, \"5069cd72246eca0002000008\": { \"_id\": { \"$oid\": \"5069cd72246eca0002000008\" }, \"act_ids\": [{ \"$oid\": \"5069cd18246eca0002000004\" }], \"created_at\": { \"$date\": \"2012-10-01T17:05:54.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"Land consisting of marshes or swamps; saturated land.\", \"term\": \"wetland\", \"updated_at\": { \"$date\": \"2012-11-11T02:55:05.000Z\" }, \"T\": \"term\" }, \"5088998199b7220002000024\": { \"_id\": { \"$oid\": \"5088998199b7220002000024\" }, \"act_ids\": [{ \"$oid\": \"5088986a99b7220002000019\" }], \"created_at\": { \"$date\": \"2012-10-25T01:44:33.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div><font>One of the faculties of sight, smell, hearing, taste, and touch.</font></div>\", \"term\": \"sense\", \"updated_at\": { \"$date\": \"2013-01-26T01:18:31.000Z\" }, \"T\": \"term\" }, \"508899f399b7220002000027\": { \"_id\": { \"$oid\": \"508899f399b7220002000027\" }, \"act_ids\": [{ \"$oid\": \"5088986a99b7220002000019\" }], \"created_at\": { \"$date\": \"2012-10-25T01:46:27.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"Establish or find out what or who something or someone is.\", \"term\": \"identify\", \"updated_at\": { \"$date\": \"2013-01-26T01:18:31.000Z\" }, \"T\": \"term\" }, \"50974743985192000200000c\": { \"_id\": { \"$oid\": \"50974743985192000200000c\" }, \"act_ids\": [{ \"$oid\": \"509746a1985192000200000a\" }], \"created_at\": { \"$date\": \"2012-11-05T04:57:39.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The condition that distinguishes animals and plants from inorganic matter, including the capacity for growth, reproduction, functional activity, and continual change preceding death: the origins of life.\", \"term\": \"life\", \"updated_at\": { \"$date\": \"2013-01-24T22:27:24.000Z\" }, \"T\": \"term\" }, \"509809eb985192000200003f\": { \"_id\": { \"$oid\": \"509809eb985192000200003f\" }, \"act_ids\": [{ \"$oid\": \"509807f2985192000200003c\" }], \"created_at\": { \"$date\": \"2012-11-05T18:48:11.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div>To begin to grow and put out shoots after a period of dormancy.</div>\", \"term\": \"germinate\", \"updated_at\": { \"$date\": \"2012-11-05T18:51:36.000Z\" }, \"T\": \"term\" }, \"50980a409851920002000041\": { \"_id\": { \"$oid\": \"50980a409851920002000041\" }, \"act_ids\": [{ \"$oid\": \"509807f2985192000200003c\" }], \"created_at\": { \"$date\": \"2012-11-05T18:49:36.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div>Growth towards or away from light. &nbsp;Most plant stems grow toward light, while roots&nbsp;grow away from it. A hormone called auxin causes cells on the dark side of the plant stem to get&nbsp;</div><div>longer. When this happens, the plant bends toward the light. Different plants exhibit different degrees&nbsp;</div><div>of bending.</div>\", \"term\": \"phototropism\", \"updated_at\": { \"$date\": \"2012-11-05T18:51:03.000Z\" }, \"T\": \"term\" }, \"50980a599851920002000043\": { \"_id\": { \"$oid\": \"50980a599851920002000043\" }, \"act_ids\": [{ \"$oid\": \"509807f2985192000200003c\" }], \"created_at\": { \"$date\": \"2012-11-05T18:50:01.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div>Growth in response to gravity. Roots generally grow toward&nbsp;the force of gravity while stems grow away from it.</div>\", \"term\": \"geotropism\", \"updated_at\": { \"$date\": \"2012-11-05T18:51:03.000Z\" }, \"T\": \"term\" }, \"509864ec985192000200007d\": { \"_id\": { \"$oid\": \"509864ec985192000200007d\" }, \"act_ids\": [{ \"$oid\": \"50985eb8985192000200006a\" }], \"created_at\": { \"$date\": \"2012-11-06T01:16:28.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<font>Each of the aspects of the moon or a planet, according to the amount of its illumination, esp. the new moon, the first quarter, the full moon, and the last quarter.</font>\", \"term\": \"phase\", \"updated_at\": { \"$date\": \"2012-12-29T18:36:34.000Z\" }, \"T\": \"term\" }, \"5098651f985192000200007f\": { \"_id\": { \"$oid\": \"5098651f985192000200007f\" }, \"act_ids\": [{ \"$oid\": \"50985eb8985192000200006a\" }], \"created_at\": { \"$date\": \"2012-11-06T01:17:19.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<font>The cycle of varying illumination is divided into 4 exact points (new moon, first quarter, full moon, and third quarter) and the 4 intervals between the exact points (waxing crescent, waxing gibbous, waning gibbous and waning crescent), collectively called “the Phases of the Moon”.</font>\", \"term\": \"Phases of the Moon\", \"updated_at\": { \"$date\": \"2012-12-29T18:36:34.000Z\" }, \"T\": \"term\" }, \"50a008942ace73000200000a\": { \"_id\": { \"$oid\": \"50a008942ace73000200000a\" }, \"act_ids\": [{ \"$oid\": \"50a0085c2ace730002000006\" }], \"created_at\": { \"$date\": \"2012-11-11T20:20:36.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"Not made by humans.\", \"term\": \"natural\", \"updated_at\": { \"$date\": \"2012-11-15T05:39:26.000Z\" }, \"T\": \"term\" }, \"50a008ac2ace73000200000c\": { \"_id\": { \"$oid\": \"50a008ac2ace73000200000c\" }, \"act_ids\": [{ \"$oid\": \"50a0085c2ace730002000006\" }], \"created_at\": { \"$date\": \"2012-11-11T20:21:00.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"Of or relating to seeing or sight.\", \"term\": \"visual\", \"updated_at\": { \"$date\": \"2012-11-15T05:39:26.000Z\" }, \"T\": \"term\" }, \"50b17a8ae1081a000200000a\": { \"_id\": { \"$oid\": \"50b17a8ae1081a000200000a\" }, \"act_ids\": [{ \"$oid\": \"50b1734ce1081a0002000006\" }], \"created_at\": { \"$date\": \"2012-11-25T01:55:22.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"To arrange things into groups according to type (attribute).\", \"term\": \"sort\", \"updated_at\": { \"$date\": \"2012-12-11T04:32:41.000Z\" }, \"T\": \"term\" }, \"50c6baf7e8e3e1000200001b\": { \"_id\": { \"$oid\": \"50c6baf7e8e3e1000200001b\" }, \"act_ids\": [{ \"$oid\": \"50c6b34fe8e3e10002000002\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"created_at\": { \"$date\": \"2012-12-11T04:47:51.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">A living organism of the kind exemplified by trees, shrubs, herbs, grasses, ferns, and mosses.</p>\", \"term\": \"plant\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"T\": \"term\" }, \"50c6bb1de8e3e1000200001d\": { \"_id\": { \"$oid\": \"50c6bb1de8e3e1000200001d\" }, \"act_ids\": [{ \"$oid\": \"50c6b34fe8e3e10002000002\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"created_at\": { \"$date\": \"2012-12-11T04:48:29.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The seed-bearing part of a plant, consisting of reproductive organs (stamens and carpels) that are typically surrounded by a brightly colored corolla (petals) and a green calyx (sepals).\", \"term\": \"flower\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"T\": \"term\" }, \"50c6bb87e8e3e10002000020\": { \"_id\": { \"$oid\": \"50c6bb87e8e3e10002000020\" }, \"act_ids\": [{ \"$oid\": \"50c6b34fe8e3e10002000002\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"created_at\": { \"$date\": \"2012-12-11T04:50:15.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The&nbsp;flattened part of plant, typically green and blade-like, that is attached to a stem directly or via a stalk. Leaves are the main organs of photosynthesis and transpiration.\", \"term\": \"leaf\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"T\": \"term\" }, \"50c6bba1e8e3e10002000022\": { \"_id\": { \"$oid\": \"50c6bba1e8e3e10002000022\" }, \"act_ids\": [{ \"$oid\": \"50c6b34fe8e3e10002000002\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"created_at\": { \"$date\": \"2012-12-11T04:50:41.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The main body or stalk of a plant or shrub, typically rising above ground but occasionally subterranean.\", \"term\": \"stem\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"T\": \"term\" }, \"50c6bbdbe8e3e10002000025\": { \"_id\": { \"$oid\": \"50c6bbdbe8e3e10002000025\" }, \"act_ids\": [{ \"$oid\": \"50c6b34fe8e3e10002000002\" }, { \"$oid\": \"50ddff045f296e0002000004\" }], \"created_at\": { \"$date\": \"2012-12-11T04:51:39.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"The sweet and fleshy product of a tree or other plant that contains seed and can be eaten as food.\", \"term\": \"fruit\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"T\": \"term\" }, \"5101adef8c3e5f000200000e\": { \"_id\": { \"$oid\": \"5101adef8c3e5f000200000e\" }, \"act_ids\": [{ \"$oid\": \"50e1269c3df52d0002000004\" }], \"created_at\": { \"$date\": \"2013-01-24T21:55:59.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">The collection of eight planets and their moons in orbit around the sun, together with smaller bodies in the form of asteroids, meteoroids, and comets.</p>\", \"term\": \"solar system\", \"updated_at\": { \"$date\": \"2013-02-04T20:11:49.000Z\" }, \"T\": \"term\" }, \"5101ae2a8c3e5f0002000011\": { \"_id\": { \"$oid\": \"5101ae2a8c3e5f0002000011\" }, \"act_ids\": [{ \"$oid\": \"50e1269c3df52d0002000004\" }], \"created_at\": { \"$date\": \"2013-01-24T21:56:58.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"A large, round object that orbits the Sun and has cleared the neighborhood around its orbit.\", \"term\": \"planet\", \"updated_at\": { \"$date\": \"2013-02-04T20:11:49.000Z\" }, \"T\": \"term\" }, \"5101ae748c3e5f0002000014\": { \"_id\": { \"$oid\": \"5101ae748c3e5f0002000014\" }, \"act_ids\": [{ \"$oid\": \"4f7a92c8965e190001000009\" }], \"created_at\": { \"$date\": \"2013-01-24T21:58:12.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"A huge ball of very hot gas that gives off energy.\", \"term\": \"star\", \"updated_at\": { \"$date\": \"2013-03-17T01:48:19.000Z\" }, \"T\": \"term\" }, \"5101aebf8c3e5f0002000016\": { \"_id\": { \"$oid\": \"5101aebf8c3e5f0002000016\" }, \"act_ids\": [{ \"$oid\": \"4f7a92c8965e190001000009\" }], \"created_at\": { \"$date\": \"2013-01-24T21:59:27.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">Each of the four divisions of the year (spring, summer, autumn, and winter) marked by particular weather patterns and daylight hours, resulting from the earth's changing position with regard to the sun.</p>\", \"term\": \"season\", \"updated_at\": { \"$date\": \"2013-03-17T01:48:19.000Z\" }, \"T\": \"term\" }, \"5103329767071c0002000002\": { \"_id\": { \"$oid\": \"5103329767071c0002000002\" }, \"act_ids\": [{ \"$oid\": \"51032d9d4965160002000006\" }, { \"$oid\": \"51451bfac2cb3b0002000009\" }], \"created_at\": { \"$date\": \"2013-01-26T01:34:15.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<font>To write or draw something in a&nbsp;permanent&nbsp;form for future reference.</font>\", \"term\": \"record\", \"updated_at\": { \"$date\": \"2013-03-21T17:49:40.000Z\" }, \"T\": \"term\" }, \"51451e6dc2cb3b0002000013\": { \"_id\": { \"$oid\": \"51451e6dc2cb3b0002000013\" }, \"act_ids\": [{ \"$oid\": \"51451bfac2cb3b0002000009\" }], \"created_at\": { \"$date\": \"2013-03-17T01:37:49.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<font>Rocks formed in the heat of a volcano.</font>\", \"term\": \"igneous\", \"updated_at\": { \"$date\": \"2013-03-21T17:49:40.000Z\" }, \"T\": \"term\" }, \"51451eacc2cb3b0002000015\": { \"_id\": { \"$oid\": \"51451eacc2cb3b0002000015\" }, \"act_ids\": [{ \"$oid\": \"51451bfac2cb3b0002000009\" }], \"created_at\": { \"$date\": \"2013-03-17T01:38:52.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div><font>Rocks are formed when layers of soil and organic matter are pressed together for a long period of time.</font></div>\", \"term\": \"sedimentary rocks\", \"updated_at\": { \"$date\": \"2013-03-21T17:49:40.000Z\" }, \"T\": \"term\" }, \"51451ed6c2cb3b0002000017\": { \"_id\": { \"$oid\": \"51451ed6c2cb3b0002000017\" }, \"act_ids\": [{ \"$oid\": \"51451bfac2cb3b0002000009\" }], \"created_at\": { \"$date\": \"2013-03-17T01:39:34.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"<div><font>Rocks formed when other types of rocks are exposed to high levels of heat, pressure or chemical changes below the surface of the earth.&nbsp;</font></div>\", \"term\": \"metamorphic rocks\", \"updated_at\": { \"$date\": \"2013-03-21T17:49:40.000Z\" }, \"T\": \"term\" }, \"514520a9c2cb3b000200001b\": { \"_id\": { \"$oid\": \"514520a9c2cb3b000200001b\" }, \"act_ids\": [{ \"$oid\": \"513a45c112c8310002000003\" }], \"created_at\": { \"$date\": \"2013-03-17T01:47:21.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"In physics, the quantity of motion of a moving body, measured as a product of its mass and velocity.<div><div>Also the force or energy gained by a moving object:</div></div>\", \"term\": \"momentum\", \"updated_at\": { \"$date\": \"2013-05-01T01:15:40.000Z\" }, \"T\": \"term\" }, \"514521fbc2cb3b000200001e\": { \"_id\": { \"$oid\": \"514521fbc2cb3b000200001e\" }, \"act_ids\": [{ \"$oid\": \"51451bfac2cb3b0002000009\" }], \"created_at\": { \"$date\": \"2013-03-17T01:52:59.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"In geology any natural material, hard or soft (e.g., clay), having a distinctive mineral composition.<div><br></div><div>The solid mineral material forming part of the surface of the earth and other similar planets, exposed on the surface or underlying the soil or oceans.</div>\", \"term\": \"rock\", \"updated_at\": { \"$date\": \"2013-03-21T17:49:40.000Z\" }, \"T\": \"term\" }, \"514539a0d960ad0002000029\": { \"_id\": { \"$oid\": \"514539a0d960ad0002000029\" }, \"act_ids\": [{ \"$oid\": \"51453278d960ad000200000a\" }], \"created_at\": { \"$date\": \"2013-03-17T03:33:52.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"A dark area on a surface or picture created by a blockage of light from the sun or other light source.\", \"term\": \"shadow\", \"updated_at\": { \"$date\": \"2013-03-19T23:52:33.000Z\" }, \"T\": \"term\" }, \"5174ba5ed1ccd2000200000e\": { \"_id\": { \"$oid\": \"5174ba5ed1ccd2000200000e\" }, \"act_ids\": [{ \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"created_at\": { \"$date\": \"2013-04-22T04:19:42.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">The extent to which an event is likely to occur.</p>\", \"term\": \"probability\", \"updated_at\": { \"$date\": \"2013-04-22T05:19:29.000Z\" }, \"T\": \"term\" }, \"5174ba90d1ccd20002000010\": { \"_id\": { \"$oid\": \"5174ba90d1ccd20002000010\" }, \"act_ids\": [{ \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"created_at\": { \"$date\": \"2013-04-22T04:20:32.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">The faculty by which the mind stores and remembers information.</p>\", \"term\": \"memory\", \"updated_at\": { \"$date\": \"2013-04-22T05:19:29.000Z\" }, \"T\": \"term\" }, \"5174c7d5d1ccd2000200002e\": { \"_id\": { \"$oid\": \"5174c7d5d1ccd2000200002e\" }, \"act_ids\": [{ \"$oid\": \"5174ba34d1ccd2000200000c\" }], \"created_at\": { \"$date\": \"2013-04-22T05:17:09.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\"><font>&nbsp;Formal or systematic examination or research.</font></p>\", \"term\": \"investigation\", \"updated_at\": { \"$date\": \"2013-04-22T05:19:29.000Z\" }, \"T\": \"term\" }, \"54404b999394a00002000015\": { \"_id\": { \"$oid\": \"54404b999394a00002000015\" }, \"act_ids\": [{ \"$oid\": \"54400b299394a00002000005\" }], \"created_at\": { \"$date\": \"2014-10-16T22:50:01.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">An instrument for measuring and indicating temperature, typically one consisting of a narrow, hermetically sealed glass tube marked with graduations and having at one end a bulb containing mercury or alcohol that expands and contracts in the tube with heating and cooling.</p>\", \"term\": \"thermometer\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"T\": \"term\" }, \"54404bd19394a00002000017\": { \"_id\": { \"$oid\": \"54404bd19394a00002000017\" }, \"act_ids\": [{ \"$oid\": \"54400b299394a00002000005\" }], \"created_at\": { \"$date\": \"2014-10-16T22:50:57.000Z\" }, \"creator\": \"4f2db509af0c2e000100000b\", \"def\": \"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<p class=\\\"p1\\\">To become or cause to become incorporated into a liquid so as to form a solution.</p>\", \"term\": \"dissolve\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"T\": \"term\" }, \"4f2db509af0c2e000100000b\": { \"_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"created_at\": { \"$date\": \"2012-02-04T22:45:29.000Z\" }, \"email\": \"kris.keller@handsforscience.org\", \"last_sign_in\": { \"$date\": \"2014-12-21T01:50:29.000Z\" }, \"num_sign_ins\": 22, \"password_hash\": \"$2a$10$fTsZJW/qmW/ASne2.VS0FuABIXPC7v3BoTd1k9ws5fCR.STLi8ao6\", \"token\": \"IZM1dft1yrlILhc9d024\", \"updated_at\": { \"$date\": \"2014-12-21T01:50:29.000Z\" }, \"super_user\": true, \"T\": \"user\" }, \"4f45904eeeaf0a0001000008\": { \"_id\": { \"$oid\": \"4f45904eeeaf0a0001000008\" }, \"created_at\": { \"$date\": \"2012-02-23T01:03:10.000Z\" }, \"email\": \"skeller88@gmail.com\", \"last_sign_in\": { \"$date\": \"2012-04-03T17:25:14.000Z\" }, \"name\": \"Shane Keller\", \"num_sign_ins\": 7, \"password_hash\": \"$2a$10$9Nv5SBP21hDQX2PqFENndevA4n5joVXU6RFEZjOxXCWgWxvFYlsmi\", \"token\": \"njdEtO30tthrOdz_QS5o\", \"updated_at\": { \"$date\": \"2012-04-03T17:25:14.000Z\" }, \"T\": \"user\" }, \"4f8b1b99f40044000100001c\": { \"_id\": { \"$oid\": \"4f8b1b99f40044000100001c\" }, \"created_at\": { \"$date\": \"2012-04-15T19:03:53.000Z\" }, \"email\": \"e_w_enterprise@yahoo.com\", \"last_sign_in\": { \"$date\": \"2012-04-15T19:03:53.000Z\" }, \"num_sign_ins\": 1, \"password_hash\": \"$2a$10$nrjpqY6A/SHM.WskngeR3.tkPm0i9G6j9EMJR03wactZQ7WCItbUa\", \"token\": \"IRI0jUr81nHBHeqfkNZH\", \"updated_at\": { \"$date\": \"2012-04-15T19:03:53.000Z\" }, \"T\": \"user\" }, \"4f9b178c4da7c30001000017\": { \"_id\": { \"$oid\": \"4f9b178c4da7c30001000017\" }, \"created_at\": { \"$date\": \"2012-04-27T22:02:52.000Z\" }, \"email\": \"zigotone@gmail.com\", \"last_sign_in\": { \"$date\": \"2012-05-06T12:28:00.000Z\" }, \"num_sign_ins\": 2, \"password_hash\": \"$2a$10$ujk4Q3GF7xTZyjhvPNzw7OdaBY/vvZVjN79FUhKiTEC6DdvmIqWP6\", \"token\": \"-kztehKF-vGPEETjtMdZ\", \"updated_at\": { \"$date\": \"2012-05-06T12:28:00.000Z\" }, \"T\": \"user\" }, \"4fc401a25c38c5000300000a\": { \"_id\": { \"$oid\": \"4fc401a25c38c5000300000a\" }, \"created_at\": { \"$date\": \"2012-05-28T22:52:18.000Z\" }, \"email\": \"klrfin@gmail.com\", \"last_sign_in\": { \"$date\": \"2013-03-17T02:45:55.000Z\" }, \"num_sign_ins\": 9, \"password_hash\": \"$2a$10$dRXh7MO83hXS7wkKXRj5EeQjyCSoGUMQdmdPDPjf/SOpkP5H2.Yw.\", \"super_user\": false, \"token\": \"TYNAIQcT4hKOIKaKcNtQ\", \"updated_at\": { \"$date\": \"2013-03-17T02:45:55.000Z\" }, \"T\": \"user\" }, \"500f07cb5103340002000011\": { \"_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"created_at\": { \"$date\": \"2012-07-24T20:38:35.000Z\" }, \"email\": \"gopv1990@gmail.com\", \"last_sign_in\": { \"$date\": \"2012-09-05T18:27:35.000Z\" }, \"num_sign_ins\": 7, \"password_hash\": \"$2a$10$RIlvCf92CB3VByAgscFTv.fOLGDCZs/mgQWY.pFrHjpiRj4qRQl8a\", \"token\": \"h76-WWTkX_u7r5Vr8Y4I\", \"updated_at\": { \"$date\": \"2012-09-05T18:27:35.000Z\" }, \"T\": \"user\" }, \"5050d4bb0fbcfa0002000009\": { \"_id\": { \"$oid\": \"5050d4bb0fbcfa0002000009\" }, \"created_at\": { \"$date\": \"2012-09-12T18:30:19.000Z\" }, \"email\": \"hopegalone@yahoo.com\", \"last_sign_in\": { \"$date\": \"2012-09-12T18:30:19.000Z\" }, \"num_sign_ins\": 1, \"password_hash\": \"$2a$10$11HNUWHfau3FpFSCmGhkPuKi18HYrQk6RnXWXW.l1V13TkzxzOAeO\", \"token\": \"GqcaTMbNpAd1gzsDTTex\", \"updated_at\": { \"$date\": \"2012-09-12T18:30:19.000Z\" }, \"T\": \"user\" }, \"4f2db7c5af0c2e0001000011\": { \"_id\": { \"$oid\": \"4f2db7c5af0c2e0001000011\" }, \"assessment\": \"<p>Which physical properties helped you separate the mixture?</p><p>What kinds of changes took place?</p><p>Sugar and salt dissolve in water. Infer the following based on your data: if you used sugar in place of salt, what would or would not change?</p>\", \"assistant_setup\": \"<p>Use electric teapot to heat water. Put salt and sand into 4 cups to ease delivery of those materials. Cut foil into 4 inch squares (no need to be exact). Per teacher's instruction, place supplies into group bins.</p>\", \"background\": \"<p>A mixture is a combination of at least two or more different substances that do not lose their identifying characteristics when combined -- for example, mud and water, or milk and cereal. Many mixtures can be easily separated. When two substances mixed together cannot be easily separated because one substance dissolves in the others, the mixture is a solution. It is possible to separate the two substances, but not very easily. An example of a solution is sugar dissolved in tea: the sugar is still there, but it is dissolved, and in order separate it out, you would need to evaporate the liquid.</p><p>Reprinted from <a href=\\\"http://www.doe.virginia.gov/testing/sol/scope_sequence/science_scope_sequence/scopeseq_science_lifescience.pdf\\\">Virginia Department of Education</a>.<p>Why does salt dissolve in water?</p><p>Answer: <a href=\\\"http://www.newton.dep.anl.gov/askasci/chem99/chem99604.htm\\\">Ask Newton</a>.</p>\", \"created_at\": { \"$date\": \"2012-02-04T22:57:09.000Z\" }, \"duration\": 30, \"grades\": [5], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"<p>Reprinted from <a href=\\\"http://www.doe.virginia.gov/testing/sol/scope_sequence/science_scope_sequence/scopeseq_science_lifescience.pdf\\\">Virginia Department of Education</span></a>. Foresman, p. 32; Macmillan, p.377.</p>\", \"objective\": \"<p>Plan and conduct an investigation to determine how to separate a mixture of sand and water.</p><p>Recognize methods of separating mixtures using physical properties (dissolving ability and size of objects) of substances.</span></p>\", \"procedure\": \"<ol><li>Label the 4 cups: W, X, Y, and Z.</li><li>In cup W, mix 2 spoonfuls of sand with 100 mL of water, stir. Observe the mixture.</li><li>In your journal, write one or two ways that you might separate the two substances.</li><li>Add 1 spoonful of salt and the 3 marbles to cup W, stir.</li><li>Using a sharp pencil, carefully make 4 holes in the bottom of cup X.</li><li>Hold cup X over cup Y, so that it's nestled inside, then pour the contents of cup W into cup X, so that the mixture passes through to cup Y. Cup X acts as a filter.</li><li>Without putting your fingers inside the cup, move cup X around to see if you can force the marbles, sand, water and/or salt through the holes.</li><li>Record your observations. What part remained in cup X? What passed through to cup Y? Did anything else pass thorough the holes after you moved the cup around?</li><li>Use the rubber band to secure a coffee filter around the top of cup Z, not too tightly so that there the middle sags. Slowly pour the remaining mixture in cup Y into cup Z.</li><li>Record your observations. What part remained on top of the coffee filter? What passed through to cup Z?</li><li>Take off the filter. Using your spoon, drop a few drops of the mixture in cup Z onto your piece of foil. Leave for at least a couple hours (overnight is okay) to allow for evaporation.</li><li> Record your observations. What part remained on the foil? What material disappeared or evaporated?</span></li></ol>\", \"reflection\": \"<ul><li>Depending on class level and ability to work effectively in groups, teacher may want to guide the group through each step, especially the parts where the material or substance is poured from one cup to another.</li><li>Demonstrate how to poke holes in the bottom of the cup so that the cup doesn'ÃÂt rip.</li><li>When students place coffee filter over the cup, make sure to create a bowl in the filter by pressing into the middle of the material, otherwise the warm will spill over the sides.</li><li>Have students write group name on foil before they place liquid on to of it. Have them do this part at the counter or place in the room where you'Âll keep the foil pieces overnight, as moving them once the drops of water are on top of it is difficult.</li></ul>\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000089\" }, { \"$oid\": \"4f28bdf6023c6400010000a8\" }, { \"$oid\": \"4f28bdf6023c6400010000ac\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<p>Use a KWL chart to explore prior knowledge of mixtures. What are some examples of mixtures? How would you separate a mixture of more than one liquid?</p><p>Have students create a graphic organizer, such as a chart, to record their data. For each transfer of materials (by straining, filtering or evaporation), include the part held back and the material that passed through.</p>\", \"term_ids\": [{ \"$oid\": \"4f2f5a8fa056bc0001000004\" }, { \"$oid\": \"4f2f5ac3a056bc0001000008\" }, { \"$oid\": \"4f2f5afca056bc000100000c\" }, { \"$oid\": \"4f2f5b13a056bc0001000010\" }, { \"$oid\": \"4f2f5b6ba056bc0001000018\" }, { \"$oid\": \"4f2f5b86a056bc000100001c\" }, { \"$oid\": \"4f2f5bcba056bc0001000024\" }, { \"$oid\": \"4f2f5d7fa056bc000100002e\" }], \"title\": \"How to separate a mixture\", \"updated_at\": { \"$date\": \"2012-02-14T02:58:31.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"4f2f5d2ea056bc000100002a\": { \"_id\": { \"$oid\": \"4f2f5d2ea056bc000100002a\" }, \"assessment\": \"<p>How did the stalk change?</p><p>Infer how water moves in a plant.</p><p>Describe differences between your observations and results and those of your classmates.</p>\", \"assistant_setup\": \"<p>The night before the activity, place two celery stalks into red or blue colored water. In the morning, wrap the stalks in plastic or place in a jar of water and bring to class. Prepare thin slices of colored celery for observation under a microscope or hand lens.</p><p>Wash fresh celery and separate into stalks. Cut the bottoms of the stalks no more than one hour before the activity. Based on teacher's direction, place supplies into group bins. Set up microscopes if available.</p>\", \"background\": \"<p>One of the reasons that even wet summers can still end in drought is the efficiency of plants at moving water from the ground to their upper reaches where it evaporates from the surface of the foliage. The process is called transpiration and it's essential for moving water to all parts of plants, even to the tops of the tallest trees. The experiment with a stick of celery reveals that this happens through special tubes, called xylems, which take up the food coloring.</p><p>The process is accelerated by evaporation from the celery leaves and you can make it go even faster by using a hairdryer on the leaves. Compare the rate at which the color is taken up between three celery sticks: one with no leaves, one with leaves, and one with leaves applying a hairdryer. Using the hairdryer simulates a warm, windy summer's day when water in the ground from a recent downpour can soon find itself being transpired back into the atmosphere.</p><p>You can imagine with the tallest trees that each water-carrying xylem contains a continuous, thin column of water over a hundred feet in length and reaching from the roots to the uppermost leaves. The effect of evaporation at the top of the tree literally pulls this column of water up the tree. The ability of these thin columns of water to be pulled in this way without breaking is attributed to the special forces between the water molecules in the liquid; this is called capillary action.</p><p>Reprinted from <a href=\\\"http://www.york.ac.uk/res/sots/activities/celery.htm\\\">Science on the Shelves.</a></p>\", \"created_at\": { \"$date\": \"2012-02-06T04:55:10.000Z\" }, \"duration\": 20, \"grades\": [5], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"<p>Foresman, p. 92; Macmillan, p.81, <a href=\\\"http://www.sciencefairadventure.com/ProjectDetail.aspx?ProjectID=162\\\">Colorful Celery</a>, <a href=\\\"http://www.york.ac.uk/res/sots/activities/celery.htm\\\">Science on the Shelves,</a></p>\", \"objective\": \"<p>Identify structures that support transport of materials in a plant.</p>\", \"procedure\": \"<ol><li>Make a prediction. What will happen to the celery when you leave it in colored water?</li><li>Observe the celery. Draw a picture of the stalk.</li><li>Send the gopher in your group to fill your plastic container one third full of water. Following your teacher's direction, add three drops of food coloring to the water.</li><li>Place the celery in your container of water. Record the day and time.</li><li>According to your teacher's directions, place your name on the container.</li><li>Observe the thin slice of colored celery. Draw a picture of the piece.</li><li>On the following day, observe any changes to your celery stalk. Record your observations.</li></ol>\", \"reflection\": \"Important to slice the colored celery very thin if viewing under a microscope, otherwise, the slices don't fit.\", \"standard_ids\": [], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<p>Ask students about the importance of water to the plants. Why do plants need water to survive? What plant structures transport water? Name the parts of a plant. Why do all parts of the plant need water?</p>\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"4f2f5d9da056bc0001000032\" }, { \"$oid\": \"4f2f5dc1a056bc0001000036\" }, { \"$oid\": \"4f2f5ddba056bc000100003a\" }], \"title\": \"How water travels through celery\", \"updated_at\": { \"$date\": \"2012-04-02T22:57:44.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"4f459103eeaf0a000100000f\": { \"_id\": { \"$oid\": \"4f459103eeaf0a000100000f\" }, \"assessment\": \"<p>What kinds of\\r\\nchanges took place? \\r\\n</p>\\r\\n<p>Were the changes\\r\\nexactly the same in the cup with cold water and the cup with warm\\r\\nwater? If not, what was different? &nbsp;&nbsp;</p>\", \"assistant_setup\": \"<p>Find a sink in the classroom or right outside the classroom that the children will use to fill up their cold water cups. Separate antacid tablets into sets of 4 tablets.&nbsp;Per teacher's instructions, place the 4 tablets, 2 plastic cups, and 1 thermometer into each group bin.&nbsp;</p><p>When the teacher starts discussing the background of the experiment, you have about 10 minutes until the children need the water. At that point, use electric\\r\\nteapot to heat water. When the water is boiling, the teapot will whistle. Remove the teapot to let the water cool. <b>Once the teapot is cool enough to touch all over, pour the water into 2 jugs. </b>Test the water with your finger. The best temperature will be warm, but not so hot that it's painful to stick your finger in the water.&nbsp;</p><p>If the children are ready to start the experiment, but the water is not cool enough, add cold water from the faucet to each jug and stir with a spoon. Repeat the process until the water is warm to the touch.&nbsp;</p>\", \"background\": \"<p>During\\r\\na chemical reaction, the physical properties of a substance change.\\r\\nOne such property is temperature. Temperature measures the average motion, or kinetic energy, of molecules in a solution. As molecules\\r\\nmove faster, more energy is released, and the temperature increases. When molecules move slower, less energy is released, and the temperature decreases. In addition, the average motion of molecules are influenced by chemical reactions. Unlike molecules collide with each other in different ways than like molecules do, causing a\\r\\nchange in temperature. Therefore, temperature and chemical reactions both affect each other.&nbsp;</p>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-02-23T01:06:12.000Z\" }, \"duration\": 30, \"grades\": [5], \"links\": [{ \"_id\": { \"$oid\": \"4f60094fda72410001000005\" }, \"note\": \"\", \"title\": \"Plop, Plop, Fizz Fast\", \"url\": \"http://www.sciencebuddies.org/science-fair-projects/project_ideas/Chem_p027.shtml\" }], \"materials_note\": \"\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f459141eeaf0a0001000017\" }, { \"$oid\": \"4f459155eeaf0a000100001b\" }, { \"$oid\": \"4f459166eeaf0a000100001f\" }, { \"$oid\": \"4f45917deeaf0a0001000023\" }, { \"$oid\": \"4f459184eeaf0a0001000027\" }, { \"$oid\": \"4f600c49da7241000100000c\" }, { \"$oid\": \"4f600f13da72410001000016\" }], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"California Science, Scott Foresman. 5th grade. page 6.&nbsp;\", \"objective\": \"<p></p><p>Observe how the\\r\\ntemperature of water changes during a chemical reaction with antacid\\r\\ntablets.</p>\\r\\n<p>Understand how\\r\\nwater temperature affects the speed of a reaction. &nbsp;</p><p></p>\", \"procedure\": \"<ol><li>Label the 2\\r\\n\\tcups: “cold water” and “warm water.”</li><li><p>Add\\r\\n\\t100 mL of cold water and a thermometer to the cup marked “cold\\r\\n\\twater.” Add 100 mL of warm water and a thermometer to the cup\\r\\n\\tmarked “warm water.” \\r\\n\\t</p>\\r\\n\\t</li><li><p>After\\r\\n\\t1 minute, record the temperatures of the water in each cup. \\r\\n\\t</p>\\r\\n\\t</li><li><p>Put\\r\\n\\t2 fizzy antacid tablets in each cup, and OBSERVE any changes.&nbsp;\\r\\n\\t</p>\\r\\n</li></ol>\", \"reflection\": \"Depending\\r\\n\\ton class level and ability to work effectively in groups, teacher\\r\\n\\tmay want to guide the group through each step.\", \"standard_ids\": [], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<p>Use a KWL chart to\\r\\nexplore prior knowledge of physical properties. What are some\\r\\nexamples of physical properties? How can you measure certain physical\\r\\nproperties? Have the students create a graphic organizer, such as a\\r\\nline graph, to record their data on the temperature changes. &nbsp;</p>\", \"term_ids\": [{ \"$oid\": \"4f2f5ac3a056bc0001000008\" }, { \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"4f5d041c4a6ca80001000004\" }, { \"$oid\": \"4f5d04f44a6ca8000100000a\" }], \"title\": \"Changing Properties During A Chemical Reaction\", \"updated_at\": { \"$date\": \"2012-03-14T03:23:49.000Z\" }, \"user_id\": { \"$oid\": \"4f45904eeeaf0a0001000008\" }, \"T\": \"act\" }, \"4f53d9a7feb00c000100000e\": { \"_id\": { \"$oid\": \"4f53d9a7feb00c000100000e\" }, \"assessment\": \"Discuss how the students made their inferences based on observations.<div><div>Discuss the scientific process and how scientists collect information and draw&nbsp;conclusions.</div><div>Were they able to guess their mystery object?</div><div>What helped most when they made their guesses?</div><div>What led them astray?</div></div><div><br></div>\", \"assistant_setup\": \"<div><ol><li>Read the activity.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Before class label the bags with a number, 1-10 or up to however many bags you need. You will&nbsp;fill and staple shut paper bags with random items that differ in feel.&nbsp;There will be at least one item that smells. If there is an item that will leak, such as a lemon or head of garlic, place that item in a plastic bag first, then place in paper bag.</li><li>Some example items might be included in your bin are: eating utensils (e.g. fork, spoon), ruler, garden gloves, penny or quarter, pen, food items (e.g. onion or lemon inside a plastic bag, potato chips, cashews), or a rock. Your materials bin will differ in objects.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ol></div><div><br></div>\", \"attachments\": [{ \"_id\": { \"$oid\": \"4f53ea9dfeb00c000100005e\" }, \"caption\": \"Mystery Bag Observation Chart\", \"w\": 612, \"h\": 792, \"attachment\": \"bd10cb3f04.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 16624 }], \"background\": \"Matter is anything that takes up space. The students' books are matter, air is matter, the objects in the bags are matter, the bags themselves are matter.<div><br></div><div>We have five senses (sight, hearing, taste, touch smell) yet we often rely more on our sense of sight, so it is sometimes difficult to identify characteristics of an object that we cannot see. What if we had to identify an object using only three of those senses? Scientist often work \\\"blindly\\\" because some matter is too far away (celestial objects) or too small (molecules) to see. They observe the effects of those objects on their surroundings as they learn and identify the characteristics of those things in our world.</div>\", \"closure_duration\": 5, \"created_at\": { \"$date\": \"2012-03-04T21:07:51.000Z\" }, \"duration\": 30, \"grades\": [0, 1, 2, 3, 4, 5], \"materials_note\": \"plastic bags will be necessary if the students press too hard on certain items (e.g. lemon, garlic, mint) and the contents start to leak out of the paper bag\", \"materials_per_clas_ids\": [{ \"$oid\": \"4fa16ee50d3d050001000059\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f53da3bfeb00c0001000012\" }, { \"$oid\": \"4f53db59feb00c0001000016\" }, { \"$oid\": \"4fd167a76a51d70003000006\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"Include a mind concept map for descriptions about objects; have them leave out guess as to what it is, since this takes focus off observing and makes it mostly a “guessing game.”\", \"objective\": \"Explore ways to describe objects.<div>Explore matter in a solid form.</div><div>Practice inference.</div><div><br></div>\", \"procedure\": \"<ol><li>Explain to the students how to touch the bag without poking holes in it.</li><li>As they discuss their observations in their group, they will record their observations.</li><li>Use the attached <i>Mystery Bag Observation Chart</i> to record observations. Or, in their science notebooks, have them draw two lines down the center of the page to make three columns. At the top of one column write, \\\"number,\\\" at the top of the second write, \\\"what I observed,\\\" at the top of the last column write, \\\"what I think.\\\"</li><li>Instruct the students to fill in the rows of the table with the bag number and their answers to the corresponding questions (what I observed, what I think).</li><li>Tell them it's okay if they repeat the same adjectives in their observations.</li><li>Do bag #1 together as a class.&nbsp;Teacher observes bag and models to students how he uses his sense of smell, hearing, and touch to infer what is in the bag.</li><li>Divide the students into groups.</li><li>Give each group of students a mystery bag.</li><li>Set a timer for 3-5 minutes. When the timer goes off, have the students switch bags with the group to their left, or in clockwise order. The goal is for the groups to observe at least 5 bags. They will most likely not have a chance to observe every bag, but that's okay.</li><li>If some groups finish finish before the timer goes off, have them draw a picture in their science journals of what they think is in the bag. Make sure that they label the picture with the bag number.</li><li>Collect the bags.</li><li>Teacher facilitates a class discussion about observations and inferences regarding the contents of the bags. Emphasize the clues that helped them make their inferences.</li><li><div>Open each bag to reveal its contents.</div><div><i>** Please note, if another class will be doing this activity after your class has finished, please try to carefully open the bags so that they may be reused.</i></div></li></ol>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000022\" }, { \"$oid\": \"4f28bdf6023c640001000042\" }, { \"$oid\": \"4f28bdf6023c640001000043\" }, { \"$oid\": \"4f28bdf6023c640001000048\" }, { \"$oid\": \"4f28bdf6023c64000100005f\" }, { \"$oid\": \"4f28bdf6023c640001000063\" }, { \"$oid\": \"4f28bdf6023c64000100007d\" }, { \"$oid\": \"4f28bdf6023c6400010000ad\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<ul><li>Talk about what the students know about matter, then explain the properties of matter and the definition of properties.</li><li>Review five senses (sight, hearing, taste, touch smell) and explain that we often rely more on our sense of sight, so it is sometimes difficult to identify characteristics of an object that we cannot see. What if we had to identify an object using only three of those senses? Scientist often work \\\"blindly\\\" because some matter is too far away (celestial objects) or too small (molecules) to see. They observe the effects of those objects on their surroundings as they learn and identify the characteristics of those things in our world.</li><li>Make a KWL chart.</li><li>Go over vocabulary words.</li><li>Identify potential adjectives that might describe objects.</li></ul>\", \"term_ids\": [{ \"$oid\": \"4f53dcf9feb00c0001000028\" }, { \"$oid\": \"4f53dd49feb00c000100002c\" }, { \"$oid\": \"4f53dd6dfeb00c0001000030\" }, { \"$oid\": \"4f53dd87feb00c0001000034\" }, { \"$oid\": \"4f53e1f8feb00c0001000038\" }], \"title\": \"Mystery Bags\", \"updated_at\": { \"$date\": \"2013-03-03T20:41:21.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"4f6018b5da7241000100001b\": { \"_id\": { \"$oid\": \"4f6018b5da7241000100001b\" }, \"assessment\": \"What happened during the experiment? Did a chemical reaction occur in both cups? How do you know? Why do you think one substance would dissolve, but not the other?&nbsp;\", \"assistant_setup\": \"Set up the reactants (magnesium sulfate and calcium chloride) so that it is easy for the kids to dispense the reactants into their group bowls. Label one bowl \\\"magnesium sulfate\\\" and the other bowl \\\"calcium chloride.\\\" Spoon one spoonful of magnesium sulfate for each group in the class into the bowl marked \\\"magnesium sulfate.\\\" Repeat the process for calcium chloride.&nbsp;<div><br></div><div>Dispense tap water into 2 jugs.&nbsp;<br><div><br></div><div>Per teacher's instructions, place 2 bowls, 2 plastic cups, 2 spoons, 1 sharpie, and 1 100ml beaker in each group bin.&nbsp;</div></div>\", \"background\": \"During a chemical reaction between two substances, the physical properties of both substances change. One such possible physical change is dissolving. Substances are contained of molecules, and different substances have different molecules. Substances can be liquids, solids, or gases.&nbsp;<div><br></div><div>Since substances have different molecules, not all substances will dissolve when you mix them together. When a substance dissolves into another substance, its molecules spread out and mix with the molecules of the other substance. When a substance doesn't dissolve into another substance, its molecules stick together and don't mix with the molecules in the other substance.&nbsp;</div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-03-14T04:04:05.000Z\" }, \"duration\": 30, \"grades\": [5], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f459117eeaf0a0001000013\" }, { \"$oid\": \"4f459166eeaf0a000100001f\" }, { \"$oid\": \"4f600e20da72410001000011\" }, { \"$oid\": \"4f601f2bda72410001000031\" }, { \"$oid\": \"4f602197da7241000100003d\" }, { \"$oid\": \"4f602214da72410001000043\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f600f13da72410001000016\" }], \"note\": \"<font>Sources:</font><div><br></div><div><font>California Science, Scott Foresman. 5th grade. page 6.&nbsp;</font><br><div><br></div><div><a href=\\\"http://www.science-sparks.com/2011/11/17/exploring-which-solids-dissolve-in-water/\\\">http://www.science-sparks.com/2011/11/17/exploring-which-solids-dissolve-in-water/</a></div><div><br></div><div><a href=\\\"http://portal.acs.org/portal/PublicWebSite/education/whatischemistry/scienceforkids/chemicalphysicalchange/dissolving/CSTA_014891\\\">http://portal.acs.org/portal/PublicWebSite/education/whatischemistry/scienceforkids/chemicalphysicalchange/dissolving/CSTA_014891</a></div></div>\", \"objective\": \"<ul><li><font>Learn that different reactants react differently with each other</font></li><li><font>Observe physical changes that occur during chemical reactions</font></li><li><font>Learn what dissolving is</font></li></ul>\", \"procedure\": \"<ol><li><font>Make a chart with \\\"time (minutes)\\\" on the y-axis, and \\\"changes observed\\\" on the x-axis. In this chart, every 2 minutes up to 10 minutes, the students will record their observations of the chemical reactions in each cup.&nbsp;</font></li><li><font>Use the sharpie to label one bowl and one cup \\\"magnesium sulfate\\\", and the other bowl and the other cup \\\"calcium chloride.\\\"</font></li><li><font>Have one student fill up their 100ml beaker with water. Have another student bring their bowls to the reactant area and dispense 1/3 a spoonful of magnesium sulfate into their magnesium sulfate bowl. then repeat the process with their calcium chloride bowl.&nbsp;</font></li><li><font>Dispense 50ml of water into each of the two cups.</font></li><li>As soon as a group has their 2 cups filled with water, their two reactant bowls ready, and a person from their group who will act as a timer, have them dump their magnesium sulfate into the cup marked \\\"magnesium sulfate,\\\" and their calcium chloride into the cup marked \\\"calcium chloride,\\\" and start timing.&nbsp;</li><li>Every 2 minutes for 10 minutes, record observations.</li></ol>\", \"reflection\": \"\", \"standard_ids\": [], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"Use a KWL chart to explore prior knowledge of chemical reactions and dissolving. What happens to a substance during a chemical reaction? What is something that changes during a chemical reaction that you can see? Do all substances change in the same way during a chemical reaction?&nbsp;<div><br></div><div>How do you know when something has dissolved? When something hasn't dissolved?&nbsp;</div>\", \"term_ids\": [{ \"$oid\": \"4f2f5ac3a056bc0001000008\" }, { \"$oid\": \"4f2f5b6ba056bc0001000018\" }, { \"$oid\": \"4f5d041c4a6ca80001000004\" }], \"title\": \"Dissolving Substances during a Chemical Reaction\", \"updated_at\": { \"$date\": \"2012-03-14T05:16:15.000Z\" }, \"user_id\": { \"$oid\": \"4f45904eeeaf0a0001000008\" }, \"T\": \"act\" }, \"4f78ee972ab40b0001000005\": { \"_id\": { \"$oid\": \"4f78ee972ab40b0001000005\" }, \"assessment\": \"<font>Ask students to draw conclusions.</font><div><ul><li><font>What happened to the bottle cap?</font></li><li><font>Did the results match your prediction?</font></li></ul><div><font>Ask students to make inferences.</font></div></div><div><ul><li><font>What happens to air when it is heated?</font></li><li><font>What would happen to the 2L bottle if we placed it in the refrigerator for several hours and put a balloon over the opening? Would the balloon blow up? If time and materials permit, do this and show the students the results -- you might leave the bottle in the refrigerator at school overnight and discuss the results in the morning. The&nbsp;</font>balloon would stretch. There would still be the same amount of air inside the balloon and bottle, but it would just expand as it heated up).</li></ul></div>\", \"assistant_setup\": \"<ol><li><font>After checking into the school office, retrieve the H4S bin in the designated area.</font></li><li><font>Based on the procedure, assemble the materials into appropriate groups.</font></li><li><font>Put on the H4S blue vest located in the materials bin.</font></li><li>Heat water in teapot to boiling.</li><li>When the teacher instructs, distribute one 2L bottle and cap to each student group.</li><li>Wait near the sink for next step.</li><li>When the gopher (student from each group in charge of retrieving materials) for each group arrives to retrieve their bucket filled with 1L of water, you fill the first .5L with hot water, and immediately thereafter, allow the student to use the faucet to fill the remaining .5L with cold water.</li><li>If there is time and space, permit the student to place the bucket on a flat surface to note the exact 1L measurement. He may dump or add a bit of water to reach the 1L mark.</li><li>Repeat the water retrieval and measuring with each gopher until all of the groups have their water.</li><li>During the activity, move around the room to solicit observations, responses, inquiries, etc., from the students.</li><li>Collect the materials from the students.</li><li>Dry the buckets. Leave the caps off of the bottles so that they are allowed to dry and not mold.</li><li>Return the supplies to the H4S bin.</li></ol>\", \"background\": \"<p class=\\\"p1\\\">Warm air takes up more space than the same amount of cold air, it also weighs less than cold air occupying the same space. You might have seen this principle in action if you've flown in or watched a hot air balloon.</p><p class=\\\"p1\\\">In this experiment, as the air inside the plastic bottle heats up, it starts to expand. The molecules begin to move faster and further apart from each other. This is what makes the plastic bottle cap move.</p>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-04-02T00:11:03.000Z\" }, \"duration\": 20, \"grades\": [3], \"links\": [{ \"_id\": { \"$oid\": \"4f7939802ab40b0001000060\" }, \"note\": \"<br>\", \"title\": \"Heat Wave and the Human Body\", \"url\": \"http://www.scientificamerican.com/article.cfm?id=heat-wave-health\" }, { \"_id\": { \"$oid\": \"4f8b9baab4abf20001000005\" }, \"url\": \"http://science.howstuffworks.com/transport/flight/modern/hot-air-balloon.htm\", \"title\": \"How a Hot Air Balloon Works\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"51664b999a73910002000006\" }, \"url\": \"http://www.youtube.com/watch?v=5p0P5SluDSU\", \"title\": \"Water Molecule Dance\", \"note\": \"\" }], \"materials_note\": \"If there are sufficient materials, this activity works well with pairs of students (groups of 2).\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f78f0cc2ab40b0001000033\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f78eeef2ab40b0001000009\" }, { \"$oid\": \"4f78ef032ab40b000100000d\" }, { \"$oid\": \"4f78f0522ab40b0001000025\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"\", \"objective\": \"To predict and discover what happens to air as it is heated.<div><br></div>\", \"procedure\": \"<ol><li><font>Divide students into groups based on the number of plastic bottles available (pairs or groups of two work best).</font></li><li><font>Assign one student in each group the job of gopher&nbsp;(student in charge of retrieving materials). Assign additional jobs if desired (e.g. reporter, bottle holder).</font></li><li><font>Instruct H4S aide to pass out 2L bottles to each group.</font></li><li><font>Place a few drops of water along the edge of the bottle's opening. Put the plastic bottle cap upside down on top of the opening.</font></li><li><font>Predict what will happen to the air in the bottle when the bottle is immersed in warm water. Explain that with the help of the H4S aide, they will mix hot water with cold to make warm water.</font></li><li><font>Write observations in science journals before the bottles are placed in the warm water.</font></li><li><font>Send the gophers to retrieve the bucket with warm water while the rest of the class writes in their science journals.</font></li><li><font>Observe what happens to the bottle cap when the 2L bottle is placed into the bucket of warm water. Instruct the student holding the 2L in the water to hold it gently, so as not to crush the plastic. If the student lets go of the bottle, it will fall to its side and float, so remind her not to let go of it.</font></li><li><font>The cap will \\\"jump\\\" or pop off of the opening of the bottle. If time permits, the groups may remove the bottle cap, let the air in the bottle cool down, and try to make the cap move again. Since the water will also cool, the cap will not move as much or will not move at all, which would lead to a good discussion about the variables of the experiment (e.g. water temperature).</font></li></ol>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000062\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<ol><li>Remind the class what it means when scientist predict, observe and experiment.</li><li>Ask students to write in their science journals answers to the following predictions:</li></ol><ul><li>How does heat affect air?</li><li>Does it make air expand and rise?</li><li>Does it make air contract and sink?</li></ul>\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"4f78f1432ab40b0001000038\" }, { \"$oid\": \"4f78f1af2ab40b000100003c\" }, { \"$oid\": \"4f78f2082ab40b0001000040\" }, { \"$oid\": \"4f78f94c2ab40b0001000056\" }], \"title\": \"How Does Heat Affect Air?\", \"updated_at\": { \"$date\": \"2013-04-11T05:33:19.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"4f7a92c8965e190001000009\": { \"_id\": { \"$oid\": \"4f7a92c8965e190001000009\" }, \"assessment\": \"\", \"assistant_setup\": \"<ol><li>Read the activity.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Based on the procedure, assemble the materials into appropriate groups.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>If the teacher instructs you to do so, download and make copies, one for each student in the class, of the star finder for the month. Click on link labeled <i>Star Finder</i>, go to the site and click on the month that you're in to download the stars you'll see in the sky during that month. Make one copy per group of the <i>Constellation Patten </i>attachment (please refer to the links at the end of this activity).</li><li><font>If you cannot duplicate the worksheet in color, please let the teacher know so that she may instruct the class to highlight the appropriate constellation that is visible in the night sky for that month.</font></li><li><font>If using Pringles cans for the star viewer, prepare the cans for the class by making a small hole in the center of the metal bottom of each can. Since the hole must be large to let in sufficient light to view the constellation, use a hammer and nail to make the holes.</font></li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ol>\", \"attachments\": [{ \"_id\": { \"$oid\": \"4f875d42dc4c210001000052\" }, \"attachment\": \"89302722ab.pdf\", \"caption\": \"Constellation Patterns\", \"content_type\": \"application/pdf\", \"file_size\": 144780, \"h\": 792612, \"w\": 612 }], \"background\": \"<div><div>You probably know that a constellation is a group of stars connected together to make an imaginary picture in a particular part of the night sky. But did you know that as the Earth moves, we see different constellations?</div><div>That means that at different times of the year we can see different pictures in the night sky. There are officially 88 constellations in total, covering the entire night sky visible from the earth. &nbsp;Have a go at finding more constellations and making star maps for your viewer.</div><div>The stars and constellations are there all night… and all day! We just can’t see them during the day because the light from the sun is so bright.</div><div>Cultures and civilisations throughout history have identified and named different constellations. Many, such as the Greeks and Romans, have told stories about the pictures they have seen in the stars of the night sky. Many of the names we have for constellations today come from stories told thousands of years ago. Constellations are named after many things including animals, gods and goddesses.</div></div><div><p>We see different views of the Universe from where we live as Earth makes its yearly trip around the solar system. That is why we have a different Star Finder for each month, as different constellations come into view. Also, as Earth rotates on its axis toward the east throughout the hours of the night, the whole sky seems to shift toward the west.</p><p>The Star Finder charts are for a latitude of 34° N, which is about as far north of the equator as Los Angeles, California (charts are from&nbsp;<i>The Griffith Observer</i>&nbsp;magazine.) The farther north you are, the more the constellations will be shifted south from the Star Finder charts. The Star Finder charts show the sky at about 10 PM for the first of the month, 9 PM for the middle of the month, and 8 PM for the last of the month. These are local standard times. For months with Daylight Savings Time, star chart times are an hour later.</p></div><div><br></div>\", \"closure_duration\": 5, \"created_at\": { \"$date\": \"2012-04-03T06:03:52.000Z\" }, \"duration\": 30, \"grades\": [3], \"links\": [{ \"_id\": { \"$oid\": \"4f87527adc4c21000100000b\" }, \"note\": \"\", \"title\": \"Source\", \"url\": \"http://www.glasgowsciencecentre.org/online/constellation-viewer.html\" }, { \"_id\": { \"$oid\": \"4f87612ddc4c21000100005a\" }, \"url\": \"http://spaceplace.nasa.gov/starfinder/\", \"title\": \"Make a Star Finder\", \"note\": \"\" }], \"materials_note\": \"\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f875ad2dc4c210001000044\" }, { \"$oid\": \"4f875adddc4c210001000048\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f875602dc4c210001000027\" }, { \"$oid\": \"4f875610dc4c21000100002b\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4f8755a3dc4c21000100001f\" }, { \"$oid\": \"4f8755f1dc4c210001000023\" }, { \"$oid\": \"4f87563adc4c21000100002f\" }, { \"$oid\": \"4f87564edc4c210001000033\" }, { \"$oid\": \"4f875674dc4c210001000037\" }, { \"$oid\": \"4f875ab0dc4c210001000040\" }], \"note\": \"Regarding Step 7 of the procedure - if the students push too hard, the black paper will collapse into the tube. You might avoid this by having them attach the <i>Constellation Pattern</i> to the black paper ahead of time and poke the holes on the desk, using a magazine or other cushion to avoid damaging the desk. The problem with this alteration is that many students subsequently have difficulty centering the star map over the tube opening, since it is very difficult to see the holes after they've been moved.\", \"objective\": \"<font>To understand that the patterns of stars differ from one another by making and comparing models of constellations.</font><div><font>To understand&nbsp;that d</font>ifferent stars can be seen in different seasons.<div><div><br></div></div></div>\", \"procedure\": \"<ol><li><font>Clean out the Pringles can, if using a section of a&nbsp;cardboard&nbsp;tube, make sure that the edges are free of loose cardboard shredding. If using a toilet paper tube, make sure that you are careful not to crush it, since the cardboard is not very sturdy.</font></li><li><font>Choose one constellation from the&nbsp;<i>Constellation Pattern</i>&nbsp;and cut it out (patterns are on pages 2 and 3 of the link at the bottom of this page labeled&nbsp;</font><i>Constellation Pattern</i>).</li><li>Place square of black construction paper over the opening of the tube.</li><li><font><font>Tape the construction paper to the tube, using a rubberband to secure it. Or, if you have enough tape, simply tape the black paper to the tube.</font></font></li><li><font>Place the constellation that you've selected on top of the black paper that is now secured to the opening.</font></li><li>Carefully place two small pieces of tape at opposite sides of the constellation, so that it doesn't move off the center of the black paper when you poke your holes.</li><li>Using a pushpin, gently poke a hole through every dot on the star map. Be careful not to crush the black paper into the tube.</li><li>Remove the constellation pattern from the black paper.</li><li>Look through the hole (if using a Pringle can) or the opening in the tube to view your constellation.</li><li>Wrap black construction paper around the can.</li><li>Decorate the can with stickers.</li><li>Pass out the <i>Star Finders</i> (like Cootie Catchers).</li><li>Follow the instructions from the Make a <i>Star Finder</i> worksheet on the Nasa website (see the link below).</li></ol>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000059\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"<div><ol><li>Either you or the science aide will download and make copies, one for each student in the class, of the star finder for the month. Click on link labeled <i>Star Finder</i>, go to the site and click on the month that you're in to download the stars you'll see in the sky during that month. Make one copy per group of the <i>Constellation Patten</i> attachment (please refer to the links at the end of this activity).</li><li>Use information from Background Information section to generate questions and statements from students.</li><li>Seek prior knowledge of star patterns, experiences star gazing and general knowledge about constellations.</li><li>Have students close their eyes and imagine the night sky for inspiration as they visualize their own star pattern. They can use the existing <i>Constellation Pattens</i> or \\\"create\\\" their own, by using the other side of the circles on the <i>Constellation Patterns</i>.</li></ol></div><div><br></div>\", \"term_ids\": [{ \"$oid\": \"4f8754ccdc4c210001000015\" }, { \"$oid\": \"5101ae748c3e5f0002000014\" }, { \"$oid\": \"5101aebf8c3e5f0002000016\" }], \"title\": \"Constellation Viewer\", \"updated_at\": { \"$date\": \"2013-03-17T01:48:19.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"4f7b369b965e190001000021\": { \"_id\": { \"$oid\": \"4f7b369b965e190001000021\" }, \"assessment\": \"Interpret your data. What conducted electricity? How are these materials alike? What didn't conduct electricity? How are these materials alike?&nbsp;<div><br></div><div>Draw a conclusion of what types of materials conduct electricity. &nbsp;</div>\", \"assistant_setup\": \"Place supplies in group bins according to teacher instructions. Make sure that no light bulbs are broken.&nbsp;\", \"background\": \"Conductivity measures the ease with which electricity flows through a substance. Some substances conduct electricity, which means that electricity can flow through them. Other substances do not conduct electricity, which means that electricity does not flow through them.&nbsp;<div><br></div><div>A circuit is a complete path through which electricity can flow. In this experiment, we will complete a circuit using a variety of substances.&nbsp;Using the circuit, we will determine which substances conduct electricity, and which do not.&nbsp;</div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-04-03T17:42:51.000Z\" }, \"duration\": 30, \"grades\": [5], \"materials_note\": \"You need two 30 cm lengths of copper wire.&nbsp;\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f7b44497a11da0001000008\" }, { \"$oid\": \"4f7b44827a11da000100000c\" }, { \"$oid\": \"4f7b46e17a11da0001000011\" }, { \"$oid\": \"4f7b46ff7a11da0001000015\" }, { \"$oid\": \"4f7b4a857a11da000100001a\" }, { \"$oid\": \"4f7b4a997a11da000100001e\" }, { \"$oid\": \"4f7b4aa67a11da0001000022\" }, { \"$oid\": \"4f7b4bfa7a11da000100002a\" }, { \"$oid\": \"4f7b4c777a11da000100002f\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f600f13da72410001000016\" }], \"note\": \"<a href=\\\"http://www.nuffieldfoundation.org/practical-chemistry/which-substances-conduct-electricity\\\">http://www.nuffieldfoundation.org/practical-chemistry/which-substances-conduct-electricity</a><div><a href=\\\"http://www.wsd1.org/generalwolfe/sciencefairprojects/S1-4/members.htm\\\">http://www.wsd1.org/generalwolfe/sciencefairprojects/S1-4/members.htm</a>\\r\\n</div>\", \"objective\": \"<ul><li>To demonstrate conductivity, and how some substances conduct electricity, while others do not.&nbsp;</li><li>To construct a simple circuit.&nbsp;</li></ul>\", \"procedure\": \"<ol><li><font>Put on safety goggles.&nbsp;</font></li><li><font>Construct the circuit. Screw the light bulb into the light bulb holder. Place the C battery in the C battery holder. Connect one of the C battery holder leads to one metal end of the light bulb holder. Connect one of the 30cm copper wires to the other metal end of the light bulb holder.&nbsp;</font></li><li><font>Notice that the circuit is now complete, except for two wires. Connect these wires. What do you see? Is electricity being conducted? Record your observations.&nbsp;</font></li><li><font>Cut 5 cm off one of the other 30cm copper wire with the wire clippers.&nbsp;</font></li><li><font>Decide how you will determine if a material conducts electricity. What will your independent variable be? Your dependent variable? Your controlled variables? Write your variables and your criteria down.&nbsp;</font></li><li><font>Test each of the following materials by using it to complete the circuit: paper clip, short wire (5cm), long wire (25 cm), eraser.&nbsp;</font></li><li><font>Construct a table to record your results. For each substance, record whether it constructs electricity (column 1) or does not conduct electricity (column 2).&nbsp;</font></li></ol>\", \"reflection\": \"Review what you learned as a class using the KWL chart.&nbsp;\", \"standard_ids\": [], \"status\": \"draft\", \"subject\": \"phys\", \"teacher_setup\": \"Use a KWL chart to explore what the students know about electricity and conductivity. Why is electricity important? How can constructing a circuit tell us if a material conducts electricity or not? What materials will conduct the most electricity? Will metals conduct more than nonmetals?&nbsp;<div><br></div><div>Discuss the variables in the experiment. What is the independent variable? What is the dependent variable? What are some of the controlled variables? Why is it important to control for some variables and not others?&nbsp;</div>\", \"term_ids\": [{ \"$oid\": \"4f2f5b6ba056bc0001000018\" }, { \"$oid\": \"4f7b38d0965e190001000027\" }, { \"$oid\": \"4f7b39d9965e19000100002b\" }, { \"$oid\": \"4f7b3a6b965e19000100002f\" }, { \"$oid\": \"4f7b3b3b965e190001000034\" }], \"title\": \"Which Substances Can Conduct Electricity?\", \"updated_at\": { \"$date\": \"2012-04-03T19:35:04.000Z\" }, \"user_id\": { \"$oid\": \"4f45904eeeaf0a0001000008\" }, \"T\": \"act\" }, \"4f850f9079626d0001000007\": { \"_id\": { \"$oid\": \"4f850f9079626d0001000007\" }, \"assessment\": \"What is the function of a seed coat? The food? The root system? The shoot system? Can a seed sprout without soil? Why?<div>Review vocabulary.</div>\", \"assistant_setup\": \"<ol><li>Read the entire activity before arriving to class.</li><li>Check with teacher in advance to determine who (science aide or teacher) will soak pinto beans overnight.</li><li><font>After checking into the school office, retrieve the H4S bin from the designated area.</font></li><li><font>Put on the H4S blue vest located in the materials bin.</font></li><li>Prepare the necessary materials.</li><li>Place seed diagram inside of plastic stands so that each table has a stand for viewing the diagram as they work.</li><li>Use the sharp knife to slice a thin section of a pinto bean that includes as much of the embryonic plant as possible. Place the section on a slide and insert into the microscope. Repeat for each microscope.</li><li>Wait for instructions from teacher.</li></ol>\", \"attachments\": [{ \"_id\": { \"$oid\": \"4f8661c47d6824000100002f\" }, \"caption\": \"Seed Parts\", \"w\": 600, \"h\": 628, \"attachment\": \"f478d7ef5d.png\", \"content_type\": \"image/png\", \"file_size\": 26742 }], \"background\": \"Seeds come in different sizes shapes, and colors. Some are edible, some are not. The reason for the diversity is related to the seeds' need to disperse and grow. Some seeds are so light that they can be carried by the wind; some float; some stick to animal fur; some are brightly colored to attract birds who carry them to other locations. Others are eaten by animals and then deposited in the ground as part of animal waste. However, all seeds have the same parts: a seed coat to protect it; an embryo that is the baby plant; endosperm that is the food that feeds the embryo until a seedling can make its own food.<div><br></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-04-11T04:58:57.000Z\" }, \"duration\": 30, \"grades\": [0, 2, 3, 4], \"links\": [{ \"_id\": { \"$oid\": \"4f85126e79626d000100002f\" }, \"note\": \"\", \"title\": \"Source\", \"url\": \"http://www.venturausd.org/childnutrition/gardeningexample2ndgradelessonpart2.htm\" }, { \"_id\": { \"$oid\": \"4f8661ac7d6824000100002b\" }, \"note\": \"\", \"title\": \"Source\", \"url\": \"http://www.education.com/science-fair/article/seed-parts/\" }], \"materials_note\": \"<ul><li><font>pinto beans must be soaked overnight so that they can be separated easily, estimate that you'll need 1-4 beans per group, plus beans to slice for microscope viewing.</font></li><li><font>plastic knives are optional</font></li><li><font>science journal or blank piece of paper is necessary to record observations (draw pictures or use words)</font></li><li><font>paper plates may be used in lieu of paper towels</font></li></ul>\", \"materials_per_clas_ids\": [{ \"$oid\": \"50a16f95a7c9e70002000005\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f28db119c04d80001000007\" }, { \"$oid\": \"4f2b1e4fccb71d0001000015\" }, { \"$oid\": \"4f8512f879626d0001000035\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4f850fa779626d000100000b\" }, { \"$oid\": \"4f85117d79626d000100001a\" }], \"note\": \"<br>\", \"objective\": \"To observe, classify and identify different seed parts.<div><br></div>\", \"procedure\": \"<ol><li>Instruct pass out materials.</li><li>Have the class follow your step-by-step dissection.</li><li>Peel off the outer skin.</li><li><font>Instruct students to use their fingernails to&nbsp;carefully&nbsp;split pinto bean in half lengthwise. If they have trouble, the science aide can help them.</font></li><li><font>Use a magnifying glass as you i</font>dentify the following parts:&nbsp;seed coat (outer protection of seed-usually paper thin); embryo (part that will grow into a plant); root system and shoot system that will grow from the embryo; food (surrounds the embryo for use until it is big enough to produce its own food).</li><li>Look at the seed section under the microscope. Science aide and teacher will monitor the students' use of microscopes.</li><li>Have students make scientific illustrations of the seed and its parts in their science&nbsp;journals.</li><li>Continue to use the magnifying lens to study the inside of each bean half and identify the cotyledon, plumule, epicotyl, hypocotyl, and radicle (see attachment).</li><li>If time permits, have students compare their group's bean with another group's and note any difference in size or structure.</li></ol>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000008\" }, { \"$oid\": \"4f28bdf6023c640001000032\" }, { \"$oid\": \"4f28bdf6023c640001000041\" }, { \"$oid\": \"4f28bdf6023c640001000053\" }, { \"$oid\": \"4f28bdf6023c640001000073\" }, { \"$oid\": \"4f28bdf6023c64000100007d\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<ol><li><font>Explain that a</font>&nbsp;bean seed consists of three basic parts: a seed coat, an embryo, and two cotyledons. The surface covering of a seed is called the seed coat. This jacket around the seed protects the embryo (an organism in its earliest stage of development) from insects, disease, and other damage. The hilum is the scar on the seed coat of some seeds, such as beans; it is the point where the seed was attached to the plant during development.</li><li><font>A bean has two halves under the seed coat called cotyledons, so it is called a dicotyledon or a dicot (a plant whose seed has two cotyledons). The end of the embryo that develops into the shoot (part of plant that grows above ground) is called the epicotyl. The tip of the epicotyl that looks like folded leaves is called the plumule (embryonic shoot tip that consists of several tiny, immature leaves that at maturity form the first true leaves). Below the epicotyl is the hypocotyl, which attaches the embryo to the cotyledon. The end of the hypocotyl, called the radicle, develops into the root.</font></li></ol>\", \"term_ids\": [{ \"$oid\": \"4f85105e79626d0001000016\" }, { \"$oid\": \"4f8511f479626d0001000027\" }, { \"$oid\": \"4f85123279626d000100002b\" }, { \"$oid\": \"4f865fd47d6824000100000a\" }, { \"$oid\": \"4f8660457d68240001000014\" }, { \"$oid\": \"4f8660817d68240001000018\" }, { \"$oid\": \"4f8660ce7d6824000100001f\" }, { \"$oid\": \"4f86610e7d68240001000023\" }], \"title\": \"Pinto Bean Dissection\", \"updated_at\": { \"$date\": \"2013-03-25T22:12:30.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"4f87648adc4c210001000060\": { \"_id\": { \"$oid\": \"4f87648adc4c210001000060\" }, \"assessment\": \"What happened?<div>How did the steepness of the hill affect how far the car traveled? Did your results support your hypothesis?<br><div>Why? Use background information to answer questions after the students have shared their results.</div><div>Suggest possibilities of more experimentation for home project or science fair.</div></div><div>If you added weight to the bottle cap (the coins), what would happen to the total distance that the bottle cap traveled?</div>\", \"assistant_setup\": \"<ol><li>Cut cardboard to create a plane large enough to make a ramp between five stacked textbooks and the floor. You'll need 6 pieces if you have 6 groups, so plan accordingly. Small pieces of cardboard will work, but larger pieces are better.</li><li>Retrieve the textbooks from the classroom if the teacher has not already stacked them in a convenient location. You'll need 4 textbooks per group. If there are not enough textbooks, that's fine, the students will simply do fewer trials.</li><li>Review materials to make sure that there are enough for each group.</li></ol><div><br></div>\", \"attachments\": [{ \"_id\": { \"$oid\": \"4f8b3a15f40044000100005b\" }, \"caption\": \"Traveling Bottle Cap Chart\", \"w\": 612, \"h\": 792, \"attachment\": \"6f49a635dc.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 22402 }], \"background\": \"<div>Energy makes change. Everything in the world that happens is a result of the exchange of energy. It&nbsp;moves cars along the road and boats over&nbsp;water; makes bread rise and cookies bake; keeps our ice cream frozen in the freezer and our milk cold in the&nbsp;refrigerator; powers our computers and trains; makes the plants and animals that we eat grow, and makes us grow, allowing our minds to think.</div><div>Scientists define energy as the ability to&nbsp;do work.</div><div><br></div><div>Energy is found in different forms, such as light,&nbsp;heat, sound, and motion. There are many forms&nbsp;of energy, but they can all be put into two&nbsp;categories: kinetic and potential.</div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-04-12T23:26:02.000Z\" }, \"duration\": 30, \"grades\": [3], \"links\": [{ \"_id\": { \"$oid\": \"4f8765f4dc4c210001000065\" }, \"url\": \"http://www.aquariumofpacific.org/downloads/ed_3ss_EnergySources.pdf\", \"title\": \"Energy Sources\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"4f8b1456f40044000100000b\" }, \"url\": \"http://www.energyforeducators.org/scienceunits/energy.shtml\", \"title\": \"Energy for Educators\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"4f8b1c21f400440001000027\" }, \"url\": \"http://www.need.org/\", \"title\": \"NEED project\", \"note\": \"\" }], \"materials_note\": \"<div><font>If you have toy cars, you may use those in place of the bottle cap. Or, use any object you like, but make sure that you test it out so that is slides.</font></div><div><font><br></font></div><div><font>Free unassembled boxes from the US Post Office work if cut into large sections. The larger the cardboard piece, the longer distance the bottle cap will travel.</font></div><div><font>The size of the cardboard is not&nbsp;particularly&nbsp;relevant, since it will not vary for each trial (it's a constant).</font></div><div><font><br></font></div><div><font>Use text books that you have available in class. If possible, use the same four books for each group.</font></div><div><font><br></font></div><font>Use coins that will fit inside of the bottle cap or other heavy small objects such as marbles. This is of course are optional.</font><div><br></div>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f78ef032ab40b000100000d\" }, { \"$oid\": \"4f8b2026f400440001000038\" }, { \"$oid\": \"4f8b2038f40044000100003c\" }, { \"$oid\": \"4f8b2064f400440001000040\" }, { \"$oid\": \"4f8b2070f400440001000044\" }, { \"$oid\": \"4f8b2081f40044000100004a\" }, { \"$oid\": \"4f8b2b8df400440001000051\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"\", \"objective\": \"Find out how the steepness of an incline affects the distance a bottle cap will travel.<div>Observe changes that occur due to the forces of energy.</div><div><br></div>\", \"procedure\": \"<div><ol><li>Write hypothesis in science journals (answer the question:&nbsp;How will the steepness of a hill affect how far a car travels?).</li><li>Create a chart for your results (see attachment).</li><li>Model the measuring of the stack of books.</li><li>Stack 4 books on top of one another. Tape one edge of the cardboard to the edge of the top book. Tape the bottom edge of the cardboard to the floor. The cardboard should look like a slide.</li><li><font>Put the bottle cap at the edge of the&nbsp;cardboard&nbsp;and let go.</font></li><li><font>Place a small piece of tape at the spot where the bottle cap stopped. Use a meter stick to measure the distance from the bottom of the cardboard to the tape. Record your measurement in your science journal.</font></li><li><font>If there is not enough space or your floor is too slick and the bottle cap travels to far, add coins to the cap. The added weight will slow the car down.</font></li><li><font>Repeat steps 5 and 6.</font></li><li><font>Use Variables:&nbsp;</font>Take away one book, repeat steps 4 thru 7.</li><li>Take away another book,&nbsp;repeat steps 4 thru 7.</li><li>Take away another book,&nbsp;repeat steps 4 thru 7.</li><li>Take away another book, so that the cardboard is flat repeat steps 4 thru 7 (this may seem silly, since the bottle cap will not move, but it is important that you write \\\"0\\\" three times to understand the concept of \\\"0\\\" and scientific trials.</li><li>If short on time, skip the measurements for the incline with one book, making sure that you do the last trial with the cardboard flat on the ground (so that students can observe the result of no gravitational energy exerted on the bottle cap).</li><li>Create a graph in science journal: X axis is distance that the bottle cap traveled, Y axis is the height of books (if time is short or students are not adept at making graphs, use the number of books as Y axis). Label points on the graph as trial 1, 2, 3.</li></ol><div>Extension:</div></div><div><ol><li><font>Add one or more coins to the bottle cap and complete trials. Discuss results. Bottle cap will go further with more weight.</font></li></ol></div>\", \"reflection\": \"<br>\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000046\" }, { \"$oid\": \"4f28bdf6023c640001000063\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<ul><li>Review and/or introduce vocabulary words.</li><li>What kind of energy do you think this (hold up an object) has?</li><li>Does everything have energy?</li><li>What do you know about energy?</li><li>If time permits, make a KWL chart or mind map identifying words or concepts that the students associate with the term, \\\"energy.\\\"</li><li>How will the steepness of a hill affect how far a car travels?</li><li>What are the variables in this experiment? (e.g. number of books, number of coins in bottle cap)</li></ul>\", \"term_ids\": [{ \"$oid\": \"4f53e1f8feb00c0001000038\" }, { \"$oid\": \"4f78f94c2ab40b0001000056\" }, { \"$oid\": \"4f87a5aadd735d0001000004\" }, { \"$oid\": \"4f87a80cdd735d0001000008\" }, { \"$oid\": \"4f87a820dd735d000100000c\" }, { \"$oid\": \"4f87a85fdd735d0001000010\" }, { \"$oid\": \"4f8b1f08f40044000100002d\" }, { \"$oid\": \"4f8b2012f400440001000034\" }, { \"$oid\": \"505b912e8e6e180002000009\" }], \"title\": \"Traveling Bottle Cap\", \"updated_at\": { \"$date\": \"2013-04-11T05:31:03.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"4f8b3e3bf400440001000062\": { \"_id\": { \"$oid\": \"4f8b3e3bf400440001000062\" }, \"assessment\": \"\", \"assistant_setup\": \"\", \"background\": \"\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2012-04-15T21:31:39.000Z\" }, \"duration\": null, \"grades\": [2], \"links\": [{ \"_id\": { \"$oid\": \"4f8b4063f40044000100006a\" }, \"url\": \"http://www.teachersdomain.org/resource/tdc02.sci.life.colt.plantsgrow/\", \"title\": \"From Seed to Flower\", \"note\": \"\" }], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"<font>Understand that plants have&nbsp;a life cycle that includes sprouting; developing roots, stems, leaves, and flowers; reproducing; and eventually dying.</font><div><font><br></font></div><div><font>Observe the parts of a plant.</font></div>\", \"procedure\": \"<ol><li><font>Show the students a flowering potted plants and discuss the plant parts that they know.</font></li><li><font>Teach the song, \\\"<i>Roots, Stems, Leaves, Flowers, Fruits and Seeds</i>.\\\" Refer to attachment.</font></li><li>Show students the <i>From Seed to Flower</i> video. After watching, have them suggest corrections to the order of the words/pictures on the board. Ask them to describe how plants change as they grow. What happens to their size? Their shape? Their parts?</li><li><br></li></ol>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000030\" }, { \"$oid\": \"4f28bdf6023c640001000034\" }, { \"$oid\": \"4f28bdf6023c640001000041\" }], \"status\": \"draft\", \"subject\": \"life\", \"teacher_setup\": \"Retrieve the video<i> From Seed to Flower</i> on your computer so that it's ready to show the class.\", \"term_ids\": [], \"title\": \"Plant Life Cycles\", \"updated_at\": { \"$date\": \"2012-04-16T04:08:53.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"4f9e184c7b922d0001000006\": { \"_id\": { \"$oid\": \"4f9e184c7b922d0001000006\" }, \"assessment\": \"<div>Did you see all the colors of the rainbow through your spectroscope?</div><div><br></div><div>What differences did you observe between the different sources of light that you looked at with the spectroscope? Was the rainbow always in the same color order, regardless of the light source? (yes)</div><div><br></div><div><br></div>\", \"assistant_setup\": \"<ol><li>Sharpen pencils.</li><li>Punch holes in silver circle stickers.</li><li>Carefully cut the piece of diffraction grating into small squares, slightly larger than the hole made by the hole punch. Make sure that you have enough squares for each student. If you smudge the&nbsp;diffraction grating after cutting it, use a cloth to gently clean the squares.</li><li>Check that cardboard tubes are cut to size (one per student, 6-12 inches each).</li><li>Divide the materials into group bins.</li></ol><div><br></div>\", \"attachments\": [{ \"_id\": { \"$oid\": \"4f9ee5f47b922d0001000068\" }, \"caption\": \"Mix Colors of Light; Make a Spectroscope\", \"w\": 612, \"h\": 792612, \"attachment\": \"c75ff667e7.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 18899 }], \"background\": \"<div><div><font>A spectroscope is a device that can be used to look at the group of wavelengths of light given off by an element. All elements give off a limited number of wavelengths when they are heated and changed into gas. Each element always&nbsp;gives off the same group of wavelengths. This group is called the emission spectrum of the element.</font></div><div><font><br></font></div><div><font>White light is a combination of different colors (ROYGBIV). The spectroscope that the students will build allows them to see the separation of incoming light (through the slit) into its component colors, forming a light spectrum (rainbow). Red light has a lower frequency (longer wavelength) than blue light. Diffraction gratings contain thousands of microscopic grooves, which cause light waves to bend (longer waves bend more). &nbsp;Different types of light sources emit different combinations of colors and these differences are revealed when the white light \\\"mix\\\" is sorted into a&nbsp;spectrum.</font></div><div><font><br></font></div></div><div>Besides creating interesting color patterns a&nbsp;spectroscope&nbsp;can be used to identify different sources of light. (See the links for additional activities using the spectroscope).</div><div><font><br></font></div><div><font>In the visible wavelengths of the electromagnetic spectrum, red, with the longest wavelength, is diffracted most; and violet, with the shortest wavelength, is diffracted least. Because each color is diffracted a different amount, each color bends at a different angle. The result is</font></div><div><font>a separation of white light into the seven major colors of the spectrum or rainbow.</font></div><div><font>A good way to remember these colors in order is the name Roy G. Biv. Each letter begins the name of a color: red, orange, yellow, green, blue, indigo, and violet.</font></div><div><font><br></font></div><div><div><font>When atoms of different materials are excited by an electric current or other source of energy, they glow with a unique spectrum. Atoms of different elements have different colors in their spectra. These characteristic color patterns represent specific atoms, just as fingerprints serve to identify different people.</font></div><div><font><br></font></div><div><font>A diffraction grating acts like a prism, spreading light into its component colors. The light that you see from a light source is the sum of all these colors. Each color corresponds to a different frequency of light. The diffraction grating sorts light by frequency, with violet light (the highest frequency of visible light) at one end of the spectrum and red light (the lowest frequency of visible light) at the other.</font></div><div><font><br></font></div><div><font>When atoms in a dilute gas (like the mercury vapor in a mercury street light) radiate light, the light can be seen through a diffraction grating as a line spectrum, made up of bright lines of color. Each line in the spectrum of such a gas corresponds to one frequency of light emission, and is produced by an electron changing energy levels in the atom.</font></div><div><font><br></font></div><div><font>In solids, liquids, and densely packed gases, the situation is not so simple. As an atom emits light, it collides with other atoms. This changes the frequency of the light it emits. That's why solids, liquids, and dense gases have broad bands of light in their spectra.</font></div></div>\", \"closure_duration\": 5, \"created_at\": { \"$date\": \"2012-04-30T04:42:53.000Z\" }, \"duration\": 15, \"grades\": [3], \"links\": [{ \"_id\": { \"$oid\": \"4f9e185d7b922d000100000a\" }, \"url\": \"http://www.nasa.gov/pdf/58258main_Optics.Guide.pdf\", \"title\": \"Optics Guide\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"4f9ecfea7b922d0001000049\" }, \"url\": \"http://www.exo.net/~pauld/summer_institute/summer_day9spectra/spectra_exploration.html\", \"title\": \"Spectra Exploration\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"51806b551dcf6c000200000a\" }, \"url\": \"http://www.exploratorium.edu/spectroscope/\", \"title\": \"Exploratorium: How to Build a Spectroscope\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"518072001dcf6c0002000022\" }, \"note\": \"Few of us ever consider the similarity of light and radio waves, nor do we think of them in terms of radiation. In fact, visible light and radio waves make up part of a large category of radiation that physicists call electromagnetic waves. This video segment from NASA explores the electromagnetic waves that constitute the electromagnetic spectrum, comparing the different types of electromagnetic waves and explaining how each type of radiation affects our daily lives.\", \"title\": \"The Electromagnetic Spectrum: NASA\", \"url\": \"http://ca.pbslearningmedia.org/resource/phy03.sci.phys.energy.nasaspectrum/the-electromagnetic-spectrum-nasa/\" }], \"materials_note\": \"<div>In lieu of science journals, students may answer question posed in handout, <i>Mix Colors of Light; Make a Spectroscope</i> (see attachments).</div><div>Stickers are optional for decorating spectroscope.</div>\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f9ed2807b922d000100005f\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f87564edc4c210001000033\" }, { \"$oid\": \"4f9e1f217b922d000100003a\" }, { \"$oid\": \"4f9ee29d7b922d0001000064\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4f875d0cdc4c21000100004d\" }, { \"$oid\": \"4f9e18907b922d0001000010\" }, { \"$oid\": \"4f9e18a47b922d0001000014\" }, { \"$oid\": \"4f9e18c77b922d0001000018\" }], \"note\": \"\", \"objective\": \"<p><font>Make a&nbsp;</font><b>spectroscope</b> to demonstrate&nbsp;that white light can be separated into those component colors, forming a light&nbsp;spectrum.</p><p>Use a spectroscope to look at\\r\\ndifferent kinds of light:<font>&nbsp;incandescent, fluorescent, and white computer screen.</font></p>\", \"procedure\": \"<ol><li>A spectroscope is a device that can be used to look at the group of wavelengths of light given off by an element. The special paper, diffraction grating, splits the beams of light, allowing us to see the different colors. The ridges on the paper help disperse the light. If you smudge the paper or scratch it, it won't work as well.</li><li><font>Find the sticker with the hole in the center. Place one of the small squares of&nbsp;</font>diffraction grating on the sticky side of the circle sticker over the hole in the center of the circle.</li><li>Place the sticky dot, that now has the&nbsp;diffraction gratings stuck to its center, over one end of the cardboard tube &nbsp;and fold the edges down to hold it in place.</li><li>Fold the other circle sticker in half and carefully cut on the line so that you have two halves.</li><li>Carefully lay one half of the sticker over the second end of the tube.</li><li>Take the other half of the sticker and lay it over the second end of the tube, so that it almost meets the other half and produces a very narrow slit.</li><li>Point the&nbsp;spectroscope at a light source in the room - incandescent and/or fluorescent lights, a white computer screen, or out the&nbsp;window.</li><li>Make sure the students know <b>Never To Look Directly at the Sun, even with a Spectroscope!</b></li><li>Notice the colorful patterns that you see. Choose one rainbow to focus on. What colors do you see? Try to name them in the order that you see them (violet/blue will be closest to the dot/slit for each of the rainbows, red will be the furthest).</li><li>Find at least one difference between the rainbow produced by incandescent light compared to that produced by a florescent bulb.&nbsp;Some students may have noticed that a&nbsp;fluorescent&nbsp;bulb spectrum may have more pronounced lines of color within the rainbow, while the incandescent bulb produces a more continuous rainbow.</li><li>Some other suggested light sources are a candle flame, the flame from a Bunsen burner, a flashlight, a Coleman lantern, yellow street lights (sodium produces the color), blue street lights (mercury vapor produces the color), neon signs, and slide projector lamps.</li><li><font>Reiterate that when the students take their spectroscope&nbsp;home, they must not point it at the sun!</font></li></ol>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000050\" }, { \"$oid\": \"4f28bdf6023c640001000062\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<font>Ask if anyone has seen a rainbow. Ask if they've noticed colors in water.</font><div><font>Drops of water in the sky can act like a prism. The prism separates white light into bands of color.</font></div><div><br><div>We'll make a&nbsp;spectroscope&nbsp;to exam how an instrument can separate white light.</div><div><font><br></font></div><div><font>Remind students of the steps of the scientific process:</font></div><div><ol><li><font>Ask a question.</font></li><li><font>Form a hypothesis.</font></li><li><font>Test your hypothesis.</font></li><li><font>Draw conclusions.</font></li></ol><div>You may use this activity as an experiment (e.g. hypothesis, I think my spectroscope will separate the white light into red, yellow and blue bands) or a demonstration.</div></div></div>\", \"term_ids\": [{ \"$oid\": \"4f9e1cf37b922d0001000026\" }, { \"$oid\": \"4f9e1d6a7b922d000100002a\" }, { \"$oid\": \"4f9e1d9e7b922d000100002e\" }, { \"$oid\": \"4f9e1dcd7b922d0001000032\" }, { \"$oid\": \"4f9e20187b922d000100003e\" }, { \"$oid\": \"4f9ed05b7b922d000100004d\" }, { \"$oid\": \"4f9ed0887b922d0001000051\" }, { \"$oid\": \"4f9ed0a97b922d0001000055\" }, { \"$oid\": \"4f9ed0f17b922d0001000059\" }], \"title\": \"Make a Spectroscope\", \"updated_at\": { \"$date\": \"2013-05-01T01:48:12.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"4f9f70f64d6c1d0001000006\": { \"_id\": { \"$oid\": \"4f9f70f64d6c1d0001000006\" }, \"assessment\": \"<ul><li>Check each student's journal or KWL About Earthworms to see what they have learned.</li><li>Informally assess students' understanding of earthworm habitat throughout observations.</li><li>Look for student's self-reflection upon their predictions and observations.</li><li>Have each student write a revision of what they observed in their journal, checking for science vocabulary terms, etc.</li><li>Summative vocabulary test.</li></ul>\", \"assistant_setup\": \"<div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<ul>\\r\\n<li class=\\\"li1\\\">After checking into the school office, retrieve the H4S bin in the designated area.</li>\\r\\n<li class=\\\"li1\\\">Based on the procedure, assemble the materials into appropriate groups.</li>\\r\\n<li class=\\\"li1\\\">Put on the H4S blue vest located in the materials bin.</li>\\r\\n<li class=\\\"li1\\\">Assist during the activity.</li>\\r\\n<li class=\\\"li1\\\">Wipe the plastic bins clean and throw away consumable items.</li>\\r\\n<li class=\\\"li1\\\">Repack the materials bin and return to the designated area.</li>\\r\\n</ul></div>\", \"attachments\": [{ \"_id\": { \"$oid\": \"5061f2fb95dae6000200000a\" }, \"caption\": \"KWL Earthworms\", \"w\": 612, \"h\": 792, \"attachment\": \"461f80be95.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 32465 }], \"background\": \"<font>Facts about earthworms:</font><div><ul><li>Scientific name for the common earthworm is Lumbricus terrestris.</li><li>Earthworms are invertebrates—they don't have an internal skeleton made of bone.</li><li>There isn't a fossil record of earthworms because they are soft-bodied invertebrates.</li><li>Most earthworms will live for about six years in the wild.</li><li>They are herbivores. Their diet consists of roots, leaves, and soil.</li><li>Most common earthworms are only a few inches (7 to 8 cm) long, but they can be up to 14 inches (35 cm).</li><li>They have been found to weigh up to 0.39 oz (11.2 g).</li><li>Many people believe that if a worm is cut in half, the two pieces will grow into full-size worms. This is not true.</li><li>Earthworms are different from the worms typically used in vermicomposting - red worms (also called red wigglers or the scientific name of&nbsp;Eisenia fetida).</li><li><font>This activity, making a mini-worm habitat, will allow the students to understand the process of converting organic waste into usable fertilizer. Students will observe how living and nonliving things interact with one another.</font></li></ul></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-05-01T05:13:26.000Z\" }, \"duration\": 45, \"grades\": [3, 5], \"links\": [{ \"_id\": { \"$oid\": \"4f9f71134d6c1d000100000a\" }, \"note\": \"This is a video from PBS Learning Media. Please register (you may do so temporarily) to enjoy their professional educational videos for free. \", \"title\": \"Decomposers Video\", \"url\": \"http://ca.pbslearningmedia.org/resource/tdc02.sci.life.oate.decompose/decomposers/\" }, { \"_id\": { \"$oid\": \"5061399d83f6050002000078\" }, \"note\": \"This is a video from PBS Learning Media.&nbsp;Please register (you may do so temporarily) to enjoy their professional educational videos for free. \", \"title\": \"Wonderful Worms\", \"url\": \"http://ca.pbslearningmedia.org/resource/vtl07.la.rv.text.wonderworm/wonderful-worms/\" }, { \"_id\": { \"$oid\": \"5061f3e695dae6000200000e\" }, \"url\": \"http://www.uen.org/Lessonplan/preview.cgi?LPid=18886\", \"title\": \"Source\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"50620dec95dae60002000013\" }, \"note\": \"\", \"title\": \"Mail Order European Nightcrawlers\", \"url\": \"http://www.thewormfarm.net/products/69-Eisenia-Hortensis-European-Nightcrawlers/\" }, { \"_id\": { \"$oid\": \"50620fe695dae60002000017\" }, \"url\": \"http://kids.nationalgeographic.com/kids/animals/creaturefeature/earthworms/\", \"title\": \"National Geographic Kids - Earthworm Facts\", \"note\": \"\" }], \"materials_note\": \"<div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<ul>\\r\\n<li class=\\\"li1\\\">handout - KWL Earthworms</li>\\r\\n<li class=\\\"li1\\\">coarse sand is best</li>\\r\\n<li class=\\\"li1\\\">a good sturdy container for this activity is a plastic restaurant tray with a clear top and bottom, either way, the container must be clear so the worms can be viewed changing the environment, and have breathing holes.</li>\\r\\n<li class=\\\"li1\\\">fabric must be black and big enough to cover each worm container, if fabric is unavailable, use black construction paper.</li></ul></div>\", \"materials_per_clas_ids\": [{ \"$oid\": \"506213d895dae6000200001b\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f2b1e4fccb71d0001000015\" }, { \"$oid\": \"4f459141eeaf0a0001000017\" }, { \"$oid\": \"4f87563adc4c21000100002f\" }, { \"$oid\": \"4f875ab0dc4c210001000040\" }, { \"$oid\": \"4fa0cbcd0d3d05000100003f\" }, { \"$oid\": \"5056430fbc0c230002000008\" }, { \"$oid\": \"50564b9bbc0c23000200002f\" }, { \"$oid\": \"506130ed83f6050002000054\" }, { \"$oid\": \"5061375f83f605000200005f\" }, { \"$oid\": \"5061377083f6050002000062\" }, { \"$oid\": \"5061383283f605000200006a\" }, { \"$oid\": \"5061384f83f605000200006c\" }, { \"$oid\": \"5061386783f605000200006e\" }, { \"$oid\": \"5061388583f6050002000070\" }, { \"$oid\": \"506138b583f6050002000074\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"\", \"objective\": \"<div><font>Students will describe and observe the process of converting organic waste into fertilizer as well as observe the connection between living and non-living things in a small ecosystem.</font></div><div><font><br></font></div>\", \"procedure\": \"<ol><li>Watch both worm videos (see links below).</li><li><font>Ask the inquiry discussion questions again and/or pose a new question or two relating to the video and have students answer in their science journals.</font></li><li><font>Pass out the KWL Earthworms handout and have students answer the first two questions before starting the activity or write the answers in science journals.</font></li><li><font>The number of clear plastic containers you have will determine how many groups you will have. If you have one large aquarium-type container, do the activity as a teacher demonstration, with the students stopping to observe and take notes as you go. Make sure that each student is clear about his/her job (e.g. gravel measurer or pourer, first, second or third soil measurer, water sprayer, etc.), assigning small/large jobs based on the number of students in each group. All students should record observations.</font></li><li><font>Measure and cut a piece of 12” x 22” newspaper and tear the newspaper strips of approximately 4-6\\\" (accuracy at this step is not important).</font></li><li><font>Cover the bottom of container with gravel in a nice even layer (about 1-2 cups, depending on the size of your container).</font></li><li><font>Cover gravel with 4 cups of soil (do not pack down soil).</font></li><li><font>Add 2 cups of course sand and again lightly smooth it out.</font></li><li><font>Add 3 more cups of soil on top of the course sand (again making a nice layer look). Then spray a mist of water to moisten the soil.</font></li><li><font>Once most of the groups reach this step, teacher should stop the class and demonstrate how to do steps 11 and 12.</font></li><li><font>Saturate newspaper strips by dipping the strips into a container of water. Wring them out so that the newspaper is moist, but not dripping.</font></li><li><font>Break more pieces of the wet newspaper and separate by placing the pieces around the inside of container uniformly.</font></li><li><font>Add 1/2 more cup of soil (give it a little moisture).</font></li><li><font>Optional - You may want to have students measure the worms for fun and use Worm Rulers (see source link). You also may want to weigh the worms and divide that in half to determine how much organic food your worms will enjoy feasting on.</font></li><li><font>Now, place a little organic matter (e.g., about two 1/4” slices of ripened banana or other ripened fruit will do) in the worm mini habitat. Place the food on the side of the container, pushing in the soil just enough to cover the top of the food with soil. * Don't worry too much about accuracy right now, because the worms have newspaper to eat and that weighs approximately what they do.</font></li><li><font>Science aid and teacher will pass out worms once they check that the worm habitat is made according to instructions.</font></li><li><font>Observe how worms they avoid the light.</font></li><li><font>After observing the worms, ask students to draw their new worm habitat with the different layers. Have students draw the worms and organic matter too! Then have them write in their journals or use The KWL About Earthworms worksheet.</font></li><li><font>Wrap black fabric around the top of the container. Place a rubber band or tape around to hold it in place.</font></li><li><font>Then, place the worm habitat in a dark box or cupboard and observe daily (preferably at the same time).</font></li><li><font>Have students note any changes and inferences in their journals.</font></li><li><font>Keep worm habitat in the classroom for three to four weeks to allow for ample observation. Depending on grade level, have students collect data such as change in weight of habitat, height of soil, number of visible worms, etc. Record the data in charts, graphs, or labeled diagrams. Compare the data from each group and draw inferences and conclusions from that data. This is an open-ended activity with myriad opportunities for scientific study.</font></li><li><font>Go to this <a href=\\\"http://www.calrecycle.ca.gov/Education/curriculum/ctl/K3Module/Unit3/Lesson2.pdf\\\">link</a> for examples of how to take advantage of the learning opportunities this worm habitat affords.</font></li></ol>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000055\" }, { \"$oid\": \"4f28bdf6023c64000100005e\" }, { \"$oid\": \"4f28bdf6023c6400010000ac\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<font>Before watching the video, use these questions as a springboard:</font><div><br></div><div><ul><li>Review vocabulary.</li><li>Review what living and nonliving things are and have the students give examples.</li><li>Discuss how worms interact with living and nonliving things.</li><li><font>Ask the students how earthworms affect our living conditions, or what they think earthworms do. Ask them if they feel earthworms help or hurt our environment.</font></li><li>\\\"When you see sprouts, give thanks to the decomposers.\\\" Explain what this means, using examples.</li><li>Earthworms are considered the \\\"king of decomposers.\\\" Can you infer why this is true?</li></ul></div>\", \"term_ids\": [{ \"$oid\": \"50580c54443f30000200002a\" }, { \"$oid\": \"506135e983f605000200005b\" }, { \"$oid\": \"5061360a83f605000200005d\" }, { \"$oid\": \"5062113b95dae60002000019\" }], \"title\": \"Make a Worm Mini-Habitat\", \"updated_at\": { \"$date\": \"2014-01-04T07:10:46.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"4fa0b76a0d3d050001000005\": { \"_id\": { \"$oid\": \"4fa0b76a0d3d050001000005\" }, \"assessment\": \"<font>Part A</font><div><ul><li>informally assess understanding of the terms,&nbsp;reduce, reuse, and recycle.</li><li>monitor discussion of how students can conserve at home and at school.</li></ul><div>Part B</div><div><ul><li>share results of water waste at school investigation.</li><li>check calculations of the amount of water wasted at school.</li><li>discuss the amount of water wasted and why it is important to improve water conservation practices at school.</li></ul><div>Part C</div></div><div><ul><li>formulate a list of at least five ways that their school can save water.</li></ul></div><div><br></div></div>\", \"assistant_setup\": \"<div><ul><li>Bring recycling items from home, or use items collected at the school site (see materials notes).</li><li>Retrieve timers from bins, one for each group.</li><li>Wait for instructions from teacher as to how you will help implement this activity.</li></ul></div>\", \"attachments\": [{ \"_id\": { \"$oid\": \"4fa0b7b50d3d05000100000d\" }, \"caption\": \"Reduce, Reuse, Recycle! Worksheet\", \"w\": 612, \"h\": 792, \"attachment\": \"ea4879c1e2.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 34510 }, { \"_id\": { \"$oid\": \"4fa0be060d3d05000100001f\" }, \"caption\": \"What Is Reduce, Reuse & Recycle?\", \"w\": 612, \"h\": 792612, \"attachment\": \"b105d33d9f.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 32567 }, { \"_id\": { \"$oid\": \"4fa0bfa20d3d050001000025\" }, \"caption\": \"Reduce, Reuse, Recycle Worksheet for Home\", \"w\": 612, \"h\": 792, \"attachment\": \"6cc20eabf0.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 38023 }, { \"_id\": { \"$oid\": \"4fa174f50d3d050001000061\" }, \"caption\": \"Team Worksheet - School Water Use\", \"w\": 612, \"h\": 792, \"attachment\": \"0ad195ad0a.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 34347 }], \"background\": \"<div><b><font><br></font></b></div><div><b><font>Here are some ways to save water at school:</font></b></div><div><font><br></font></div><div><font><b>Monitor Water Meter</b></font><div><font>Many buildings, including schools, may have unseen water leaks. Assure the school building does not have leaks by monitoring the water meter. Read the school's water meter and look at the meter again after two hours when no one has used any water. There are no leaks if the water meter reads exactly the same as the initial reading.</font></div><div><font><br></font></div><div><font><b>Repair Leaks</b></font></div><div><font>As soon as someone reports a leak, repair the dripping component by changing the washers. You can waste gallons of water annually when the faucet drips at a speed of just one drop per second. In addition, adjust or replace toilet handles that stick in the flushing position.</font></div><div><br></div><div><font><b>Insulate Pipes</b></font></div><div><font>Make sure the entire school building has insulated pipes. Hot water flows faster through insulated pipes, so less water is wasted while students wait for it to heat up.</font></div><div><font><br></font></div><div><font><b>Landscaping</b></font></div><div><font>Reduce wasted water by watering the lawn in the morning when the temperature and wind speeds are lower. This decreases water loss from evaporation. Assure the water sprinklers only water shrubs, flowers and grass by positioning sprinklers away from the pavement.</font></div><div><br></div></div>\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2012-05-02T04:26:18.000Z\" }, \"duration\": 45, \"grades\": [5], \"links\": [{ \"_id\": { \"$oid\": \"4fa0b7850d3d050001000009\" }, \"url\": \"http://greenschoolproject.com/resources/k-3worksheet2.pdf\", \"title\": \"Reduce, Reuse, Recycle!\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"4fa0b88c0d3d050001000017\" }, \"url\": \"http://greenschoolproject.com/default.aspx\", \"title\": \"Green School Project\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"4fa0bc400d3d05000100001b\" }, \"url\": \"http://www.youtube.com/watch?v=kS6JN67DWtc\", \"title\": \"YouTube-10 Ways to Go Green\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"4fa16a660d3d050001000047\" }, \"note\": \"\", \"title\": \"Silicon Valley must do its part to reduce plastic in oceans\", \"url\": \"http://www.mercurynews.com/opinion/ci_20525697/mercury-news-editorial-silicon-valley-must-do-its?IADID=Search-www.mercurynews.com-www.mercurynews.com\" }, { \"_id\": { \"$oid\": \"4fb1d4181b58ac000100000b\" }, \"url\": \"http://www.youtube.com/watch?v=GLgh9h2ePYw\", \"title\": \"The Majestic Plastic Bag - A Mockumentary\", \"note\": \"\" }], \"materials_note\": \"<font>Recycling items for this activity include samples of items which can be reduced (a cloth shopping bag to reduce the use of plastic bags), reused (an empty milk carton to use for a watering can), recycled (a newspaper to be sent to a recycling center and made into new paper).</font>\", \"materials_per_clas_ids\": [{ \"$oid\": \"4fa0b82b0d3d050001000013\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4fa16ee50d3d050001000059\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4fa0cbcd0d3d05000100003f\" }], \"note\": \"<div><font><b>Ten ways to Go Green:</b></font></div><div><b><br></b></div><div><b>1. Change a Light Bulb</b></div><div><div>Installing a compact fluorescent bulb (CFL) is the quickest, easiest way to save energy -- and money. Unlike incandescents, CFLs convert most of the energy they use into light rather than heat.</div><div><i>Good for You</i>: They consume about 75 percent less electricity and last up to 10 times longer (10,000 hours as opposed to 1,500). Replace one 75-watt incandescent bulb with a 25-watt CFL and save up to $83 over the life of the bulb.</div><div><br></div><div><div><font><b>2. Unplug Things That Glow</b></font></div><div><font>Anything that has an LED (light emitting diode) that glows even after you turn it off continues to draw power (that you pay for). Your TV, cell phone charger, and printer are likely culprits. Unplug the offenders from wall sockets and plug them into power strips instead. When you leave a room, flip the strip switch to cut the flow of electricity.</font></div><div><font><i>Good for You</i>: Unplug appliances and electronics that glow and you could save $200 a year.</font></div></div></div><div><font><br></font></div><div><font><div><b>3. Recycle Your Electronics</b></div><div>Americans tossed out a whopping 5.5 billion pounds of electronics -- TVs, stereos, cell phones, and computers -- in 2005, according to the Environmental Protection Agency. The result? Millions of pounds of chemicals and heavy metals ended up in the ground even though it's easier than ever to recycle electronics. The Consumer Electronics Association created mygreenelectronics.org to help people find a recycling resource in their area. The site also provides a list of electronics, from laptops to baby monitors, that are easier on the environment and your energy bill.</div><div><i>Good for You</i>: The average American household has three cell phones stashed in a drawer. Sell unused cell phones to greenphone.com. You'll receive about $35, and the phones will be refurbished and resold. If 1 million people recycled one cathode-ray tube TV this year, we'd keep 4 million pounds of lead out of the ground.</div><div><br></div><div><div><b>4. Audit Your Energy</b></div><div>It's easier to save energy when you know exactly how much and where you're using it. Investing in a home audit takes a couple of hours and pays off with a list of things you can do to curb consumption. Find an auditor through your utility company (at low or no cost), or hire one ($450-$650). A list of auditors certified by the nonprofit Residential Energy Services Network, is at resnet.us (click on Consumer Information).</div><div><i>Good for You</i>: On average, an energy audit shows how to save up to 30 percent on utility bills.</div></div><div><br></div><div><div><b>5. Support Local Farmers</b></div><div>If your food could talk, it would tell quite a tale. Typical grocery store produce travels nearly 1,500 miles before it ends up on your plate. All this traveling burns fossil fuels and results in carbon emissions -- a fancy term for pollution. Buying from local farmers means you're not only getting the freshest food possible, you're saving energy.</div><div><i>Good for You</i>: To find farmers nationwide, visit localharvest.org, sustainabletable.org, and the U.S. Department of Agriculture at www.ams.usda.govfarmersmarkets/map.htm.</div></div><div><br></div><div><div><b>6. Fix That Drip</b></div><div>When you next fill your water glass, think about this: We each use about 100 gallons a day, enough to fill 1,600 glasses. Household water consumption has increased by 200 percent since 1950, even though the population has grown by only 90 percent. As a result, more than 36 states are expected to face water shortages in the next six years. Stemming the flow is as easy as fixing a leaky faucet or toilet; a dripping faucet can waste up to 74 gallons a day, a leaking toilet up to 200 gallons a day.</div><div><i>Good for You</i>: Repair a leaky toilet and you can save $30 a year, which may not sound like much until you realize it means 73,000 gallons.</div></div><div><br></div><div><div><b>7. Let Your Grass Grow</b></div><div>Spending less time tending to your lawn actually makes it greener -- in every sense of the word. Most grass species fare best when they're kept at least 2 1/2 inches tall. The length creates more surface area to absorb sunlight, which creates thicker turf and deeper roots, which means you won't need to water as often.</div><div><i>Good for You</i>: Save money by letting grass clippings remain on your lawn; it adds nitrogen to the soil and discourages weed seeds from germinating. You'll need less fertilizer and herbicide. Plus, leaving clippings on lawns means less in landfills; in 2005 Americans disposed of more than 12 million tons of yard waste.</div></div><div><br></div><div><div><b>8. Look for the Label</b></div><div>When it's time to replace a household appliance, choose a product with an Energy Star label. Sponsored by the EPA and the Department of Energy, the Energy Star program rates products from light bulbs to kitchen appliances. Energy Star labels guarantee that products are energy-efficient. For example, a battery charger labeled with the Energy Star logo will use 35 percent less energy than a standard one. You may even be eligible for a tax credit when you purchase an Energy Star product. Information at energystar.gov.</div><div><i>Good for You</i>: A household with Energy Star products uses about 30 percent less energy than the average household -- an annual savings of about $570.</div></div><div><br></div><div><div><b>9. Do Full Loads</b></div><div>Whenever you wash just a few clothes or dishes at a time rather than waiting for a full load to accumulate, you're wasting water, power, and money. The average American family of four washes about 540 loads of laundry a year, which consumes up to 21,000 gallons of water, and more than 150 loads of dishes, which uses about 1,500 gallons. Most of the energy consumed by washers goes toward heating the water -- about 90 percent in the clothes washer and 80 percent in the dishwasher. Combining half-loads, choosing short cycles, and using cold or warm rather than hot water in the clothes washer racks up savings.</div><div><i>Good for You</i>: Wash two fewer loads of clothes and one fewer load of dishes a week and save up to 4,500 gallons of water a year.</div></div><div><br></div><div><div><b>10. Work the Critters</b></div><div>Your backyard ecosystem is as intricate as any wild patch of land, and it pays in many ways to enlist its creatures on your side. Birds eat many insects; they just need a water source and trees and shrubs for cover and nesting. Many insects are beautiful -- and beneficial. Ladybugs aren't just cute; they are voracious eaters of aphids.</div><div><i>Good for You</i>: To understand which backyard insects are garden friends, visit garden.org and click on Pest Control Library for photos.</div></div><div><br></div><div><br></div></font></div>\", \"objective\": \"<div><br></div>The students will:<div><ul><li>define reduce, reuse, and recycle.</li><li>recommend ways to reduce, reuse and recycle at school.</li><li>calculate the amount of water wasted at school.</li><li>provide a rationale for implementing water conservation practices at school.</li></ul></div>\", \"procedure\": \"<div><b>Part A - Making a Change at School - Reduce, Reuse, Recycle</b></div><ol><li>Show the&nbsp;<i>YouTube Go Green Video</i>&nbsp;video.</li><li>Share the information from the&nbsp;video&nbsp;or web site highlighting the definitions of reduce, reuse, and recycle.</li><li>Show the relia&nbsp;of items which can be reduced (a cloth shopping bag to reduce the use of plastic bags), reused (an empty milk carton to use for a watering can), recycled (a newspaper to be sent to a recycling center and made into new paper).</li><li>Pass out handout,&nbsp;<i>What Is Reduce, Reuse &amp; Recycle? </i>for students to read aloud.</li><li>Pass out the <i>Reduce, Reuse, Recycle </i>Worksheet for School.&nbsp;</li><li>Have the students complete the worksheet by writing a brief definition of each word.&nbsp;</li><li>Brainstorm ways the students can reduce, reuse, and recycle at school. These may be written on the worksheet or as a graphic organizer for the whole class (e.g. a mind map). Remember to include recycling printer cartridges, cell phones, laptops, and small electronics.</li><li>Pass out the<i> Reduce, Reuse, Recycle </i>Worksheet for Home. Have the students take the papers home to complete with their families.</li></ol><div><b>Part B - Making a Change at School</b></div><ol><li>Divide into teams of four or five.</li><li>Pass out:&nbsp;<i>Team Worksheet - School Water Use</i></li><li>Tell class their roll is to survey the school building and document the major uses of water. They will also search for leaks and other obvious problems.</li><li>Assign teams to different fixtures/installations.</li><li><font>If they find a leak, estimate or&nbsp;measure&nbsp;the water&nbsp;waste&nbsp;by placing a cup under the leak and timing it for one minute. Return to class to do the following: measure&nbsp;the volume&nbsp;water, then multiply by sixty to get the amount of wate lost every hour. Multiply again by twenty-four to find the amount of water lost each day.&nbsp;</font></li></ol><div><div><b>Part C - Making a Change at School</b></div><ol></ol></div><ol><li>If possible,&nbsp;arrange for individual responsible for handling water at your school (fiscal manager, accountant, maintenance department, building manager, etc.) to speak in your class at this time.</li><li>Have students ask their own questions. Use the following questions if necessary:</li><ul><li><font>What are the top water-consuming activities at the school (e.g watering grounds,&nbsp;flushing&nbsp;toilets, kitchen use, etc.)? On&nbsp;what&nbsp;data tod you base this conclusion?</font></li><li><font>In which areas do you tink water is used most&nbsp;inefficiently?</font></li><li>Have you noticed specific water fixtures that leak persistently?</li><li>In your opinion, what measures could be taken to conserve water most effectively at this school?</li><li><font>Are you interested in more precisely&nbsp;documenting&nbsp;the school's wate use (e.g. where the highest&nbsp;consumption&nbsp;takes place, etc.)?</font></li></ul></ol>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000099\" }, { \"$oid\": \"4f28bdf6023c6400010000a5\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"<div><ul><li>Contact school principal and&nbsp;maintenance&nbsp;crew to let them know that your class will be doing an activity about finding water waste at their school. If possible, identity and arrange for the offices and individual responsible for handling water at your school (fiscal manager, accountant, maintenance department, building manager, etc.) to speak in your class about their efforts to conserve water (see questions for those personnel in the procedure section).</li><li>Prepare <i>YouTube Go Green Video</i> for Part A</li><li>Copy worksheets from attachment section</li><li>If possible, prior to activity have the class read the SJ Mercury News article:&nbsp;<i>Silicon Valley must do its part to reduce plastic in oceans.</i>&nbsp;It is provided in the <i>links</i> section.&nbsp;</li></ul></div>\", \"term_ids\": [{ \"$oid\": \"4fa16e040d3d05000100004b\" }, { \"$oid\": \"4fa16e3f0d3d05000100004f\" }, { \"$oid\": \"4fa16e800d3d050001000054\" }, { \"$oid\": \"4fa176fc0d3d050001000065\" }], \"title\": \"Going Green at School\", \"updated_at\": { \"$date\": \"2012-07-07T19:09:49.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"4fa5b9e74497bf0001000006\": { \"_id\": { \"$oid\": \"4fa5b9e74497bf0001000006\" }, \"assessment\": \"I looked at....<div>A drawing of what I saw...</div><div>Some things I noticed...</div>\", \"assistant_setup\": \"<ol><li>Make copies of handouts per teacher's instructions.</li><li>Place copies of the&nbsp;<i>Lifecycle of a Ladybug - Photos </i>inside of the acrylic stands, one stand per group.</li><li>The adult beetles may fly away when the lid is removed, so if possible,&nbsp;place the container in a refrigerator for 10-20 minutes to&nbsp;slow down the ladybugs if they are agitated. Tip the container and tap it&nbsp;to gather a few ladybugs at a time for each bug magnifying jar.</li><li>Divide your ladybugs into the bug magnifying jars in advance for&nbsp;groups to observe.</li><li>Wait for further instructions from the teacher.</li></ol>\", \"attachments\": [{ \"_id\": { \"$oid\": \"4fa5c38d4497bf0001000020\" }, \"caption\": \"Lifecycle of a Ladybug\", \"w\": 611, \"h\": 791, \"attachment\": \"36032c3857.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 478647 }, { \"_id\": { \"$oid\": \"4fa5c90d4497bf000100002d\" }, \"caption\": \"Ladybug Fact Sheet\", \"w\": 612, \"h\": 792612, \"attachment\": \"9e7a8c46fd.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 56998 }, { \"_id\": { \"$oid\": \"4fa812d1ee52d3000100000f\" }, \"caption\": \"Drawing of Ladybug\", \"w\": 387, \"h\": 313, \"attachment\": \"06a58c109a.png\", \"content_type\": \"image/png\", \"file_size\": 18610 }, { \"_id\": { \"$oid\": \"4fab4796feccef0001000006\" }, \"caption\": \"Lifecycle of a Ladybug - Photos\", \"w\": 612, \"h\": 792, \"attachment\": \"a518b849e7.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 681381 }], \"background\": \"<div><font>Note ladybug definition in vocabulary section.</font></div><div><font><br></font></div><font>The lifecycle of the ladybug is very similar to a butterfly, which many students have learned by second grade.</font><div><br></div><div>The four stages are: the egg, larva, pupa, and adult. The first three stages vary from 7-21 days each depending on the weather, and food supplies. The adult stage lasts between 3-9 months depending on weather, length of hibernation, food supplies and, of course, predators.</div><div><br></div><div><font>Review the attached&nbsp;Ladybug Fact Sheet for information regarding ladybugs.</font></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-05-05T23:38:16.000Z\" }, \"duration\": 45, \"grades\": [0, 1, 2, 3], \"links\": [{ \"_id\": { \"$oid\": \"4fa5bcba4497bf0001000012\" }, \"url\": \"http://www.ehow.com/video_4753466_what-do-ladybugs-eat.html\", \"title\": \"What do ladybugs eat?\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"4fa5e7b44497bf0001000042\" }, \"url\": \"http://www.mda.state.mn.us/kids/~/media/Files/kids/pestpatrolactionkit/lookingatlbfall.ashx\", \"title\": \"Pest Patrol Lesson\", \"note\": \"\" }], \"materials_note\": \"\", \"materials_per_clas_ids\": [{ \"$oid\": \"4fa5c4ce4497bf0001000026\" }, { \"$oid\": \"4fa5cc764497bf000100003b\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f2b1e4fccb71d0001000015\" }, { \"$oid\": \"4fa5bde44497bf0001000018\" }, { \"$oid\": \"4fab49b1feccef000100000d\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4fa0cbcd0d3d05000100003f\" }], \"note\": \"\", \"objective\": \"<div>Students closely observe&nbsp;and inspect purchased&nbsp;convergent ladybugs, noting&nbsp;their reactions to stimuli and&nbsp;recording observations and&nbsp;further questions before&nbsp;releasing them outdoors.</div><div><br></div><div>Students learn about the lifecycle and other facts about ladybugs.</div><div><br></div>\", \"procedure\": \"<ol></ol><ol><li>Review vocabulary.</li><li>Show the video <i>What Do Ladybugs Eat?</i></li><li>Answer some of the questions the students asked after viewing the video.</li><li>Discuss aphids and how ladybugs keep that pest population in check. Review any previous teachings regarding lifecycle.</li><li>Pass out the three handouts:<i>&nbsp;</i><i>Lifecycle of a Ladybug,&nbsp;</i><i>Lifecycle of a Ladybug - Photos</i>&nbsp;(in the acrylic stands, one per group) and&nbsp;<i>Drawing of a Ladybug</i>.</li><li><font>Have students note the differences between the&nbsp;traditional&nbsp;cartoonish drawing of an adult ladybug in the&nbsp;<i>Lifecycle of a Ladybug</i><i> </i>handout<i>&nbsp;</i>and the black and white sketch in the other handout and the&nbsp;</font><i>Lifecycle of a Ladybug - photo.</i></li><li><font>Have students identify each of the four stages of the lifecycle:&nbsp;Egg, Larva, Pupa, and Adult.&nbsp;</font></li><li>Tell the class that they will be observing ladybugs and that they will use the bug jars and hand lenses to note subtle differences between the adult ladybugs, as well as search for the other three stages of ladybugs (egg, larva and pupa).</li><li>Frame a sentence or two in their science journals or prepare&nbsp;observation sheets in their journals.</li><li><div>Tell them that they should observe closely so they can make good drawings.</div></li><li>Show children how to handle the ladybugs to avoid harming them. If a ladybug escapes onto the table, gently flick with a finger to put the ladybug on its back. Let it grab onto your finger and then flick it back into the jar. Gently hold the beetles between the thumb and forefinger. They can easily be squeezed to death, but they will warn you when you have gone too far by secreting an amber fluid. (This is a defensive move so predators will not find them tasty.) Students should wash hands of any ladybug fluids and avoid touching their eyes until after hand washing.</li><li>Pass out magnifying glasses, then ladybugs in their containers.</li><li>Observe ladybugs. Allow plenty of time and offer reminders that living things should be treated with respect.</li><li>If time allows, offer food scraps for students to put in their containers and record observations.</li><li>Stop observations. Finish the KWL chart, do a pair/share, or other informal assessment.</li><li>Return to observe the ladybugs to see if they have eaten the food.</li><li>After completing observations, be sure to include release as part of this&nbsp;activity. Open the&nbsp;containers and the ladybugs will leave. Remind students of the ladybug’s&nbsp;life cycle. If it’s fall, these ladybugs may fly away to find shelter to&nbsp;overwinter. If it’s spring, they may find places to lay eggs.</li></ol><div><div><br></div></div>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000005\" }, { \"$oid\": \"4f28bdf6023c640001000006\" }, { \"$oid\": \"4f28bdf6023c640001000019\" }, { \"$oid\": \"4f28bdf6023c640001000030\" }, { \"$oid\": \"4f28bdf6023c640001000053\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<font><div>Brainstorm and list students’ questions using a KWL chart, mind map or other graphic organizer.</div><div>They may wonder:</div><div><ol><li>How long do&nbsp;ladybugs live?</li><li>What do they eat?</li><li>How do their mouths work?</li><li>Can they fly?</li><li>Are they insects, and how do we know?</li><li>How many spots do they have?</li><li>What will they do if we touch them?</li><li>What do they do in darkness?</li><li>What&nbsp;other stimuli could we test on the ladybugs?</li><li>Will they eat each other?</li><li>Can&nbsp;they fly?</li></ol>Remember: Teachers don’t have to know the answers; this is&nbsp;what scientists do. Your class will be able to answer some of the questions&nbsp;as you observe and search for answers. Most of the answers are listed in the attachment entitled:<i>&nbsp;Ladybug Fact Sheet</i></div></font>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"4fa5ba2f4497bf000100000a\" }, { \"$oid\": \"4fa5ba944497bf000100000e\" }, { \"$oid\": \"4fa5c9fc4497bf0001000031\" }, { \"$oid\": \"4fa5ca384497bf0001000035\" }, { \"$oid\": \"4fa81171ee52d30001000007\" }, { \"$oid\": \"4fa8127eee52d3000100000b\" }], \"title\": \"Ladybug Observations\", \"updated_at\": { \"$date\": \"2012-10-29T18:49:37.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"4fa66f22c2feba0001000014\": { \"_id\": { \"$oid\": \"4fa66f22c2feba0001000014\" }, \"assessment\": \"\", \"assistant_setup\": \"\", \"background\": \"\", \"closure_duration\": 4, \"created_at\": { \"$date\": \"2012-05-06T12:31:30.000Z\" }, \"duration\": 4, \"grades\": [0, 1], \"materials_note\": \"\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f459141eeaf0a0001000017\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f459184eeaf0a0001000027\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f459166eeaf0a000100001f\" }], \"note\": \"\", \"objective\": \"\", \"procedure\": \"\", \"reflection\": \"\", \"standard_ids\": [], \"status\": \"draft\", \"subject\": \"phys\", \"teacher_setup\": \"\", \"term_ids\": [{ \"$oid\": \"4f9ed05b7b922d000100004d\" }], \"title\": \"......\", \"updated_at\": { \"$date\": \"2012-05-06T12:31:30.000Z\" }, \"user_id\": { \"$oid\": \"4f9b178c4da7c30001000017\" }, \"T\": \"act\" }, \"4fc40adf4965a50003000005\": { \"_id\": { \"$oid\": \"4fc40adf4965a50003000005\" }, \"assessment\": \"\", \"assistant_setup\": \"\", \"background\": \"\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2012-05-28T23:31:44.000Z\" }, \"duration\": null, \"grades\": [0], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"\", \"procedure\": \"\", \"reflection\": \"\", \"standard_ids\": [], \"status\": \"draft\", \"subject\": \"earth\", \"teacher_setup\": \"\", \"term_ids\": [], \"title\": \"ken's junk\", \"updated_at\": { \"$date\": \"2013-03-17T18:44:57.000Z\" }, \"user_id\": { \"$oid\": \"4fc401a25c38c5000300000a\" }, \"T\": \"act\" }, \"4fc454d9a4d1f8000300000d\": { \"_id\": { \"$oid\": \"4fc454d9a4d1f8000300000d\" }, \"assessment\": \"<div>Formative assessments during activities through teacher guided inquiry.</div>Spend some more time exploring non-newtonian fluid at home.\", \"assistant_setup\": \"<ol><li>Divide cornstarch, laundry starch and white glue into small cups according to measurements (e.g. if there are six groups, put 1/2 cup of cornstarch into each of the six plastic shoeboxes) and using marker or masking tape, label each cup to identify the substance.</li><li>reserve the salt, water and food coloring to add during the activity.</li><li>Fill two buckets of water and have the measuring cup ready for when the students are ready to add the water.</li><li><font>according to the teacher's&nbsp;instructions, pass out the materials. You may be in charge of distributing the drop of green food coloring and pinch of salt, depending on the teacher's management decisions.</font></li><li><font>be ready to help during the activity.</font></li></ol><div><br></div>\", \"background\": \"<div><font>What is Oobleck?</font></div><div><font><br></font></div><div><font>Oobleck is a type of non-Newtonian fluid. Most fluids we know of are considered as Newtonian fluids, but non-Newtonian fluids are a strange and perplexing group of fluids. When a force (ex. poking, rolling, stirring) is applied to a non-Newtonian fluid, the viscosity (resistance to flow) of the fluid increases. In simple terms, any force you exert on a non-Newtonian fluid will make the fluid behave more like a solid. The more force you exert, the harder the fluid becomes. Strange but true! Other types of non-Newtonian fluids include quicksand, ketchup, and blood.</font></div><div><font><br></font></div><div>Oobleck seems like it is at the same time a solid and a liquid, but in scientific terms, it is impossible for something to be both a solid and liquid at the same time. The conditions under which Oobleck behaves like a solid versus a liquid are as follows:</div><div><ul><li><font>applying a constant force to the Oobleck and it will act like a solid,&nbsp;</font>when the force is stopped, Oobleck becomes liquidy again</li><li>when Oobleck is heated or frozen it will harden, if the hardened Oobleck is mixed with regular Oobleck, it will revert to it's original state.</li></ul></div>\", \"closure_duration\": 15, \"created_at\": { \"$date\": \"2012-05-29T04:47:21.000Z\" }, \"duration\": 30, \"grades\": [3], \"links\": [{ \"_id\": { \"$oid\": \"4fc45816a4d1f80003000019\" }, \"url\": \"http://kms.kapalama.ksbe.edu/projects/oobleck/projectdescrip.html\", \"title\": \"Source\", \"note\": \"\" }], \"materials_note\": \"<font>If possible use green food coloring to match Dr. Suess story.</font><div><br><div><b>Oobleck</b></div><div>Materials for 1 group</div><div>1/2 cup cornstarch&nbsp;</div><div>1/4 cup water&nbsp;</div><div>1 drop of green food coloring</div><div><br></div><div><b>Glurch</b></div><div>3/4 cup liquid laundry starch&nbsp;</div><div>1/2 cup white glue&nbsp;</div><div>a pinch of salt&nbsp;</div></div>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f459166eeaf0a000100001f\" }, { \"$oid\": \"4f601e97da72410001000028\" }, { \"$oid\": \"4fc3fa657fcc320003000011\" }, { \"$oid\": \"4fc3fa937fcc320003000015\" }, { \"$oid\": \"4fc3faf57fcc32000300001d\" }, { \"$oid\": \"4fc40a6c5c38c50003000024\" }, { \"$oid\": \"4fc4552ca4d1f80003000015\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"\", \"objective\": \"\\r\\n\\r\\n<p class=\\\"p1\\\">\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n</p><p class=\\\"p1\\\">\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n</p><p class=\\\"p1\\\">Spend some time exploring non-newtonian fluid and examining states of matter.</p><p></p><p class=\\\"p1\\\">Practice scientific process skills by developing questions and testing hypotheses when you compare to unfamiliar substances.&nbsp;</p><p></p>\", \"procedure\": \"\\r\\n\\r\\n<p class=\\\"p1\\\"><b>Oobleck</b></p><p class=\\\"p1\\\"><ol><li>Put the water and food coloring in a large bowl and begin adding the cornstarch&nbsp;while you stir or knead.&nbsp; Continue adding cornstarch until you have oobleck.</li><li>Students can take oobleck home in Ziploc bags.</li><li>Do not put oobleck down the drain or it will clog pipes. You can allow the cornstarch&nbsp;to settle, pour off the water and discard the solids in the trash.</li><li>Oobleck will get moldy if left out, but may be kept in the refrigerator for several&nbsp;days.</li></ol></p><p class=\\\"p1\\\"><b>Glurch</b></p><p class=\\\"p1\\\"><ol><li>Stir together ingredients until they combine, then turn out the mixture and knead&nbsp;until firm. If it seems too runny, add a little more salt.</li><li>Have students try rolling the glurch into a ball.&nbsp; Let it rest in the palms of their hands.&nbsp;Stretch it out slowly. Pull it apart suddenly. How is it similar to oobleck? How is it&nbsp;different?</li></ol><b>Glurch vs. Oobleck&nbsp;</b></p>\\r\\n<p class=\\\"p1\\\">Have students compare the properties of theses two non-newtonian fluids by designing competitions between them.</p>\\r\\n<p class=\\\"p1\\\"><ul><li>Which fluid spreads farther when equal amounts are placed on a desk?</li><li>Which can be poured faster from one container to another?</li><li>Which can hold a Popsicle stick upright for longest? &nbsp;</li></ul></p>\\r\\n<p class=\\\"p2\\\">When each person has written these first 2 observations down, cut a hole in the bag and give each student a small handful of Oobleck to explore.</p>\\r\\n<p class=\\\"p1\\\">Students should write down 3 ways that oobleck is like a solid and 3 ways oobleck is like a liquid.</p>\\r\\n<p class=\\\"p1\\\">After observation time, let students wash hands and come to the carpet with their observations.</p><p></p><p></p>\", \"reflection\": \"\\r\\n\\r\\n<p class=\\\"p1\\\">In this lesson, students explore a substance that behaves both like a solid and a liquid. I love any lesson where I can use literature to tie in a concept in a different content area.&nbsp;</p>\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000048\" }, { \"$oid\": \"4f28bdf6023c64000100004a\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<p class=\\\"p1\\\">\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n</p><p class=\\\"p1\\\">Prior to the activity, read the classic Dr. Seuss book, Bartholomew and the Oobleck (Random House, 1949) and see where our non-newtonian fluid got its name. This is a long book (allow 15 min), so skip the book if you don't have time. Use the questions that refer to the book for general guided discussion. Draw upon students' prior knowledge in dealing with states of matter, and changes from one state to another (e.g. mixing batter for a cake, mud after a rain, traveling through fog).</p><p class=\\\"p1\\\">Guiding Questions during the beginning of the story:&nbsp;What state of matter is rain?&nbsp;How do you know?&nbsp;What state of matter is fog?&nbsp;How would you characterize gases? &nbsp;What state of matter is snow?&nbsp;Can you think of other examples of solids?&nbsp;What is matter?&nbsp;What are the different types of matter?</p><p class=\\\"p1\\\">For the experiment:</p><p class=\\\"p1\\\">We will examine two states of matter, solid and liquid, using Oobleck and Glurch. Ask students to write their hypothesis (e.g. I think when we mix the cornstarch and water it will form a liquid. Or, I think... a solid. Or, I think... a solid and liquid depending on how we squeeze it, etc.) in their science journals.</p><p></p>\", \"term_ids\": [], \"title\": \"Oobleck vs. Glurch\", \"updated_at\": { \"$date\": \"2012-06-16T22:09:33.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"5011f5495dc28d000200000a\": { \"_id\": { \"$oid\": \"5011f5495dc28d000200000a\" }, \"assessment\": \"How does the aluminum boat represent a metal boat?<br>Why did the aluminum boat float?<br>Why does a metal boat float?\", \"assistant_setup\": \"Cut 4 inch by 4 inch aluminum squares, 2 per group. &nbsp;Separate materials into group bins per the teacher’s instructions. &nbsp;Each bin should have 1 aluminum square per student, 60 paperclips per student, and one storage container. Use the jug to fill them to avoid spills. &nbsp;At most each needs to be around 2 inches deep.\", \"background\": \"<font>When you place a boat in water, the water puts pressure on the boat. &nbsp;The boat puts pressure on the water as well. &nbsp;As long as the water exerts more pressure, the boat will float. The heavier the boat is, the more pressure it exerts. So, if the weight of the boat is less than the weight of the same volume of water, then the boat will float. &nbsp;This means it is buoyant.</font><div><br></div><div>The pressure exerted by the boat comes from its attraction to the center of earth due to gravity. &nbsp;The greater its mass, the heavier it is and so the more force it puts on the water. The pressure from the water come from gravity and mass as well. &nbsp;The deeper an object is, the more pressure is exerted on the object, in all directions. &nbsp;As well, the more area the object has, the more force the water exerts.\\r\\n</div><div><br></div><div><br></div>\", \"closure_duration\": 15, \"created_at\": { \"$date\": \"2012-07-27T01:56:27.000Z\" }, \"duration\": 30, \"grades\": [0, 2, 5], \"links\": [{ \"_id\": { \"$oid\": \"506116b883f605000200002d\" }, \"url\": \"http://www.school-for-champions.com/science/fluid_floating.htm\", \"title\": \"Source\", \"note\": \"\" }], \"materials_note\": \"At most it will take 60 paper clips for a well-designed boat to sink. &nbsp;For a typical boat shape though, it will take just shy of 30.\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f600c49da7241000100000c\" }, { \"$oid\": \"4f601f2bda72410001000031\" }, { \"$oid\": \"4f8b2b8df400440001000051\" }, { \"$oid\": \"4fc4552ca4d1f80003000015\" }], \"materials_per_group_ids\": [{ \"$oid\": \"50121fb15dc28d0002000017\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4f7b4aa67a11da0001000022\" }, { \"$oid\": \"501220515dc28d000200001d\" }], \"note\": \"A possible addition to this activity is to dissolve salt in one of the pans of water and explain how the increased density of the water influences the buoyancy of the boat.<br><br>An easy way to dry the paperclips: &nbsp;Place pennies on top of a towel in a single flat layer. &nbsp;Spread another towel on top and dry the pennies in broad motions.<br><br>In case students want to name the boats use permanent marker to write on the aluminum, but before the boats get wet. &nbsp;For extra protection, simply cover with a piece of clear tape.\", \"objective\": \"<font>Depending on the grade level, students will do one, two, or all of the following: investigate why some items float, how we use models to investigate scientific phenomenon and observe the&nbsp;malleability&nbsp;of metals.</font><div><br></div>\", \"procedure\": \"<ol><li>Make a boat out of the aluminum foil.</li><li>Test the aluminum boat in the water.</li><li>What will happen as more matter is added to the boat? &nbsp;Write a procedure to test this.</li><li>Write a prediction for your procedure.</li><li>Carry out your procedure and write down your observations.</li><li>What happened? &nbsp;Did your prediction agree with your results? Which boat in your group held the most paperclips? Discuss with your classmates. &nbsp;</li></ol>\", \"reflection\": \"It might be a good idea to point out the pros and cons of each design. &nbsp;A raft design carries the more paperclips, however it is less sturdy. A canoe design may carry less, but is a lot easier to steer and move through the water.\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000002\" }, { \"$oid\": \"4f28bdf6023c64000100000f\" }, { \"$oid\": \"4f28bdf6023c64000100002b\" }, { \"$oid\": \"4f28bdf6023c640001000086\" }, { \"$oid\": \"4f28bdf6023c64000100008a\" }, { \"$oid\": \"4f28bdf6023c6400010000ad\" }, { \"$oid\": \"4f28bdf6023c6400010000ae\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<div>Depending on the grade level, ask probing questions to explore prior knowledge. Such as:</div><div><ul><li>How is the aluminum boat representative of a metal ship?</li><li>What property of aluminum and some other&nbsp;determines&nbsp;its availability in sheet form?</li><li>What property of water is most likely influence whether or not the aluminum boat floats?</li></ul></div>\", \"term_ids\": [{ \"$oid\": \"4f53dcf9feb00c0001000028\" }, { \"$oid\": \"4f53dd87feb00c0001000034\" }, { \"$oid\": \"4f87a5aadd735d0001000004\" }, { \"$oid\": \"501221935dc28d0002000027\" }, { \"$oid\": \"501221e25dc28d000200002c\" }], \"title\": \"Why Do Metal Boats Float?\", \"updated_at\": { \"$date\": \"2012-09-25T02:42:08.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"5013b345b31236000200000a\": { \"_id\": { \"$oid\": \"5013b345b31236000200000a\" }, \"assessment\": \"How many types of atoms are there in an element?<br>By what process are two H<sub>2</sub> molecules and one O<sub>2</sub> molecule made into water molecules?<br>How many water molecules does this make?<br>What does the periodic table tell us about hydrogen and oxygen?<br>How are the two elements different from water?\", \"assistant_setup\": \"Each student needs only three toothpicks and enough clay for four model hydrogen atoms and two model oxygen atoms. &nbsp;Imagine the oxygen atoms will be the size of a cherry and hydrogen atoms will be around the size of a blueberry. &nbsp;Separate out the materials beforehand so each student recieves one unit of clay and a few toothpicks.\", \"background\": \"<font>Everything is made of atoms and molecules of the elements in the periodic table. &nbsp;If a material is made of only one type of atom, then it is an element. &nbsp;Hydrogen and oxygen are two elements. &nbsp;In their pure form they are in the are the molecules H<sub>2</sub> and O<sub>2</sub>. Water has the formula H<sub>2</sub>O. &nbsp;In order for the two types of molecules to form water molecules, the chemical bonds have to be re-arranged. &nbsp;This is called a chemical reaction. &nbsp;</font><div><font><br></font></div><div><font>The initial molecules, or reactants, and the result, or product all have different properties. &nbsp;This is another characteristic of chemical reactions. &nbsp;Hydrogen and oxygen are found in different parts of the periodic table of elements. &nbsp;From this, we know oxygen is more reactive than hydrogen and also has more protons. &nbsp;The number of protons determines the placement of the elements in the table.</font><div><br></div><div><font>Source:</font></div><div><font><a href=\\\"http://www.biology.arizona.edu/biochemistry/tutorials/chemistry/page3.html\\\">University of Arizona's Introduction to the Water Molecule</a></font>\\r\\n</div></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-07-28T09:39:17.000Z\" }, \"duration\": 35, \"grades\": [5], \"links\": [], \"materials_note\": \"It may be preferable to have two different colors of clay; one for each element.\", \"materials_per_clas_ids\": [{ \"$oid\": \"5013b3b1b31236000200000e\" }], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4f9e1f217b922d000100003a\" }, { \"$oid\": \"5013b3c9b312360002000012\" }, { \"$oid\": \"5013b3eab312360002000016\" }], \"note\": \"Some possible replacements for the clay would be marshmallow or gummies.\", \"objective\": \"Learn that all materials are made of atoms, which form molecules, an element is made of one type of atom, and these elements are organized by properties on the periodic table of elements.<div><br></div><div>Understand that water is made from hydrogen and oxygen combining in a chemical reaction, meaning the reactants’ chemical bonds were rearranged to form water, which is distinct from the reactants.</div>\", \"procedure\": \"<ol><li>How are molecules made? &nbsp;Write down your hypothesis.</li><li>Using the clay make enough oxygen atoms and hydrogen atoms for two H<sub>2</sub> and one O<sub>2</sub> molecule. &nbsp;The oxygens should be around the size of a cherry and the hydrogens around the size of a blueberry.</li><li>Using the toothpicks as chemical bonds, make two H<sub>2</sub> molecules and one O<sub>2</sub> molecule. Count the number of atoms of each element and write this down in your journal.</li><li>From the molecules you made make water molecules.</li><li>How many water molecules did you make? Write this in your journal.</li><li>Find hydrogen and oxygen in the periodic table of elements. &nbsp;Where are they? &nbsp;What differences between the elements do you know by reading the periodic table? Write this in your journal.</li><li>Why are the properties of &nbsp;H<sub>2</sub> and O<sub>2</sub> different from the properties of water? &nbsp;Explain in your journal</li></ol>\", \"reflection\": \"<br>\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000084\" }, { \"$oid\": \"4f28bdf6023c640001000085\" }, { \"$oid\": \"4f28bdf6023c640001000087\" }, { \"$oid\": \"4f28bdf6023c6400010000a7\" }, { \"$oid\": \"4f28bdf6023c6400010000ad\" }, { \"$oid\": \"4f28bdf6023c6400010000ae\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"Introduce the structure of hydrogen molecules, oxygen molecules, and water molecules.<br>How is the position of an element in the periodic table determined?<br>What is a chemical reaction?<br><br>\", \"term_ids\": [{ \"$oid\": \"4f601db5da72410001000023\" }, { \"$oid\": \"5013b4c7b31236000200001a\" }, { \"$oid\": \"5013baa0b312360002000020\" }, { \"$oid\": \"5013baf1b312360002000024\" }, { \"$oid\": \"5013bb9cb312360002000028\" }, { \"$oid\": \"5013bbe5b31236000200002c\" }], \"title\": \"Making Molecules\", \"updated_at\": { \"$date\": \"2012-08-04T04:59:42.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"5013e0ccb312360002000032\": { \"_id\": { \"$oid\": \"5013e0ccb312360002000032\" }, \"assessment\": \"What do kidneys do?<div>What did the cup of water, pepper, cloves, and tea represent?</div><div>What did the strainer and coffee filter represent?</div><div>Which was most effective?</div>\", \"assistant_setup\": \"Distribute the materials into the group bins per the teacher's instructions. &nbsp;Use the jug to pour water for each group. &nbsp;Make sure paper towels are on hand for clean-up.\", \"background\": \"<font>The human body uses many things to function, for example food, water, air, and sunlight. &nbsp;Typically, we are not able to use all of the these resources and there is some leftover. &nbsp;When cellular waste or excess materials develops in the blood stream, it is filtered out by our kidneys. &nbsp;The waste is converted then to urine and travels down the urea to the bladder for later removal. &nbsp;We start with two kidneys and we need at least one kidney to survive. &nbsp;</font><div><br></div><div>Source:</div><div><a href=\\\"http://kidshealth.org/kid/htbw/kidneys.html\\\">Nemour's Kid-friendly Website</a></div><div><br></div><div><br></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-07-28T12:53:32.000Z\" }, \"duration\": 35, \"grades\": [5], \"materials_note\": \"\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f600c49da7241000100000c\" }, { \"$oid\": \"4f85117d79626d000100001a\" }, { \"$oid\": \"4fc4552ca4d1f80003000015\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f459166eeaf0a000100001f\" }, { \"$oid\": \"4f600e20da72410001000011\" }, { \"$oid\": \"4f601ea4da7241000100002c\" }, { \"$oid\": \"4f6022e7da72410001000048\" }, { \"$oid\": \"4f87564edc4c210001000033\" }, { \"$oid\": \"50121fb15dc28d0002000017\" }, { \"$oid\": \"501caa448c154c0002000053\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4f9e1f217b922d000100003a\" }], \"note\": \"One expansion of this experiment would be to have more \\\"membranes\\\" and \\\"cellular waste\\\" for students to develop their own experiments.\", \"objective\": \"To understand that our kidneys filter cellular waste from our blood and convert it to urine which is later stored in the bladder.<div><br></div><div>Learn how membranes work in the body to sort materials.</div>\", \"procedure\": \"<ol><li>Empty the contents of the teabag into the cup with water.&nbsp;</li><li>Add pepper and cloves to the cup.</li><li>Place the bowl in the sturdy container</li><li>What will happen if the water from the cup is slowing emptied into the strainer, which empties into the coffee filter, which then empties into the bowl? &nbsp;Discuss with your classmates.</li><li>Write your prediction in your Science Journal.</li><li>One student in the group opens the coffee filter and holds it over the bowl.</li><li>Another student holds a strainer over the coffee filter.</li><li>A third student slowly empties the cup of water so that it flows through the strainer and then the filter into the bowl.</li><li>Set the filter and the strainer down inside the sturdy container so everyone in the group can see what each contains.</li><li>Label on the diagram what is in each object after pouring the water. &nbsp;What is in the strainer? &nbsp;What is in the coffee filter? What is in the bowl? Write this in your journal.</li><li>Of the items poured, which were not in the bowl? &nbsp;Record this.</li><li>How does our body use membranes to filter? &nbsp;Discuss with your classmates and write down your thoughts.</li></ol>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000091\" }, { \"$oid\": \"4f28bdf6023c6400010000ad\" }, { \"$oid\": \"4f28bdf6023c6400010000ae\" }], \"status\": \"draft\", \"subject\": \"life\", \"teacher_setup\": \"Encourage the students to draw a diagram of the model for labeling what happened in the activity. &nbsp;<div>Ask if we use every last piece of all the food and liquids we drink.&nbsp;</div><div>How does our body process the components we do not use?</div><div><br></div>\", \"term_ids\": [{ \"$oid\": \"5013ff4210784b0002000004\" }, { \"$oid\": \"501400aa10784b0002000010\" }], \"title\": \"Our Personal Filters: Kidneys\", \"updated_at\": { \"$date\": \"2012-08-04T05:00:24.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"501bdbc281a5270002000008\": { \"_id\": { \"$oid\": \"501bdbc281a5270002000008\" }, \"assessment\": \"What does the water in the filled bottle look like when it was swirled?<br>Why did we have to squeeze the bottom bottle?<br>Why does the tornado take a funnel shape?\", \"assistant_setup\": \"<ol><li>Find a nearby sink and fill a 2L bottle for each pair of students. The bottle only needs to be around one third full.</li><li>Dry the neck of the water bottle and put the cap back on to prevent spills.</li><li>Make sure to keep track of the caps for all of the water bottles. Keep the caps that do not belong to filled water bottles.</li><li>Place a filled bottle, an empty bottle, and two lengths of duct tape in the group bins. &nbsp;One length of tape to cover the top of the filled 2L bottle and the other to connect the two bottles together.</li><li>Distribute the group bins as instructed by the teacher.</li><li>During the activity help students move forward with the lesson and make sure the water bottles are securely attached to one another before the students flip them over.</li><li>At the end of the activity, gather the 2L bottles and open the system by cutting with scissors or by peeling the tape away.</li><li>Remove the tape and throw away.</li><li>Empty the bottles.</li><li>Allow the bottles to dry if time allows before putting them away.</li><li>Place the materials back into the activity bin.</li></ol>\", \"background\": \"<font>The uneven heating of the earth leads to sections of air at different temperatures. Warmer air rises and cooler air sinks. As well, less dense air rises and denser air sinks. This movement of air causes wind. The increasing pressure as air approaches the surface of the earth also influences the overall movement of air. This rise and fall of air forms convection cells. On occasion, a horizontal convection cell is pulled up by a strong updraft. A funnel cloud can then start to form and once it touches the ground it is a tornado.</font><div><br></div><div><font>Source:</font></div><div><a href=\\\"http://www.nssl.noaa.gov/edu/safety/tornadoguide.html\\\">National Oceanic And Atmospheric Administration</a></div><div><br></div><div><font><br></font></div>\", \"closure_duration\": 15, \"created_at\": { \"$date\": \"2012-08-03T14:10:11.000Z\" }, \"duration\": 30, \"grades\": [5], \"materials_note\": \"\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f85117d79626d000100001a\" }, { \"$oid\": \"4fc4552ca4d1f80003000015\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f78eeef2ab40b0001000009\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4f9e1f217b922d000100003a\" }], \"note\": \"One way to make the activity more in depth would be for the students to develop different methods to form a tornado in the 2L bottles. &nbsp;They could try to swirl while the bottles are horizontal or use the procedure above and not squeeze on the bottom bottle.\", \"objective\": \"Explain in what conditions tornadoes form and how this happens. In addition, understand why tornadoes have a funnel shape.\", \"procedure\": \"<ol><li>How do tornadoes form? &nbsp;Write down what you think in your science journal.</li><li>One person in the pair:</li><ul><li>Remove the cap from the filled water bottle.</li><li>After making sure the water bottle neck is dry, tape over the opening with the shorter piece of tape.</li><li>Using a pencil, carefully poke a hole in the piece of tape covering the filled water bottle.</li><li>Ask your partner to hold the empty water bottle on top of the filled water bottle</li><li>Wrap the long piece of duct tape around the necks of the two water bottles so they are firmly connected and sealed together.</li></ul><li>Imagine the the filled 2L bottle was on top. How does this system represent a part of the earth atmosphere?</li><li>Another person in the pair:</li><ul><li>Hold the bottles so that the filled bottle is on top.</li><li>Ask your partner to hold onto the bottom bottle and to squeeze it gently.</li><li>Swirl the filled bottle gently while your partner squeezes.</li><li>Place the system on the table.</li></ul><li>Observe what is happening in the top bottle. &nbsp;Write this in the your science journal and draw it into your diagram of the bottle system.</li><li>How is this like what happens when a tornado forms? &nbsp;Write this down in your journal.</li></ol><p></p>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c64000100009c\" }, { \"$oid\": \"4f28bdf6023c64000100009e\" }, { \"$oid\": \"4f28bdf6023c6400010000a0\" }, { \"$oid\": \"4f28bdf6023c6400010000a7\" }, { \"$oid\": \"4f28bdf6023c6400010000ad\" }, { \"$oid\": \"4f28bdf6023c6400010000ae\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"<font>Ask the students to diagram how a tornado forms. <br>Have the students make a diagram of the completed water bottle system as well.</font><div><font>What could the different parts of the system represent?</font></div><div><br></div>\", \"term_ids\": [{ \"$oid\": \"501bfc5a81a5270002000012\" }, { \"$oid\": \"501bfd9981a527000200001b\" }, { \"$oid\": \"501bfe988c154c0002000002\" }], \"title\": \"Tornado!\", \"updated_at\": { \"$date\": \"2012-08-04T05:00:55.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"501c098a8c154c000200000f\": { \"_id\": { \"$oid\": \"501c098a8c154c000200000f\" }, \"assessment\": \"Where is the Sun in the Earth’s orbit?<br>What causes Earth to orbit around the sun?<br>What happens when the Earth’s mass or its distance from the Sun changes?\", \"assistant_setup\": \"<ol><li>Cut several 1 m lengths of string. &nbsp;Enough so that each group has several pieces of string.</li><li>Place several lengths of string, one unit of clay, and scissors into each group bin.</li><li>Distribute the group bins per the teacher’s instructions.</li><li>During the activity, help guide students, especially in measuring the string and distributing clay.</li><li>Once the activity is over gather the materials and repack the activity bin.</li></ol>\", \"background\": \"<font>The Earth orbits the Sun due to its gravity. &nbsp;The more mass the Earth or the Sun has, the greater the force is. &nbsp;The farther the Earth is from the Sun, the weaker the force is. &nbsp;Even though the Earth moves in a circular orbit, once gravity is removed the Earth continues in a straight line. &nbsp;Although gravity between the Sun and the Earth causes the Earth to move in a circle, the force acts on the Earth in only one direction in a single moment. &nbsp;Thus, if the Earth ever leaves its orbit it would move in a straight line.</font><div><br></div><div>Source:</div><div><a href=\\\"http://www.physics4kids.com/files/motion_gravity.html\\\">Physics 4 Kids Website</a></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-08-03T17:25:30.000Z\" }, \"duration\": 40, \"grades\": [5], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f87564edc4c210001000033\" }, { \"$oid\": \"4f8b2b8df400440001000051\" }, { \"$oid\": \"5013b3c9b312360002000012\" }, { \"$oid\": \"501c21858c154c000200002d\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4f9e1f217b922d000100003a\" }], \"note\": \"\", \"objective\": \"Students will investigate Earth’s orbit and learn more about circular motion.\", \"procedure\": \"<ol><li>Count the number of strings in your group bin.</li><li>Divide the clay into twice that number of pieces.</li><li>Cut each piece of string into two segments, one is 40 cm and the other is 60 cm</li><li>Wrap each 40 cm string around its own piece of clay in several directions.</li><li>Tie the ends to make a tight knot</li><li>Tie each of these to its own 60 cm of string</li><li>Spin the ball of clay slowly so the string is taut and so it rises just bit off the ground</li><li>Making sure there is no one around you, and then let go of the string</li><li>How did the ball of clay move after you let go of the string? &nbsp;Continue to spin and release the clay ball until this is clear.</li><li>Write your observations in your science journal.</li><li>Draw a diagram of the movement of the clay and string of when it was spinning.</li><li>In this model, where is the Earth and the Sun? &nbsp;Label your diagram accordingly.</li><li>Where is the force between the Earth and the Sun? &nbsp;Show this in your diagram.</li><li>Write in your science journal what happens when the ball is released and what this represents.</li><li>What happens if the weight of the clay ball changes? &nbsp;Write a hypothesis in your science journal.</li><li>What happens if the spun string is shorter? &nbsp;Write a hypothesis in your science journal.</li><li>Develop a method to test the hypotheses and record it.</li><li>Carry out the method.</li><li>Write down observations.</li><li>What does this mean if the Earth gets heavier, less heavy, or closer to the Sun?</li><li>At the end of the activity, place the materials back into the group bin.</li></ol>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c6400010000a2\" }, { \"$oid\": \"4f28bdf6023c6400010000a4\" }, { \"$oid\": \"4f28bdf6023c6400010000a7\" }, { \"$oid\": \"4f28bdf6023c6400010000a9\" }, { \"$oid\": \"4f28bdf6023c6400010000aa\" }, { \"$oid\": \"4f28bdf6023c6400010000ab\" }, { \"$oid\": \"4f28bdf6023c6400010000ad\" }, { \"$oid\": \"4f28bdf6023c6400010000ae\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"Where is the Sun in the solar system?<br>How does the Earth move in the solar system? &nbsp;Why?<br>What would happen if the Earth had a different weight or had a different distance from the sun?\", \"term_ids\": [{ \"$oid\": \"4f87a5aadd735d0001000004\" }, { \"$oid\": \"501c1f8d8c154c0002000022\" }], \"title\": \"Earth's Orbit\", \"updated_at\": { \"$date\": \"2012-08-09T22:08:28.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"501c3a338c154c0002000036\": { \"_id\": { \"$oid\": \"501c3a338c154c0002000036\" }, \"assessment\": \"<ul><li>In all of our hypotheses, what was the dependent variable?</li><li>Looking at the graphs from each group, which seems most likely to influence the orbit length?</li><li>Why?</li><li>Did anyone notice anything unusual or unexpected about the length of a planet’s year, meaning their orbit length and any of the other characteristics of the planets?</li></ul>\", \"assistant_setup\": \"<ol><li>Pack all the needed materials into the activity bin and make sure there is enough graph paper so each student will have at least two sheets.</li><li>Quietly enter the classroom without disrupting the flow of the class.</li><li>Before the start of the activity assemble group bins in the back of the room.</li><li>Per the teacher’s instructions, distribute the group bins to the students.</li><li>During the activity, help each group come up with a way to graph the relationship they are looking at.</li><li>Once the activity is complete gather remaining materials.</li><li>Repack the activities container and return it to the storage area.</li></ol>\", \"attachments\": [{ \"_id\": { \"$oid\": \"5024522b0b84e40002000025\" }, \"caption\": \"How to Make a Plot Graph\", \"w\": 612, \"h\": 792612, \"attachment\": \"2cb5677137.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 142458 }, { \"_id\": { \"$oid\": \"502452550b84e40002000029\" }, \"caption\": \"Table of Solar System Values\", \"w\": 792, \"h\": 612792, \"attachment\": \"92c4077314.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 320343 }], \"background\": \"<font>There are eight planets total in our solar system. &nbsp;Each of them rotates around our star, the Sun, which is the center of the solar system and also the largest object in our solar system. &nbsp;Each of these planets have different orbits. &nbsp;The farther a planet is from the Sun, the longer its orbit. &nbsp;The orbit is a delicate balance between the planet falling into the sun and the planet leaving its orbit and so the solar system as well.</font><div><font><br></font></div><div><font>Sources:</font></div><div><font><a href=\\\"http://nineplanets.org/overview.html\\\">http://nineplanets.org/overview.html</a><br><a href=\\\"http://www.newton.dep.anl.gov/askasci/ast99/ast99227.htm\\\">http://www.newton.dep.anl.gov/askasci/ast99/ast99227.htm</a><br><a href=\\\"http://cse.ssl.berkeley.edu/AtHomeAstronomy/act10_datasheet.html\\\">http://cse.ssl.berkeley.edu/AtHomeAstronomy/act10_datasheet.html</a></font>\\r\\n</div>\", \"closure_duration\": 15, \"created_at\": { \"$date\": \"2012-08-03T20:53:07.000Z\" }, \"duration\": 30, \"grades\": [5], \"links\": [{ \"_id\": { \"$oid\": \"502450bb0b84e4000200001b\" }, \"url\": \"http://spaceplace.nasa.gov/menu/solar-system/ \", \"title\": \"A fun NASA site for students to explore the solar system\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"502450dd0b84e4000200001f\" }, \"url\": \"http://nssdc.gsfc.nasa.gov/planetary/factsheet/index.html \", \"title\": \"A table of more planet values from NASA\", \"note\": \"\" }], \"materials_note\": \"Each group will need a data table and a how-to guide for making graphs. &nbsp;Have the expanded table on hand in case more characteristics are needed.\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4fa0cbcd0d3d05000100003f\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4f8b2b8df400440001000051\" }, { \"$oid\": \"4f9e1a5b7b922d0001000022\" }, { \"$oid\": \"4f9e1f217b922d000100003a\" }, { \"$oid\": \"502453070b84e4000200002f\" }], \"note\": \"These graphs would be good to post in the classroom, or if there is limited wall space, the graphs can be glued into the science journal.<br><br>If students are particularly creative they can try and find ways to compare orbit length and color, place in the alphabet.\", \"objective\": \"Students will understand what influences the length of an orbit and use graphs to infer relationships.\", \"procedure\": \"<font>Question<br><ol><li>What causes the orbits of the planets to take more or less time?</li><li>Could it be the length of a day on each planet, the distance a planet is from the sun, the diameter of a planet or its weight</li><li>Develop a hypothesis with your group</li><li>Write your group’s hypothesis in your science journal. &nbsp;Identify the independent variable and the dependent variable.</li></ol><br>Investigate<br><ol><li>Make a graph comparing the time to complete an orbit and the characteristic from your hypothesis.</li><li>Reference the data table handout for values for the bar graph.</li><li>If needed, reference the graph handout for how to make a graph. &nbsp;Make sure to label the planets!</li></ol><br>Infer<br><ol><li>What does a strong relationship between an independent variable and a dependent variable look like?</li><li>Does it seem like the independent variable influences the dependent variable?</li><li>Write in your science journal what this graph tells you.</li><li>What else could influence the length of the orbit of a planet?</li></ol></font>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c6400010000a3\" }, { \"$oid\": \"4f28bdf6023c6400010000a6\" }, { \"$oid\": \"4f28bdf6023c6400010000a7\" }, { \"$oid\": \"4f28bdf6023c6400010000aa\" }, { \"$oid\": \"4f28bdf6023c6400010000ac\" }, { \"$oid\": \"4f28bdf6023c6400010000ad\" }, { \"$oid\": \"4f28bdf6023c6400010000ae\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"<ul><li>How long are the orbits around the sun?</li><li>What makes a orbit longer or shorter?</li><li>How could we compare the different possibilities?</li></ul>\", \"term_ids\": [{ \"$oid\": \"501c1f8d8c154c0002000022\" }, { \"$oid\": \"502450480b84e40002000013\" }, { \"$oid\": \"502450830b84e40002000017\" }], \"title\": \"The Number of Days in all these Years\", \"updated_at\": { \"$date\": \"2012-08-10T00:19:54.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"502993dc5f6eb10002000007\": { \"_id\": { \"$oid\": \"502993dc5f6eb10002000007\" }, \"assessment\": \"<ul><li>What was the volume and surface area of all of the sets of blocksI? What causes this?</li><li>During digestion, what effect does increased surface area have?</li><li>what are the different steps of the digestive process that this influence?</li></ul>\", \"assistant_setup\": \"<ol><li>After checking in with the school office, go to the HandsForScience closet or storage area.</li><li>Gather materials needed for this activity and budget enough time for assembly if needed.</li><li>For assembly see the idea sheet.</li><li>Pack the group bins into the activity bin and head to the classroom.</li></ol>\", \"background\": \"This is a RAFT (Resource Area for Teachers) activity. They developed Chewed Food. &nbsp;<br><br>RAFT is great place to find activities from kindergarten through high school. They also sell activity kits and materials specifically to people working in education. You can find the standards, background, materials, assembly instructions, and procedure on the idea sheet for the activity at their website. &nbsp;Any information not on the idea sheet is on this page. &nbsp;Visit their <a href=\\\"http://raft.net\\\">website</a> for more activities. &nbsp;You can also view the <a href=\\\"http://www.raftbayarea.org/readpdf?isid=34\\\">idea sheet</a>.<br>\", \"closure_duration\": 15, \"created_at\": { \"$date\": \"2012-08-13T23:55:08.000Z\" }, \"duration\": 30, \"grades\": [5], \"materials_note\": \"You could glue together wooden blocks beforehand or alternatively use connecting blocks.\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"This activity is great for reviewing volume vs. surface area as well.\", \"objective\": \"Students will understand the different steps of the digestive system and the importance of chewing.\", \"procedure\": \"The procedure can be found at RAFT's website&nbsp;on the idea sheet for this activity.\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000090\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<ul><li>Can items with the same volume have different surface area?</li><li>What does the human body need to do in order to absorb nutrients from food?</li><li>​How does surface area influence the rate of a reaction?</li></ul>\", \"term_ids\": [{ \"$oid\": \"4f53dd87feb00c0001000034\" }, { \"$oid\": \"50309c475854e80002000020\" }, { \"$oid\": \"50309cae5854e80002000024\" }, { \"$oid\": \"50309dc25854e80002000028\" }, { \"$oid\": \"5030a13c5854e80002000030\" }], \"title\": \"Chewed Food\", \"updated_at\": { \"$date\": \"2012-11-11T04:48:20.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"5029941b5f6eb1000200000b\": { \"_id\": { \"$oid\": \"5029941b5f6eb1000200000b\" }, \"assessment\": \"<ol><li>What do our lungs do?</li><li>What is COPD?&nbsp;</li><li>What effect does COPD have on people?</li></ol>\", \"assistant_setup\": \"<ol><li>After checking into the school office, go the the HandsforScience closet or storage area.</li><li>Gather materials for the activity and assemble group kits for the class.</li><li>For each student pack half of a straw and for each group pack one stopwatch.</li></ol>\", \"attachments\": [{ \"_id\": { \"$oid\": \"50391dad3f8061000200000e\" }, \"caption\": \"Aveoli Diagram\", \"w\": 296, \"h\": 295, \"attachment\": \"b98bb2c487.jpg\", \"content_type\": \"image/jpeg\", \"file_size\": 79467 }], \"background\": \"This is a RAFT (Resource Area for Teachers) activity. They developed Catching your Breath. &nbsp;<br><br>RAFT is great place to find activities from kindergarten through high school. They also sell activity kits and materials specifically to people working in education. You can find the standards, background, materials, assembly instructions, and procedure on the idea sheet for the activity at their website. &nbsp;Any information not on the idea sheet is on this page. &nbsp;Visit their <a href=\\\"http://raft.net\\\">website</a> for more activities. &nbsp;You can also view the <a href=\\\"http://www.raftbayarea.org/readpdf?isid=29\\\">idea sheet</a>.\", \"closure_duration\": 5, \"created_at\": { \"$date\": \"2012-08-13T23:56:11.000Z\" }, \"duration\": 20, \"grades\": [5], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"This is a great activity to link to the D.A.R.E. program and there are many information resources on the idea sheet.\", \"objective\": \"Students will understand the role lungs play in helping transfer oxygen to the rest of the body.\", \"procedure\": \"The procedure can be found at RAFT's website&nbsp;on the idea sheet for this activity. &nbsp;There is also a video which is easily&nbsp;accessible&nbsp;by searching the activity name on their site.\\r\\n\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c64000100008f\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<ol><li>Why do we need air?</li><li>How do we get air?</li></ol>\", \"term_ids\": [{ \"$oid\": \"502e4dc13f36150002000033\" }, { \"$oid\": \"503093d45854e8000200000a\" }, { \"$oid\": \"503096fa5854e8000200000e\" }, { \"$oid\": \"503097b95854e80002000012\" }], \"title\": \"Catching your Breath\", \"updated_at\": { \"$date\": \"2012-08-25T18:54:23.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"502994545f6eb1000200000f\": { \"_id\": { \"$oid\": \"502994545f6eb1000200000f\" }, \"assessment\": \"<ul><li>How is the water in the cup and the water outside the cup different?</li><li>How did the water in the cup get there?</li><li>Why did this happen?</li></ul>\", \"assistant_setup\": \"<ol><li>After checking into the school office, go to the HandsForScience closet or storage area.</li><li>Gather materials needed for the activity.</li><li>Assemble the still as instructed if not assembled already.</li><li>If it not a very sunny day, a lamp will help move things along.</li></ol>\", \"background\": \"This is a RAFT (Resource Area for Teachers) activity. They developed Still Water. &nbsp;<div><br>RAFT is great place to find activities from kindergarten through high school. They also sell activity kits and materials specifically for people working in education. You can find the standards, background, materials, assembly instructions, and procedure on the idea sheet for the activity at their website. &nbsp;Any information not on the idea sheet is on this page. &nbsp;Visit their&nbsp;<a href=\\\"http://raft.net\\\">website</a>&nbsp;for more activities. &nbsp;You can also view the&nbsp;<a href=\\\"http://www.raftbayarea.org/readpdf?isid=506\\\">idea sheet</a>.\\r\\n</div>\", \"closure_duration\": 15, \"created_at\": { \"$date\": \"2012-08-13T23:57:08.000Z\" }, \"duration\": 45, \"grades\": [5], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"A possible variation of this activity is to use salt water instead. &nbsp;Make sure the bottom is dark so you can see the salt crystals.\", \"objective\": \"Students will learn how the water cycle can be used to separate materials.\", \"procedure\": \"The procedure can be found at RAFT's website&nbsp;on the idea sheet for this activity.\\r\\n\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000089\" }, { \"$oid\": \"4f28bdf6023c640001000097\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"<ul><li>What is the water cycle?</li><li>What effect does temperature have on the state a material is in?</li></ul>\", \"term_ids\": [{ \"$oid\": \"4f2f5a8fa056bc0001000004\" }, { \"$oid\": \"5030a3515854e80002000037\" }, { \"$oid\": \"5030a3de5854e8000200003b\" }], \"title\": \"Still Water\", \"updated_at\": { \"$date\": \"2012-08-25T20:10:00.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"502994905f6eb10002000013\": { \"_id\": { \"$oid\": \"502994905f6eb10002000013\" }, \"assessment\": \"<ul><li>How does water move around the planet?</li><li>What are clouds made of?</li><li>Where did the clouds you observed go?</li></ul>\", \"assistant_setup\": \"<ol><li>After checking into the school office, go to the Hands for Science closet or storage.</li><li>Put together the materials, if they are not already, for the students. &nbsp;Assembly instructions can be found on the idea sheet.</li><li>In each group bin there should be a nephoscope and a compass.</li><li>In the case of a clear day, cut out clouds to hang in the classroom for the students to observe using the nephoscopes.</li></ol>\", \"attachments\": [{ \"_id\": { \"$oid\": \"502e41dd3f3615000200002b\" }, \"caption\": \"A Useful Diagram for Different Types of Clouds\", \"w\": 799, \"h\": 376, \"attachment\": \"bb51709378.jpg\", \"content_type\": \"image/jpeg\", \"file_size\": 36498 }], \"background\": \"<font>This activity is adapted from a&nbsp;<a href=\\\"http://www.raftbayarea.org/products-and-services\\\">RAFT</a>&nbsp;(Resource Area for Teachers)&nbsp;<a href=\\\"http://www.raftbayarea.org/readpdf?isid=486\\\">idea sheet</a>. The science behind this activity is written on that sheet.</font><br><font>RAFT helps educators meet 21st century challenges by providing them with resources that help turn abstract and complex ideas into activities that students can grasp. Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!</font><br><div><b><br></b></div>\", \"closure_duration\": 15, \"created_at\": { \"$date\": \"2012-08-13T23:58:08.000Z\" }, \"duration\": 30, \"grades\": [1, 5], \"materials_note\": \"<ul><li><font>see idea sheet for copies of master cloud mirror grid</font></li></ul>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [{ \"$oid\": \"4f87563adc4c21000100002f\" }, { \"$oid\": \"4fa0cbcd0d3d05000100003f\" }, { \"$oid\": \"50984e929851920002000056\" }, { \"$oid\": \"50984ea29851920002000058\" }, { \"$oid\": \"50984ec2985192000200005b\" }, { \"$oid\": \"50984ee7985192000200005d\" }], \"note\": \"For a class project, try to chart a large portion of the sky, with each student looking at a different section.\", \"objective\": \"Students will understand how water moves around the planet and how the water cycle effects weather.<div><br></div>\", \"procedure\": \"In addition to the procedure listed on the RAFT idea sheet, do the following:<br><ol><li>Watch RAFT <a href=\\\"http://www.raftbayarea.org/ideas/As%20the%20Clouds%20go%20Bye.pdf\\\">video</a> that accompanies idea sheet.</li><li>Review vocabulary.</li><li><font>Explain the procedure to the students and</font></li></ol>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000098\" }, { \"$oid\": \"4f28bdf6023c64000100009d\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"<ul><li>How does water enter gas form?</li><li>How do clouds move?</li><li>How do you use a compass?</li></ul>\", \"term_ids\": [{ \"$oid\": \"502e3a8a3f3615000200000b\" }, { \"$oid\": \"502e3b033f3615000200000f\" }, { \"$oid\": \"502e3b9b3f36150002000015\" }, { \"$oid\": \"502e3c923f36150002000019\" }, { \"$oid\": \"502e3f253f36150002000026\" }], \"title\": \"As the Clouds Go Bye\", \"updated_at\": { \"$date\": \"2012-11-05T23:44:54.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"503c0615ef7c680002000004\": { \"_id\": { \"$oid\": \"503c0615ef7c680002000004\" }, \"assessment\": \"<ul><li>What is a compass made of?</li><li>What about the earth enables it to work?</li><li>Why does the needle move?</li></ul>\", \"assistant_setup\": \"<ol><li>After checking into the school office, go to the Hands for Science closet or storage.</li><li>Reference the material list to select materials.</li><li>Each student will need the full material list with exception to the magnet which can be shared, and the scissors, which should be in the classroom.</li><li>In case the class will doing the floating compass instead of the hanging compass, identify a nearby water source and pack a jug.</li></ol>\", \"background\": \"This is a RAFT (Resource Area for Teachers) activity. They developed Floating Compass. &nbsp;<br>RAFT is great place to find activities from kindergarten through high school. They also sell activity kits and materials specifically to people working in education. You can find the standards, background, materials, assembly instructions, and procedure on the idea sheet for the activity at their website. &nbsp;Any information not on the idea sheet is on this page. &nbsp;Visit their <a href=\\\"http://raft.net\\\">website</a> for more activities. &nbsp;You can also view the <a href=\\\"http://www.raftbayarea.org/readpdf?isid=161\\\">idea sheet</a>.\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-08-27T23:43:17.000Z\" }, \"duration\": 30, \"grades\": [4], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"One possible expansion of this activity would be to set up a scavenger hunt using navigational directions. &nbsp;This way students understand how to the compass as well.<br>\", \"objective\": \"Students learn how to make a compass and the behavior of magnets.\", \"procedure\": \"The procedure can be found at RAFT's website&nbsp;on the idea sheet for this activity. &nbsp;There is also a video which is easily&nbsp;accessible&nbsp;by searching the activity name on their site.\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000066\" }, { \"$oid\": \"4f28bdf6023c64000100006a\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<ul><li>What do we use compasses for?</li><li>Why do they work?</li><li>What are some characteristics of magnets?</li></ul>\", \"term_ids\": [{ \"$oid\": \"503c0920ef7c680002000008\" }, { \"$oid\": \"503c0bafef7c68000200000c\" }, { \"$oid\": \"503c0fcaef7c680002000010\" }, { \"$oid\": \"503c1273ef7c680002000014\" }], \"title\": \"Floating Compass\", \"updated_at\": { \"$date\": \"2012-08-28T00:41:54.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"503c22d3ef7c68000200001f\": { \"_id\": { \"$oid\": \"503c22d3ef7c68000200001f\" }, \"assessment\": \"<ul><li>Which sand had life in it?</li><li>How could you tell that sand sample had life in it?</li><li>Describe a food chain that includes this form of life.</li></ul>\", \"assistant_setup\": \"<ol><li>After checking into the school office, go to the Hands for Science closet or storage.</li><li>Put together the materials, if they are not already, for the students. &nbsp;Assembly instructions can be found on the idea sheet.</li><li>Each group should have their own set of three sand samples, make sure you and the teacher knows what is in each sample.</li><li>Verify the location of a microwave to make the water warm. &nbsp;Do not overhead the water, as it will take a lot longer to cool.</li></ol><br class=\\\"Apple-interchange-newline\\\">\", \"background\": \"This is a RAFT (Resource Area for Teachers) activity. They developed Where is the Life? &nbsp;<br>RAFT is great place to find activities from kindergarten through high school. They also sell activity kits and materials specifically to people working in education. You can find the standards, background, materials, assembly instructions, and procedure on the idea sheet for the activity at their website. &nbsp;Any information not on the idea sheet is on this page. &nbsp;Visit their <a href=\\\"http://raft.net\\\">website</a> for more activities. &nbsp;You can also view the <a href=\\\"http://www.raftbayarea.org/readpdf?isid=664\\\">idea sheet</a>.\", \"closure_duration\": 15, \"created_at\": { \"$date\": \"2012-08-28T01:45:55.000Z\" }, \"duration\": 45, \"grades\": [4, 5], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"Have the children write or draw a food chain including the yeast. &nbsp;For example: Sunlight and CO2 taken by plants is made into energy and these plants are harvested to make the sugar. &nbsp;The sugar is then eaten by the yeast.  The yeast then produces CO2 and waste which can be absorbed by plants to help make more energy.\", \"objective\": \"<font>For students to explore what makes life distinct and how to identify it</font>\", \"procedure\": \"The procedure can be found at RAFT's website&nbsp;on the idea sheet for this activity.\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c64000100006c\" }, { \"$oid\": \"4f28bdf6023c640001000094\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<ul><li>What is one of the defining characteristics of living things?</li><li>Where are the different places we can find life?</li><li>In what forms does life come?</li></ul>\", \"term_ids\": [{ \"$oid\": \"4f53dcf9feb00c0001000028\" }, { \"$oid\": \"4f87a85fdd735d0001000010\" }, { \"$oid\": \"503c2351ef7c680002000026\" }, { \"$oid\": \"503c2456ef7c68000200002a\" }], \"title\": \"Where is the Life?\", \"updated_at\": { \"$date\": \"2012-09-05T18:46:16.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"503d0138f272270002000006\": { \"_id\": { \"$oid\": \"503d0138f272270002000006\" }, \"standard_ids\": [], \"term_ids\": [], \"materials_per_clas_ids\": [], \"materials_per_student_ids\": [], \"materials_per_group_ids\": [], \"status\": \"draft\", \"title\": \"California Geographic Activity\", \"subject\": \"earth\", \"grades\": [4], \"objective\": \"\", \"background\": \"\", \"materials_note\": \"\", \"assistant_setup\": \"\", \"teacher_setup\": \"\", \"procedure\": \"\", \"duration\": null, \"closure_duration\": null, \"assessment\": \"\", \"reflection\": \"\", \"note\": \"\", \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"updated_at\": { \"$date\": \"2012-08-28T17:34:48.000Z\" }, \"created_at\": { \"$date\": \"2012-08-28T17:34:48.000Z\" }, \"T\": \"act\" }, \"503d21f8f27227000200000f\": { \"_id\": { \"$oid\": \"503d21f8f27227000200000f\" }, \"assessment\": \"<ul><li>How has the sand and salt settled in the CD case?</li><li>Why did this happen?</li><li>What would happen if a river encountered a mixture like this?</li></ul>\", \"assistant_setup\": \"<ol><li>Read the idea sheet for this activity.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Based on the idea sheet and activity page, assemble the materials into appropriate groups.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Gather materials and arrange bins of supplies based on teacher’s grouping.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ol>\", \"background\": \"This activity is adapted from a <a href=\\\"http://www.raftbayarea.org/\\\">RAFT</a> (Resource Area for Teachers) <a href=\\\"http://www.raftbayarea.org/readpdf?isid=185\\\">idea sheet</a>. The science behind this activity is written on that sheet.<br>RAFT helps educators meet 21st century challenges by providing them with resources that help turn abstract and complex ideas into activities that students can grasp. Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-08-28T19:54:32.000Z\" }, \"duration\": 40, \"grades\": [2, 4, 5], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"Here’s some quick instructions on how to make a class demonstration that also demonstrates very well how water helps with erosion:<br><ol><li>Cut a small hole into the bottom of a container close to either of the shorter edges.</li><li>Place the container on top of a water-proof brick so that the hole is not covered.</li><li>Place both objects in a tray, make sure it can hold water.</li><li>Fill the cut container with the salt and black sand mixture pouring close to the edge opposite the hole.</li><li>Stop filling the container when the mixture starts to fall out the hole.</li><li>Observe how the black sand and the salt is layered.</li><li>Slowly pour water onto the mixture.</li><li>Observe how the water moves and how the water moves the mixture as well.</li></ol>\", \"objective\": \"Students simulate erosion and understand how the size and density of grains influence their movement.<div><br></div>\", \"procedure\": \"In addition to the procedure listed on the RAFT idea sheet, do the following:<br><br>Review vocabulary.<div><b><br></b></div>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000027\" }, { \"$oid\": \"4f28bdf6023c640001000028\" }, { \"$oid\": \"4f28bdf6023c640001000079\" }, { \"$oid\": \"4f28bdf6023c64000100007b\" }, { \"$oid\": \"4f28bdf6023c640001000089\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"<ul><li>What is a landslide?</li><li>What does it mean for something to be more dense?</li><li>Where do we see examples of settling in nature?</li></ul>\", \"term_ids\": [{ \"$oid\": \"503d24fff272270002000015\" }, { \"$oid\": \"503d254df272270002000019\" }], \"title\": \"Landslide!\", \"updated_at\": { \"$date\": \"2012-10-02T21:52:46.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"503d53a9f272270002000022\": { \"_id\": { \"$oid\": \"503d53a9f272270002000022\" }, \"assessment\": \"<ul><li>Why did the roller racers move?</li><li>How could we make them move faster?</li><li>What are other ways to store energy?</li></ul>\", \"assistant_setup\": \"<ol><li>Read the idea sheet for this activity.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Based on the idea sheet and activity page, assemble the materials into appropriate groups.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Gather materials and arrange bins of supplies based on teacher’s grouping.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ol>\", \"background\": \"<div>This activity is adapted from a <a href=\\\"http://www.raftbayarea.org/\\\">RAFT</a> (Resource Area for Teachers) <a href=\\\"http://www.raftbayarea.org/readpdf?isid=358\\\">idea sheet</a>. The science behind this activity is written on that sheet.<br>RAFT helps educators meet 21st century challenges by providing them with resources that help turn abstract and complex ideas into activities that students can grasp. Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!<br><br class=\\\"Apple-interchange-newline\\\"></div>\", \"closure_duration\": 15, \"created_at\": { \"$date\": \"2012-08-28T23:26:33.000Z\" }, \"duration\": 40, \"grades\": [2, 3], \"materials_note\": \"<ul><li>2 clear lids -- 93 mm (1.66”) diameter with a 4mm (5/32”) indented rim (DART 12CLR),&nbsp;each with a 5 mm (3/16”) center hole&nbsp;punched</li><li>straw, thin, stirrer 17.7 cm (7”) long,&nbsp;2.4 mm (3/32”) diameter&nbsp;</li><li>2 paper clips</li><li>one-sided corrugated sheet, flute size E,&nbsp;flutes parallel to the short side&nbsp;7.5 cm x 27.3 cm (3” x 10.75”)&nbsp;</li><li>adhesive foam block, single sided,&nbsp;2.3 cm x 4.6 cm (½” x 1”), 5 mm (3/16”) thick</li><li>2 pony beads, 8 mm (5/8”) diameter</li><li>rubber band, 7.5 cm long x 1.6 mm&nbsp;(3” x 1/16”) (#18), 2&nbsp;</li></ul>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f7b4aa67a11da0001000022\" }, { \"$oid\": \"4f875ab0dc4c210001000040\" }, { \"$oid\": \"506130d783f6050002000051\" }, { \"$oid\": \"5063acd371e54a000200001f\" }, { \"$oid\": \"506b603c7b70820002000015\" }, { \"$oid\": \"506b60797b70820002000017\" }, { \"$oid\": \"506b60947b70820002000019\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4f600f13da72410001000016\" }], \"note\": \"There are several variations of this exercise, including the “rollback can,” listed on at the bottom of the RAFT idea sheet.\", \"objective\": \"Students create a simple machine to observe energy conversion and how changes in stored energy can affect performance.<div><br></div>\", \"procedure\": \"In addition to the procedure listed on the RAFT idea sheet, do the following:<br><br>Review vocabulary.<div><br></div>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000028\" }, { \"$oid\": \"4f28bdf6023c640001000029\" }, { \"$oid\": \"4f28bdf6023c64000100002a\" }, { \"$oid\": \"4f28bdf6023c640001000045\" }, { \"$oid\": \"4f28bdf6023c640001000046\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<ul><li>Why do things move?</li><li>What types of energy are there?</li><li>How do we move things?</li></ul>\", \"term_ids\": [{ \"$oid\": \"4f87a80cdd735d0001000008\" }, { \"$oid\": \"4f87a820dd735d000100000c\" }, { \"$oid\": \"4f87a85fdd735d0001000010\" }, { \"$oid\": \"503d5507f272270002000026\" }, { \"$oid\": \"503d55d8f27227000200002a\" }], \"title\": \"Roller Racer\", \"updated_at\": { \"$date\": \"2012-10-02T21:53:53.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"50465ebbd69d6e0002000008\": { \"_id\": { \"$oid\": \"50465ebbd69d6e0002000008\" }, \"assessment\": \"<ul><li>What is a chemical symbol for?</li><li>How does the symbol relate to the element?</li><li>What symbols do you remember?</li></ul>\", \"assistant_setup\": \"<ol><li>After checking into the school office, go to the Hands for Science closet or storage.</li><li>Make sure each card in the elemental decks has a match and shuffle afterwards.</li><li>Place in each group bin the same number of elemental decks and a periodic table for each student.</li><li>Pack the group bins and take everything to the classroom around 5-10 minutes before the start of the activity.</li></ol>\", \"background\": \"This is a RAFT (Resource Area for Teachers) activity. They developed Elemental Match. &nbsp;<br><br>RAFT is great place to find activities from kindergarten through high school. They also sell activity kits and materials specifically to people working in education. You can find the standards, background, materials, assembly instructions, and procedure on the idea sheet for the activity at their website. &nbsp;Any information not on the idea sheet is on this page. &nbsp;Visit their <a href=\\\"http://raft.net\\\">website</a> for more activities. &nbsp;You can also view the <a href=\\\"http://www.raftbayarea.org/readpdf?isid=135\\\">idea sheet</a>.\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-09-04T20:04:11.000Z\" }, \"duration\": 20, \"grades\": [3, 5], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"An additional activity would be to make molecules using the cards once all the cards have been matched.\", \"objective\": \"Students connect an element’s name with it’s symbol.\", \"procedure\": \"The procedure can be found at RAFT's website on the idea sheet for this activity. \", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c64000100004c\" }, { \"$oid\": \"4f28bdf6023c640001000087\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<ul><li>What are the elements?</li><li>How can we use the periodic table of elements to identify them?</li><li>What is another way to write an element?</li></ul>\", \"term_ids\": [{ \"$oid\": \"5013baf1b312360002000024\" }, { \"$oid\": \"50465f5ed69d6e000200000c\" }, { \"$oid\": \"50465fbfd69d6e0002000010\" }], \"title\": \"Elemental Match\", \"updated_at\": { \"$date\": \"2012-09-04T21:30:12.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"504670f0d69d6e000200001a\": { \"_id\": { \"$oid\": \"504670f0d69d6e000200001a\" }, \"assessment\": \"<ul><li>Which planet moved the fastest around the sun?</li><li>Which planet moved the slowest?</li><li>What determines how fast a planet moves around the sun?</li></ul>\", \"assistant_setup\": \"<ol><li>Read the<a href=\\\"http://www.raftbayarea.org/readpdf?isid=566\\\">&nbsp;idea sheet</a>&nbsp;for this activity.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Based on the idea sheet and activity page, assemble the materials into appropriate groups (e.g count out the beads for each group -- 30 each of red, brown, black).</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Gather materials and arrange bins of supplies based on teacher’s grouping.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ol>\", \"background\": \"This activity is adapted from a <a href=\\\"http://www.raftbayarea.org/\\\">RAFT</a> (Resource Area for Teachers)<a href=\\\"http://www.raftbayarea.org/readpdf?isid=566\\\">&nbsp;idea sheet</a>. The science behind this activity is written on that sheet.<br>RAFT helps educators meet 21st century challenges by providing them with resources that help turn abstract and complex ideas into activities that students can grasp. Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-09-04T21:21:52.000Z\" }, \"duration\": 30, \"grades\": [0, 3, 5], \"links\": [{ \"_id\": { \"$oid\": \"509818109851920002000050\" }, \"note\": \"3min.&nbsp;In this video segment adapted from NOVA scienceNOW, learn about the debate over the definition of a planet. Historically, there has been no scientific definition for a planet, leaving astronomers with the difficult task of properly classifying new discoveries in our solar system, such as Ceres and Eris. However, in August 2006, members of the International Astronomical Union (IAU) passed a resolution that defined a planet. Under the new definition, Pluto is not classified as a planet, but rather as a dwarf planet along with Ceres and Eris.\", \"title\": \"Video: What is a Planet?\", \"url\": \"http://ca.pbslearningmedia.org/resource/hew06.sci.ess.eiu.planetdefine/what-is-a-planet/\" }, { \"_id\": { \"$oid\": \"50985b889851920002000064\" }, \"note\": \"4 min.&nbsp;In this video segment adapted from NOVA, learn how our solar system formed from a cloud of gas and dust more than 4.5 billion years ago. Watch video that features real satellite imagery as well as simulations to illustrate how small bodies in the early solar system collided with each other to form larger objects and early planets (protoplanets). See how computer simulations have shown that over tens of millions of years, collisions between hundreds of protoplanets formed the rocky inner planets we see today.\", \"title\": \"Video: How the Inner Solar System Formed\", \"url\": \"http://ca.pbslearningmedia.org/resource/flbe12.sci.ess.eiu.planetform/how-the-inner-solar-system-formed/\" }], \"materials_note\": \"<ul><li>Handouts -- 9 Heliocentric&nbsp;blackline masters or&nbsp;ruler, protractor and&nbsp;circle compass; chart of planet postions from web resource (please check idea sheet for details).</li><li></li><li><font>Pushpins, blue, red,&nbsp;</font>and yellow plastic&nbsp;<font>plus another color. May use masking tape around a&nbsp;straight-pin&nbsp;to create a \\\"flag\\\" if colored pins are not available.</font></li></ul>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f875602dc4c210001000027\" }, { \"$oid\": \"4f87563adc4c21000100002f\" }, { \"$oid\": \"4f8b2b8df400440001000051\" }, { \"$oid\": \"4fa0cbcd0d3d05000100003f\" }, { \"$oid\": \"50981533985192000200004a\" }], \"materials_per_student_ids\": [], \"note\": \"<br>\", \"objective\": \"Students learn the orbits of the inner planets and how the length of a year is determined for each planet.<div><br></div>\", \"procedure\": \"<font>In addition to the procedure listed on the RAFT idea sheet, do the following:</font><div><ol><li><font>Show the class the video: <i>What is a Planet?</i> (see link below).</font></li><li><font>Follow the procedure listed on the&nbsp;<a href=\\\"http://www.raftbayarea.org/readpdf?isid=566\\\">idea sheet</a>.</font></li></ol></div>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c64000100005c\" }, { \"$oid\": \"4f28bdf6023c6400010000a1\" }, { \"$oid\": \"4f28bdf6023c6400010000a3\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"<ul><li>What are the names and the order of the inner planets?</li><li>How do the planets move around the sun?</li><li>How can we describe the location of the planets in our solar system?</li></ul>\", \"term_ids\": [{ \"$oid\": \"501c1f8d8c154c0002000022\" }, { \"$oid\": \"5046711fd69d6e000200001e\" }, { \"$oid\": \"50467134d69d6e0002000022\" }, { \"$oid\": \"50467147d69d6e0002000026\" }, { \"$oid\": \"5046715bd69d6e000200002a\" }, { \"$oid\": \"5046716dd69d6e000200002e\" }, { \"$oid\": \"50467184d69d6e0002000032\" }], \"title\": \"Race Around the Sun\", \"updated_at\": { \"$date\": \"2012-11-05T19:49:02.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"50469bc6d69d6e000200003c\": { \"_id\": { \"$oid\": \"50469bc6d69d6e000200003c\" }, \"assessment\": \"<ul><li><font>Which ice mountain melted fastest? Slowest?</font></li><li><font>What caused this to happen?</font></li><li><font>How does this relate to geographic features like the Grand Canyon or the glaciers in the Sierra </font><font>Nevada</font><font>?</font></li></ul>\", \"assistant_setup\": \"<ol><li><font>A few days before the activity verify there is water being frozen for the activity. &nbsp;There should be three cups per group. <font>One cup should have a marked wooden </font><font>stick inside the water and two cups should have just water.</font></font></li><li><font>After checking into the school office, go to the Hands for Science closet or storage.</font></li><li><font>Assemble group bins so that there is one set of three cups for each group. See the idea sheet for the rest of the materials list.</font></li><li><font>Include towels for clean up inside the classroom</font></li></ol>\", \"background\": \"This is a RAFT (Resource Area for Teachers) activity. They developed Mini Ice Mountains. &nbsp;<div><font><br></font>RAFT is great place to find activities from kindergarten through high school. They also sell activity kits and materials specifically to people working in education. You can find the standards, background, materials, assembly instructions, and procedure on the idea sheet for the activity at their website. &nbsp;Any information not on the idea sheet is on this page. &nbsp;Visit their <a href=\\\"http://raft.net\\\">website</a> for more activities. &nbsp;You can also view the <a href=\\\"http://www.raftbayarea.org/readpdf?isid=647\\\">idea sheet</a>.</div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-09-05T00:24:38.000Z\" }, \"duration\": 40, \"grades\": [1, 4], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"A great way to show how this relates to the world would be to show local geographic features and how they were shaped by the flow of water. \", \"objective\": \"Students learn how water causes erosion and the effect its different phases.\", \"procedure\": \"The procedure can be found at RAFT's website on the idea sheet for this activity.\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000014\" }, { \"$oid\": \"4f28bdf6023c640001000015\" }, { \"$oid\": \"4f28bdf6023c640001000079\" }, { \"$oid\": \"4f28bdf6023c64000100007b\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"<ul><li>What shapes the surface of the earth?</li><li>How do rivers and streams look?</li><li>What is unique about water when it freezes in comparison to other materials?</li></ul>\", \"term_ids\": [{ \"$oid\": \"4f53dd6dfeb00c0001000030\" }, { \"$oid\": \"503d254df272270002000019\" }, { \"$oid\": \"50469c46d69d6e0002000040\" }, { \"$oid\": \"50469c56d69d6e0002000044\" }, { \"$oid\": \"50469c8fd69d6e0002000048\" }], \"title\": \"Mini Ice Mountains\", \"updated_at\": { \"$date\": \"2012-09-25T20:46:05.000Z\" }, \"user_id\": { \"$oid\": \"500f07cb5103340002000011\" }, \"T\": \"act\" }, \"504ac2125255aa0002000007\": { \"_id\": { \"$oid\": \"504ac2125255aa0002000007\" }, \"standard_ids\": [], \"term_ids\": [], \"materials_per_clas_ids\": [], \"materials_per_student_ids\": [], \"materials_per_group_ids\": [], \"status\": \"draft\", \"title\": \"Static Electricity\", \"subject\": \"phys\", \"grades\": [4], \"objective\": \"<font>http://www.teachervision.fen.com/electricity/lesson-plan/63871.html</font>\", \"background\": \"\", \"materials_note\": \"\", \"assistant_setup\": \"\", \"teacher_setup\": \"\", \"procedure\": \"\", \"duration\": null, \"closure_duration\": null, \"assessment\": \"\", \"reflection\": \"\", \"note\": \"\", \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"updated_at\": { \"$date\": \"2012-09-08T03:57:06.000Z\" }, \"created_at\": { \"$date\": \"2012-09-08T03:57:07.000Z\" }, \"T\": \"act\" }, \"50564226bc0c230002000004\": { \"_id\": { \"$oid\": \"50564226bc0c230002000004\" }, \"assessment\": \"<font><div><ol><li>After students have finished observations, the teacher facilitates a whole group discussion and inferences are made about salt versus tap water, and animals ability to float more easily in salt water.</li><li>Activity reinforces the scientific process &amp; how scientists collect information, record data &amp; make observations.</li><li>Shows students the powers of observation, inference, and analysis.</li></ol></div><div>Additional assessments:</div></font><ol><li>Test at end of unit regarding adaptations in water environments.</li><li>Vocabulary test.</li><li>Informal assessment during inquiry.</li><li>Check science journals or worksheets for understanding.</li></ol><font><br></font>\", \"assistant_setup\": \"<ol><li>Gather materials and arrange bins of supplies based on teacher’s grouping.</li><li>Teacher will inform if need to create labels for&nbsp;containers&nbsp;(see procedure) or if students will do so.</li><li>Fill the pitchers with water in order to provide another water source during the experiment, that way the students do not need to crowd around the faucet to retrieve their water.</li><li>Wait to follow teacher’s instructions.</li><li>Assist during the lesson.</li><li>After the session is finished, clean-up (rinse&nbsp;containers, wipe down desks, tables, etc.) and put away supplies. Leave clean materials organized and ready for the teacher to put away if you don’t know where they belong.</li></ol>\", \"attachments\": [{ \"_id\": { \"$oid\": \"50564b5cbc0c230002000029\" }, \"caption\": \"How Does Salt Affect the Way Things Float in Water?\", \"w\": 612, \"h\": 792, \"attachment\": \"62fe8dc433.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 37088 }], \"background\": \"<div>Some animals float in water. An egg will float in salt and sink in fresh or tap water. Salt water supports ocean animals, helping them stay afloat as they swim or move.</div><div><br></div><div><b>Why does the egg float in salt water?</b></div><div><ul><li>Salt water is denser than ordinary tap water, the denser the liquid the easier it is for an object to float in it.</li><li>Density is weight per unit volume of the object. The densities of solids remain constant while that of liquids and gases change with a change in temperature.</li><li>It is found that egg is of the same density as that of normal water. This means that both of them weigh the same per unit volume. When salt is added to water, some more mass is added into it without any change in the volume. The weight of unit volume of normal water will be less than that of salt water based on the quantity of salt that was added. So.. if you were to fill two containers with equal amounts (volume) of water, one of salt water, the other tap water, the salt water would weigh more. (That is a great and easy demonstration with a balance scale to do prior to this activity).</li><li>The density of egg remains the same even though that of water changes. As the density of salt water now is more than the density of the egg, egg floats in salt water. Not only salt, but anything that dissolves in water like sugar will also show a similar phenomenon.</li></ul></div><div>This activity reinforces the scientific process &amp; how scientists collect information, record data &amp; make observations. Shows students the powers of observation, inference, and analysis.</div><div><br></div><div><br></div><div><br></div><div><b>Steps of the scientific process:</b></div><div><ol><li>Form a hypothesis</li><li>Test your hypothesis</li><li>Draw conclusions</li></ol></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-09-16T21:18:31.000Z\" }, \"duration\": 30, \"grades\": [3], \"links\": [{ \"_id\": { \"$oid\": \"50611eac83f6050002000035\" }, \"note\": \"This is a video from teachersdomain.org. Please register (you may do so temporarily) to enjoy their professional educational videos for free.&nbsp;\", \"title\": \"Density and Buoyancy: Making Eggs Float\", \"url\": \"http://ca.pbslearningmedia.org/resource/phy03.sci.phys.matter.zegg/density-and-buoyancy-making-eggs-float/\" }], \"materials_note\": \"<ul><li>Graduated cylinders may be used instead of measuring cups.</li><li>Sea salt or Kosher salt is preferable to table salt since it has larger crystals.</li><li>The egg must be fresh, or it may not float.</li><li>Post-its may be used instead of masking tape.</li><li>Two containers per group. Mixing bowls may replace the container, as long as they each hold at least 2 cups of water.</li><li>Small scoopers may be used instead of plastic spoons.</li></ul>\", \"materials_per_clas_ids\": [{ \"$oid\": \"508884c899b7220002000008\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f600e20da72410001000011\" }, { \"$oid\": \"4f601e97da72410001000028\" }, { \"$oid\": \"4f8b2038f40044000100003c\" }, { \"$oid\": \"5056430fbc0c230002000008\" }, { \"$oid\": \"5056431ebc0c23000200000c\" }, { \"$oid\": \"50564b9bbc0c23000200002f\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"<b>Easy Extension if you have time:</b><div>Fill half of the cup with water, add salt, stir. Fill the rest of the glass with tap water, almost to the top, don't stir it in. Now, lower the egg into the liquid and watch as it drops through the normal tap water until it reaches the salty water, at this point the water is dense enough for the egg to float.&nbsp;If you were careful when you added the tap water to the salt water, they will not have mixed, enabling the egg to amazingly float in the middle of the glass.</div>\", \"objective\": \"<div><div>To compare the effects of salt water versus fresh water on their environments.</div></div><div>Practice measurement skills.</div><div><br></div>\", \"procedure\": \"<ol><li>Review previous lessons on scientific method.</li><li>In their science journals, notebooks, or on the handout provided, have students write down a hypothesis. They can do this individually or confer with their group.</li><li>If water is salty, then___________.</li><li>Demonstrate how to measure in a cup, informing students that it is better to add small amounts gradually, then to fill the cup beyond the desired amount.</li><li>pour 8 oz. of tap water into each container. Label one&nbsp;container&nbsp;tap water, and the other salt water.</li><li>Pour 1 ounce of sea salt into the&nbsp;container&nbsp;labeled salt water (1/8 c = 1 oz, exact measurements are not necessary, but are important for the students to practice the skill of measuring).</li><li>Stir the mixture.</li><li>Carefully place the fresh egg into the&nbsp;container&nbsp;of water. Record what happens.</li><li>Now place the egg in the container of salt water.&nbsp;Record what happens.</li><li><font>After carefully removing the egg from the salt water&nbsp;container, record observations on chart or in science journal (If the egg didn't float, try adding more salt, one ounce at a time until it does).</font></li><li>Write these conclusions on the back of the handout or in science journal:</li></ol><ul><li>Does the egg float in fresh water?</li><li>Does the egg float in salt water?</li><li>From these observations, can you infer how salt affects the way animals move in the oceans?</li></ul><b>See notes below for an easy extension to this activity.</b>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000054\" }, { \"$oid\": \"4f28bdf6023c640001000061\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<ol><li>Before activity, teacher explores topic of adaptations in water environments.</li><li>If not using science journals, make copies of attachment,<i>&nbsp;How Does Salt Affect the Way Things Float in Water?</i> It's at the bottom of this page.</li><li>Seek prior knowledge regarding their experiences floating in water (sea vs. pools and lakes), plus any observations students might share regarding flotation in general (how it felt, easier to float in the ocean, surfing, etc.).</li><li><font>Review vocabulary.</font></li><li><font>Remind students that they are scientist, hypothesizing, using the scientific method, and performing an inquiry investigation using scientific tools.</font></li><li>Watch video (see link below) and show to class if time permits.</li></ol>\", \"term_ids\": [{ \"$oid\": \"4f2f5b13a056bc0001000010\" }, { \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"4f53e1f8feb00c0001000038\" }, { \"$oid\": \"4f8b1f08f40044000100002d\" }, { \"$oid\": \"503d24fff272270002000015\" }, { \"$oid\": \"50564365bc0c230002000010\" }, { \"$oid\": \"50564388bc0c230002000014\" }, { \"$oid\": \"505643a4bc0c230002000018\" }, { \"$oid\": \"505643c4bc0c23000200001c\" }], \"title\": \"How Does Salt Affect the Way Things Float in Water?\", \"updated_at\": { \"$date\": \"2013-11-17T22:35:22.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"5057b64c443f300002000008\": { \"_id\": { \"$oid\": \"5057b64c443f300002000008\" }, \"assessment\": \"<div>Each group shares observations and results.</div>Review questions from the teacher setup section.\", \"assistant_setup\": \"<ul><li><font>Read the </font><a href=\\\"http://www.raftbayarea.org/readpdf?isid=307\\\">idea sheet</a><font> for this activity.</font></li><li>After checking into the school office, retrieve the H4S bin in the designated area and bring to the classroom. Go to the faculty room freezer and retrieve the ice. It should be in a bag labeled HandsforScience.</li><li>Based on the idea sheet and activity page, assemble the materials into appropriate groups.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Gather materials and arrange bins of supplies based on teacher’s grouping.</li><li>Create an example model following the instructions under the \\\"assembly\\\" heading on the idea sheet.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ul>\", \"background\": \"<div><font>This activity is adapted from a <a href=\\\"http://www.raftbayarea.org/main\\\">RAFT</a> (Resource Area for Teachers) <a href=\\\"http://www.raftbayarea.org/readpdf?isid=307\\\">idea sheet</a>. The science behind this activity is written on that sheet.</font></div><div><font>RAFT helps educators meet 21st century challenges by providing them resources to turn abstract and complex ideas into activities that students can grasp.&nbsp;</font>Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!</div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-09-17T23:46:21.000Z\" }, \"duration\": 45, \"grades\": [3, 4], \"links\": [{ \"_id\": { \"$oid\": \"50580c9b443f30000200002f\" }, \"note\": \"Scientific American published a demonstration that is closely aligned with this activity.\", \"title\": \"How Animals Stay Warm with Blubber\", \"url\": \"http://www.scientificamerican.com/article.cfm?id=bring-science-home-animals-stay-warm-with-blubber\" }, { \"_id\": { \"$oid\": \"50580eeb443f30000200003e\" }, \"note\": \"<font>This is a video from&nbsp;pbslearningmedia.org. Please register (you may do so temporarily) to enjoy their professional educational videos for free.&nbsp;</font>The segment is adapted from the National Film Board of Canada examines the unique, yet fragile Arctic marine ecosystem. A scientist discusses the connections that exist in the Arctic food web, whose overall lack of diversity makes many of its members prone to extinction as change occurs in their sea ice habitat. The video explains that as global warming continues and sea ice disappears from the Arctic Ocean, new species from warmer, more southern oceans will eventually replace those species unable to adapt to the changing conditions.\", \"title\": \"How the Arctic Ecosystem Might Change\", \"url\": \"http://ca.pbslearningmedia.org/resource/ean08.sci.life.eco.arctichange/how-the-arctic-ecosystem-might-change/\" }], \"materials_note\": \"<br>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f459141eeaf0a0001000017\" }, { \"$oid\": \"4f78f0522ab40b0001000025\" }, { \"$oid\": \"4fd167a76a51d70003000006\" }, { \"$oid\": \"501bdcf481a527000200000e\" }, { \"$oid\": \"50580d28443f300002000035\" }, { \"$oid\": \"50580d8e443f300002000039\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"\", \"objective\": \"<font>Students will test several materials to determine their insulation properties, simulating the ability of ocean mammals to survive in arctic conditions.</font><div><font><br></font></div><div><font><br></font></div>\", \"procedure\": \"<div><font>In addition to the procedure listed on the RAFT idea sheet, do the following:</font></div><div><ol><li><font>Show the class the sample \\\"blubber glove\\\" that the science aide has prepared.</font></li><li><font>Each group will make one blubber glove with materials&nbsp;</font></li><li><font><font>Students will need&nbsp;assistance&nbsp;with step 3 of the assembly, as the duct tape must be secure.</font></font></li><li><font>Write observations in science journals before and after each student has a turn to stick a hand inside the glove.</font></li><li><font>Put the thermometer in the bowl of ice water and record the temperature before and after trying out the glove.</font></li><li><font>If time permits, allow groups to exchange gloves and note the differences.</font></li></ol></div><div><font><br></font></div>\", \"reflection\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000054\" }, { \"$oid\": \"4f28bdf6023c640001000072\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<ul><li>Show the video (link below) about the how the arctic ecosystem might change.</li><li>Why is ice important to the Arctic ecosystem and its wildlife?</li><li>How do the mammals survive in the arctic if they are warm-blooded like us?</li><li>Could you survive in the arctic? Why or why not?</li><li>What keeps you warm on a cold day?</li><li>Have you ever been so cold that nothing seemed to make you warm? Why?</li><li>Write expectations/question(s) for observations and/or results on the board so that the students know what to write in their science journals.</li></ul><div><br></div><div><br></div>\", \"term_ids\": [{ \"$oid\": \"50580acf443f30000200001c\" }, { \"$oid\": \"50580b19443f300002000020\" }, { \"$oid\": \"50580ba4443f300002000026\" }, { \"$oid\": \"50580c54443f30000200002a\" }], \"title\": \"Marine Mammal Survival and Insulation\", \"updated_at\": { \"$date\": \"2012-09-25T02:53:05.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"505fabe323d0730002000008\": { \"_id\": { \"$oid\": \"505fabe323d0730002000008\" }, \"assessment\": \"<ul><li>Revisit the questions and responses from the teacher set-up section.</li><li>Ask students to name a real-life object and its model equivalent.</li><li>Can you think of any limitations of a model, or when a model might prove confusing? (sometimes models oversimplify things, such as a model of a computer that cannot demonstrate the&nbsp;electricity&nbsp;transfered between circuits, or a teaching model of the digestive system that leaves out liquid parts, or a model of a water molecule that cannot demonstrate the&nbsp;movement of the hydrogen and oxygen atoms, or an airplane model that doesn't have accurate wing dimensions).</li></ul>\", \"assistant_setup\": \"<ul><li><font>Read the <a href=\\\"http://www.raftbayarea.org/readpdf?isid=228\\\">idea sheet</a> for this activity.</font></li><li><font>Read the notes in the materials section, paying careful attention to the 2D and 3D apple models.</font></li><li>After checking into the school office, retrieve the H4S bin from the designated area.</li><li><font>Review the printed activity page, paying special attention to the needs of the groups/grouping.</font></li><li><font>Based on the idea sheet and activity page, assemble the materials into appropriate groups.</font></li><li><font>Put on the H4S blue vest located in the materials bin.<br></font></li><li><font>Put the real apples, plastic knives and paper towels into the group bins to start, distribute the remaining apple models </font>according to the teacher's instructions.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ul>\", \"background\": \"<div><font>This activity is adapted from a <a href=\\\"http://www.raftbayarea.org/main\\\">RAFT</a> (Resource Area for Teachers) <a href=\\\"http://www.raftbayarea.org/readpdf?isid=228\\\">idea sheet</a>. The science behind this activity is written on that sheet.<br>RAFT helps educators meet 21st century challenges by providing them with resources that help turn abstract and complex ideas into activities that students can grasp. Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!</font></div><div><font><br></font></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-09-24T00:40:03.000Z\" }, \"duration\": 30, \"grades\": [0, 1, 2, 3, 4, 5], \"links\": [{ \"_id\": { \"$oid\": \"505ff45783f6050002000014\" }, \"url\": \"http://plato.stanford.edu/entries/models-science/\", \"title\": \"Models in Science\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"506111c883f605000200001f\" }, \"url\": \"http://www.sciencefairadventure.com/Make_a_Fuse_Model.aspx\", \"title\": \"Make a Model of a Fuse\", \"note\": \"\" }], \"materials_note\": \"Paper plate may be colored, although white is easier to use as the apple will show up well against the white background.\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f85117d79626d000100001a\" }, { \"$oid\": \"4f85119f79626d0001000020\" }, { \"$oid\": \"4f9e1f107b922d0001000036\" }, { \"$oid\": \"505fef0483f605000200000b\" }, { \"$oid\": \"505fefbe83f605000200000e\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"\", \"objective\": \"<font>Students will be able to observe and&nbsp;analyze&nbsp;a real apple, and compare it to apple models.</font><div><font><br></font></div>\", \"procedure\": \"<div><font>In addition to the procedure listed on the RAFT idea sheet, do the following:</font></div><div><ol><li>According to the idea sheet present the apple models in stages, starting with a real apple, plastic model of an apple, photo, cutout, cartoon, word \\\"apple,\\\" the word \\\"apple\\\" in another language, and ending with the word \\\"apple\\\" in another language that does not have a traditional alphabet.</li><li>Depending on your management style, have the science aide pass out progressive renditions of the apple, allow one person from each group to retrieve the each item, pass the item out to all the groups at the same time, or do whatever works best for you. The items will be numbered and grouped in plastic bags so that you won't loose track.</li><li>The idea sheet offers a challenge that group with the most unique items wins, if you do this, ask each group to work quietly so that they don't share their \\\"lists.\\\"</li><li>Repeat step five as often as time allows, using the apple model, photos, pictures, and word \\\"apple,\\\" as stated above.</li><li>Depending upon the grade level of the students, have them generate individual lists in their science journals, group lists, or if the activity is done as a center for pre-writing students, have them dictate or simply discuss the attributes of the apple and each subsequent model.</li><li>If time allows, test their&nbsp;observation&nbsp;skills: have students close their eyes for a minute while you ask them to imagine as many things as they can that they remember from their classroom. When they open their eyes, set a timer and have them write down those things. Share the lists as a group. Ask if they think their observation skills have improved after this activity.</li></ol></div>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c64000100000e\" }, { \"$oid\": \"4f28bdf6023c64000100000f\" }, { \"$oid\": \"4f28bdf6023c640001000020\" }, { \"$oid\": \"4f28bdf6023c64000100003b\" }, { \"$oid\": \"4f28bdf6023c64000100003e\" }, { \"$oid\": \"4f28bdf6023c64000100005e\" }, { \"$oid\": \"4f28bdf6023c64000100005f\" }, { \"$oid\": \"4f28bdf6023c64000100007c\" }, { \"$oid\": \"4f28bdf6023c6400010000a5\" }, { \"$oid\": \"4f28bdf6023c6400010000a6\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<ul><li>Please read the notes in the materials section, paying careful attention to the 2D and 3D apple models.</li><li>Let's talk about models. Does anyone know what that word means?</li><li><font>Can someone give me an example of a model? (train set, Disney&nbsp;figurines, 3D world in gaming, tennis racket in Wii game, iPhone app of map or food icon, etc.)</font></li><li><font>Have you ever been fooled into thinking that a model was real? (wax figure, Halloween fake candy, reality TV)</font></li></ul>\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"505fed9a83f6050002000005\" }, { \"$oid\": \"505fede683f6050002000007\" }], \"title\": \"Model Apple - Learning about Scientific Models\", \"updated_at\": { \"$date\": \"2012-10-18T05:32:00.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"506120e983f605000200003c\": { \"_id\": { \"$oid\": \"506120e983f605000200003c\" }, \"assessment\": \"<ul><li>Informally assess student understanding of habitat, differences between species and predator/prey relationship.</li></ul><div><div><br></div></div>\", \"assistant_setup\": \"<ul><li>Read the <a href=\\\"http://www.raftbayarea.org/readpdf?isid=648\\\">idea sheet</a> for this activity.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>See notes regarding handouts in the materials section. Check with teacher to determine if you need to make copies of the <a href=\\\"http://www.raftbayarea.org/readpdf?isid=648\\\">handouts</a>&nbsp;(last two pages)&nbsp;for students.</li><li>Based on the idea sheet and activity page, assemble the materials into appropriate groups (e.g count out the beads for each group -- 30 each of red, brown, black).</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Gather materials and arrange bins of supplies based on teacher’s grouping.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ul>\", \"background\": \"This activity is adapted from a RAFT (Resource Area for Teachers) <a href=\\\"http://www.raftbayarea.org/readpdf?isid=648\\\">idea sheet</a>. The science behind this activity is written on that sheet.<br>RAFT helps educators meet 21st century challenges by providing them with resources that help turn abstract and complex ideas into activities that students can grasp. Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!<div><br></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-09-25T03:11:37.000Z\" }, \"duration\": 45, \"grades\": [3, 4], \"links\": [{ \"_id\": { \"$oid\": \"506125df83f6050002000040\" }, \"note\": \"In this video segment from&nbsp;Outdoor Nevada, Brian Wignall speaks with a naturalist about four species of hummingbirds that inhabit the Nevada region: the Anna's Hummingbird, the Costa's Hummingbird, the Black-chinned Hummingbird, and the Rufous Hummingbird. The segment examines the physical traits of these related species, as well as their nesting, feeding, and migration behaviors. It also describes some of the basic differences between male and female hummingbirds.\", \"title\": \"Hummingbirds\", \"url\": \"http://ca.pbslearningmedia.org/resource/klvx09.vid.klvxhumming/hummingbirds/\" }, { \"_id\": { \"$oid\": \"509742839851920002000004\" }, \"note\": \"<font>How did these birds survive for over 9 million years without changing their biology? </font>***In this video segment from Wild Nevada, host Brian Wignall and biologist Cris Tomlinson discuss the greater sandhill crane, a large bird that stops in Nevada to feed on grains and other plant crops during its spring migration. Sandhill cranes mate for life, and the partners communicate with one another using a distinctive call. As one of North America's oldest bird species, dating back at least 9 million years, sandhill cranes protect themselves effectively against predators such as coyotes, relying on keen eyesight as one of their primary defense mechanisms.\", \"title\": \"Sandhill Cranes\", \"url\": \"http://ca.pbslearningmedia.org/resource/klvx09.vid.klvxhumming/hummingbirds/\" }], \"materials_note\": \"<ul><li><a href=\\\"http://www.raftbayarea.org/readpdf?isid=648\\\">Bird Evolution Table</a>, page 6, 2 copies per group.</li><li><font><a href=\\\"http://www.raftbayarea.org/readpdf?isid=648\\\">Critter Evolution Table</a>, page 7, 2 copies per group.</font></li><li>Clear tape is best.</li><li>210 regular pony beads,&nbsp;70 each of red, brown, black.</li><li>2 felt sheets or similar fabric, 1 black and 1&nbsp;red, 30 x 46 cm (12” x 18”)</li><li>2oz portion cups are best, 1 per player, so a group of 6 would need 6 cups</li><li>3 clothespins</li><li>3 sets of chopsticks</li><li>4 forks</li><li>4 spoons</li></ul>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f459166eeaf0a000100001f\" }, { \"$oid\": \"4f600e20da72410001000011\" }, { \"$oid\": \"4f87563adc4c21000100002f\" }, { \"$oid\": \"4fa16ee50d3d050001000059\" }, { \"$oid\": \"506130d783f6050002000051\" }, { \"$oid\": \"506130ed83f6050002000054\" }, { \"$oid\": \"5061312983f6050002000056\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4fa0cbcd0d3d05000100003f\" }], \"note\": \"\", \"objective\": \"<div>Simulate evolution with some colorful “critters” and carnivorous “beaky&nbsp;birds”. Simulations are helpful to demonstrate processes like evolution&nbsp;that take place over many years. Observe how adaptations such as&nbsp;camouflage help organisms survive and pass on traits to offspring. Recognize evolution happening simultaneously in both the predator and&nbsp;prey (bird and critter) populations.</div><div><br></div>\", \"procedure\": \"<font>In addition to the procedure listed on the RAFT idea sheet, do the following:</font><div><ol><li><font>Show the class the hummingbird video (see link below).</font></li><li><font>Follow the procedure listed on the <a href=\\\"http://www.raftbayarea.org/readpdf?isid=648\\\">idea sheet</a>.</font></li><li><font><font><font>Use document camera or other&nbsp;familiar&nbsp;device to play a round of&nbsp;</font></font><font>Evolution by Natural Selection as a class.</font></font></li><li><font><font>Pay attention to rules, such as, if a \\\"critter (bead)\\\" falls off of the felt \\\"habitat,\\\" it is dead; and the \\\"bird stomach (portion cup)\\\" must be held in one hand and the beak in the other - this makes the game more difficult to play.</font></font></li><li>If time does not permit, eliminate steps 7-13 and simply play two rounds of the game allowing students to use different \\\"beaks.\\\"</li><li>As a class, compare results of \\\"bird evolution.\\\" Take note of students who may be adept at using particular tools (chopsticks, spoon) that might have influenced game results.</li><li>Remind students that natural selection is a mechanism of evolution that best explains&nbsp;change over time in organism populations. &nbsp;Natural selection is not synonymous with evolution,&nbsp;<font>however, because there are several mechanisms at work that allow selection to take place.</font></li></ol></div>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000052\" }, { \"$oid\": \"4f28bdf6023c640001000070\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<ul><li>Preview Hummingbird video (see link below).</li><li>See notes regarding <a href=\\\"http://www.raftbayarea.org/readpdf?isid=648\\\">handouts</a> in the materials section. Inform science aide if you need him/her to make copies&nbsp;(2 per group)&nbsp;for students.</li><li>Review vocabulary.</li><li>Remind students that natural selection is a mechanism of evolution that best explains&nbsp;change over time in organism populations. &nbsp;Natural selection is not synonymous with evolution,&nbsp;<font>however, because there are several mechanisms at work that allow selection to take place.</font></li></ul>\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"50564388bc0c230002000014\" }, { \"$oid\": \"5061261b83f6050002000042\" }, { \"$oid\": \"506126b083f6050002000044\" }, { \"$oid\": \"506126fe83f6050002000046\" }, { \"$oid\": \"5061271883f6050002000049\" }, { \"$oid\": \"5062167495dae6000200001e\" }], \"title\": \"Evolution by Natural Selection\", \"updated_at\": { \"$date\": \"2013-04-22T04:24:20.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50621a5695dae60002000026\": { \"_id\": { \"$oid\": \"50621a5695dae60002000026\" }, \"assessment\": \"\", \"assistant_setup\": \"Read the <a href=\\\"http://www.raftbayarea.org/readpdf?isid=641\\\">idea sheet</a> for this activity.<br>After checking into the school office, retrieve the H4S bin in the designated area.<br>Based on the idea sheet and activity page, assemble the materials into appropriate groups. Since the students will make individual fossils, use the shoebox bins to help divide items needed.<br>Put on the H4S blue vest located in the materials bin.<br>Gather materials and arrange bins of supplies based on teacher’s grouping.<br>Assist during the activity.<br>Wipe the plastic bins clean and throw away consumable items.<br>Repack the materials bin and return to the designated area.<div><br><div><br></div></div>\", \"background\": \"This activity is adapted from a RAFT (Resource Area for Teachers)<a href=\\\"http://www.raftbayarea.org/readpdf?isid=641\\\"> idea sheet</a>. The science behind this activity is written on that sheet.<br>RAFT helps educators meet 21st century challenges by providing them with resources that help turn abstract and complex ideas into activities that students can grasp. Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-09-25T20:55:50.000Z\" }, \"duration\": 30, \"grades\": [2, 3], \"links\": [{ \"_id\": { \"$oid\": \"506220fe95dae6000200002a\" }, \"note\": \"This is a video from&nbsp;pbslearningmedia.org. Please register (you may do so temporarily) to enjoy their professional educational videos for free. \", \"title\": \"The Grand Canyon: The Top Two Rock Layers\", \"url\": \"http://ca.pbslearningmedia.org/resource/ess05.sci.ess.earthsys.footprint/the-grand-canyon-the-top-two-rock-layers/\" }, { \"_id\": { \"$oid\": \"5062212195dae6000200002e\" }, \"note\": \"This is a video from&nbsp;pbslearningmedia.org. Please register (you may do so temporarily) to enjoy their professional educational videos for free. \", \"title\": \"Fossils\", \"url\": \"http://ca.pbslearningmedia.org/resource/idptv11.sci.ess.earthsys.d4kfos/fossils/\" }], \"materials_note\": \"<div><ul><li>paper cup works better than plastic, about&nbsp;150 ml (5 oz)</li><li>clay, air drying&nbsp;(commercial or&nbsp;homemade) or nonhardening clay</li><li>natural materials&nbsp;such as shells,&nbsp;leaves, bark, small&nbsp;bones</li><li>Plaster of Paris</li><li>plastic bags must be reclosable (zip-loc type) 1 liter/ 1&nbsp;quart bags</li><li>real&nbsp;fossils or pictures of&nbsp;fossils&nbsp;</li></ul></div>\", \"materials_per_clas_ids\": [{ \"$oid\": \"5062268995dae60002000033\" }], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4f459166eeaf0a000100001f\" }, { \"$oid\": \"4f87564edc4c210001000033\" }, { \"$oid\": \"4fc4552ca4d1f80003000015\" }, { \"$oid\": \"4fd167a76a51d70003000006\" }, { \"$oid\": \"5013b3c9b312360002000012\" }, { \"$oid\": \"5062269395dae60002000035\" }, { \"$oid\": \"506226d895dae60002000038\" }], \"note\": \"\", \"objective\": \"Examine how fossils tell us about the past and create a model of a fossil.<div><br></div>\", \"procedure\": \"In addition to the procedure listed on the RAFT idea sheet, do the following:<div><br></div><div>Show one or all of the videos provided by the links below.</div>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000039\" }, { \"$oid\": \"4f28bdf6023c640001000057\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"Use a KWL chart or open class discussion to determine students' prior knowledge of fossils. If you have already studied fossils, review that information.<div><br></div>\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"506227d295dae6000200003a\" }, { \"$oid\": \"506227fd95dae6000200003c\" }], \"title\": \"Modern Day Fossils\", \"updated_at\": { \"$date\": \"2012-09-25T21:57:15.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"506294db71e54a0002000005\": { \"_id\": { \"$oid\": \"506294db71e54a0002000005\" }, \"assessment\": \"Review the difference between bugs and insects.<div>Check for understanding through class discussion, one-one conversations, and science journals.</div><div>Examine findings after bugs have been collected and released.</div>\", \"assistant_setup\": \"<ol><li>Read the idea sheet for this activity.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Based on the idea sheet and activity page, assemble the materials into appropriate groups.</li><li>Check with the teacher to find out if you need to punch the holes in the portion cups prior to assembly of \\\"bug pooters\\\" (this will depend upon the class level).</li><li>If time permits, assemble a bug catcher for the teacher to use as a model as she explains the procedure to the class.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Gather materials and arrange bins of supplies based on teacher’s grouping.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return it to the designated area.</li></ol>\", \"background\": \"<font>This activity is adapted from a <a href=\\\"http://www.raftbayarea.org/?__utma=1.1969717155.1339092642.1350404436.1350404488.43&amp;__utmb=1.5.10.1350404488&amp;__utmc=1&amp;__utmx=-&amp;__utmz=1.1345866889.13.2.utmcsr=36ohk6dgmcd1n-c.c.yom.mail.yahoo.net|utmccn=(referral)|utmcmd=referral|utmcct=/om/api/1.0/openmail.app.invoke/36ohk6dgmcd1n/11/1.0.35/us/en-US/view.html/0&amp;__utmv=-&amp;__utmk=56663594\\\">RAFT</a> (Resource Area for Teachers) <a href=\\\"http://www.raftbayarea.org/readpdf?isid=12\\\">idea sheet</a>. The science behind this activity is written on that sheet.</font><br><font>RAFT helps educators meet 21st century challenges by providing them with resources that help turn abstract and complex ideas into activities that students can grasp. Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!</font><div><br></div><div><font>Bugs and insects are not the&nbsp;synonymous.</font></div><div>\\\"True bugs\\\" have a mouth that is shaped like a straw or needle, which is called a stylet or rostrum. They also have a very specific membranous wing, which is thick and darkly colored where it connects to the body,&nbsp;but becomes thin and almost transparent toward its end. Insects that do not have a rostrum mouth or membranous wings, such as ants, termites, butterflies, mosquitoes, fleas and lice (just to name a few) would not be considered \\\"true bugs\\\" as they do not have one or both of these features.<br></div><div><br></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-09-26T05:38:35.000Z\" }, \"duration\": 45, \"grades\": [0, 4], \"links\": [{ \"_id\": { \"$oid\": \"5062968571e54a000200000b\" }, \"url\": \"http://www.ehow.com/facts_4830840_difference-between-bugs-insects.html\", \"title\": \"Source\", \"note\": \"\" }], \"materials_note\": \"<div><ul><li>A plastic bag may be used instead of clear plastic wrap.</li><li>In lieu of&nbsp;cheese cloth, you may use&nbsp;gauze, nylon&nbsp;stocking, or fine&nbsp;netting. Precut the cloth for each student or group, depending on the age level.</li><li>Single hole punch is preferred.</li><li>May or may not need tape</li><li>Natural materials -&nbsp;find bug-sized&nbsp;“practice object”&nbsp;(e.g., piece of straw&nbsp;or paper, grain of rice, bit of cereal)</li></ul></div>\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f9ed2807b922d000100005f\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f2b1e4fccb71d0001000015\" }, { \"$oid\": \"4f87563adc4c21000100002f\" }, { \"$oid\": \"4f87564edc4c210001000033\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"506226d895dae60002000038\" }, { \"$oid\": \"5063ac9c71e54a000200001c\" }, { \"$oid\": \"5063acd371e54a000200001f\" }, { \"$oid\": \"5063ad1871e54a0002000022\" }, { \"$oid\": \"5063adde71e54a0002000027\" }], \"note\": \"\", \"objective\": \"<font>Create a container to safely and humanely observe insects and identify similarities and differences between them.</font><div><font>Identify insects that are know decomposers that recycle matter from dead plants and animals.</font></div><div><font><br></font></div>\", \"procedure\": \"In addition to the procedure listed on the RAFT idea sheet, do the following:<br><ol><li>Review vocabulary.</li><li><font>Explain the procedure to the students and identify the practice items (natural items in bins) that they will use prior to catching living </font><font>specimens</font><font>. This is a \\\"test run\\\" for the actual experiment.</font></li><li><font>Create an example \\\"bug pooter\\\" in front of the class, or use the model that the science aide has created.</font></li><li><font>Go outside to find specimens.</font></li><li><font>Record observations using words or drawings in science journals.</font></li><li><font>Release bugs at the end of the activity.</font></li></ol>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000006\" }, { \"$oid\": \"4f28bdf6023c64000100006f\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<ol><li>Discuss scientific terms and how scientists have their own language.&nbsp;While \\\"bugs\\\" are a type of insect, not all \\\"insects\\\" are considered \\\"true bugs.\\\"&nbsp;The term “bugs” is commonly used to describe small arthropods (e.g., insects,&nbsp;spiders, sow bugs).&nbsp;Illicit students' prior knowledge regarding bugs and insects.</li></ol><div><br></div>\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"4fa16e800d3d050001000054\" }, { \"$oid\": \"5062113b95dae60002000019\" }, { \"$oid\": \"5062959c71e54a0002000007\" }, { \"$oid\": \"5062974471e54a000200000d\" }, { \"$oid\": \"5062977871e54a000200000f\" }, { \"$oid\": \"5063b0a271e54a000200002d\" }], \"title\": \"Bug Observation\", \"updated_at\": { \"$date\": \"2013-01-20T03:50:02.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50629bee71e54a0002000014\": { \"_id\": { \"$oid\": \"50629bee71e54a0002000014\" }, \"assessment\": \"\", \"assistant_setup\": \"\", \"background\": \"\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2012-09-26T06:08:46.000Z\" }, \"duration\": null, \"grades\": [0], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"<font>http://www.raftbayarea.org/readpdf?isid=247</font>\", \"procedure\": \"\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000005\" }], \"status\": \"draft\", \"subject\": \"life\", \"teacher_setup\": \"\", \"term_ids\": [], \"title\": \"Ocean In a Box\", \"updated_at\": { \"$date\": \"2012-09-26T06:08:46.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"5069cd18246eca0002000004\": { \"_id\": { \"$oid\": \"5069cd18246eca0002000004\" }, \"assessment\": \"Ask the following questions:<br><div><div>a. Which materials hold water best?</div><div>b. Which material would most likely be found in a wetland? (sphagnum moss &amp; sod)</div><div>c. How do wetlands help to prevent flooding?</div><div>d. Why do you think having wetlands along a river or stream help to keep that stream flowing in the summer? (The river is constantly “recharged” by water that is slowly released from wetlands, much like the moss kept releasing water slowly for a long time).</div></div><div><br></div>\", \"assistant_setup\": \"<ul><li>Read the entire activity before arriving to class.</li><li><font>After checking into the school office,&nbsp;retrieve&nbsp;the H4S bin from the designated area.</font></li><li><font>See notes regarding handouts in the materials section. Check with the teacher to determine whether you will need to make copies of the handout (see link) for students.</font></li><li><font>Put on the H4S blue vest located in the materials bin.</font></li><li><font>Roughly estimate equal amounts of sphagnum moss, sod, sand and gravel, and put into cups for groups. Each material must fit into the \\\"soaker tester,\\\" so it is a small amount. Students will weigh the materials (see procedure).</font></li><li><font>If using cheesecloth, cut four pieces to fit inside the sieve. If using coffee filters, no need to cut them.</font></li></ul>\", \"attachments\": [{ \"_id\": { \"$oid\": \"5096b58af80e7d0002000005\" }, \"caption\": \"Wetlands Data Worksheet\", \"w\": 612, \"h\": 792, \"attachment\": \"51591098c8.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 95581 }], \"background\": \"<div><font>Wetlands play an important role in our watersheds by storing water, controlling floods, and recharging and discharging ground water. Wetlands are “giant sponges,” collecting, holding, and then gradually releasing water through recharge to the aquifer (ground water); gradual discharge to creeks and rivers, which helps to main­ tain stream flow; and evapotranspiration (evaporation + water loss by transpiring plants). The “giant sponge” effect of wetlands is most important during floods. The wetlands along a river slow and store flood waters and reduce flooding downstream. In the United States, destruction from floods annually costs $3-4 billion. Loss of wetlands in the flood plain of a river has important economic consequences.</font></div><div><br></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-10-01T17:04:24.000Z\" }, \"duration\": 45, \"grades\": [3, 4], \"links\": [{ \"_id\": { \"$oid\": \"506b1dce7b7082000200000e\" }, \"note\": \"\", \"title\": \"EPA lesson source\", \"url\": \"http://www.epa.gov/gmpo/education/pdfs/DiscoverWetlandsII.pdf\" }, { \"_id\": { \"$oid\": \"506b1e537b70820002000012\" }, \"url\": \"http://www.epa.gov/gmpo/education/pdfs/DiscoverWetlandsIIII.pdf\", \"title\": \"Wetlands Field Studies\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"50959b152ab7600002000005\" }, \"note\": \"<font>An Everglades Visit: 3min video&nbsp;</font>\\\"Have you ever wondered why a particular plant grows near your home or why you find so many rocks of the same type in one area? Usually, there isn't a single simple answer to such questions. This is because many of Earth's materials, processes, and organisms are inextricably linked to many others. Such is the case with the unique environment of Florida's Everglades. In this adapted video segment, ZOOM guest Tommy takes you into the Everglades and describes what he loves about mucking around in the swamp.\\\"\", \"title\": \"Video: An Everglades Visit\", \"url\": \"http://ca.pbslearningmedia.org/resource/ess05.sci.ess.watcyc.everglades/an-everglades-visit/\" }], \"materials_note\": \"<ul><li>use cheesecloth or loosely woven material like burlap; if you do not have that, use coffee filters cut to fit the sieve</li><li>scale to weigh in grams or ounces</li><li>bowl must be large enough to accomodate excess water</li><li>use cups to hold portions of moss, sand, gravel and sod so that an appropriate amount is put into each group's bin prior to experiment</li></ul>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f459166eeaf0a000100001f\" }, { \"$oid\": \"4f6022e7da72410001000048\" }, { \"$oid\": \"5061375f83f605000200005f\" }, { \"$oid\": \"5061383283f605000200006a\" }, { \"$oid\": \"5061389c83f6050002000072\" }, { \"$oid\": \"5069d3e3246eca000200000f\" }, { \"$oid\": \"5069d46e246eca0002000012\" }, { \"$oid\": \"5069d49c246eca0002000014\" }, { \"$oid\": \"508884c899b7220002000008\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"\", \"objective\": \"<div><font>Students will understand that wetlands are valuable because they reduce flooding in a watershed.</font></div><div><font><br></font></div>\", \"procedure\": \"<font>Explain that the following experiment will help them understand this phenomenon.</font><div><ol><li><font>Weigh out an equal sample (1/4-1/2 c.) of each of four materials: sphagnum moss, sod, sand, gravel. Each of the four samples should take up about the same volume, but they will weigh differently.</font></li><li><font>Put the cheesecloth (or loosely woven cloth, or coffee filter), sieve, and bowl together to make a \\\"Soaker Tester.\\\" See picture in handout (attachment at bottom of page).</font></li><li><font>Place the dry sample of sphagnum moss into the dry soaker tester and weigh the whole thing. Record the weight on the data sheet (column A).</font></li><li><font>Add water to the bowl until it is nearly full. Let the soaker tester and moss sit in the water for five minutes.</font></li><li><font>Take the sieve out of the bowl and hold it over the bowl, allowing it to drain until there is only a slow dripping. (Notice and record how long it takes each material to arrive at this stage of slow dripping.) Do not squeeze any water from the moss or sieve.</font></li><li><font>When the sieve has reached a slow drip stage, pour the water out of the bowl.</font></li><li><font>Put the sieve back in the bowl which is now empty of water.</font></li><li><font>Weigh the soaker tester and moss again. Record this weight on the data sheet (column B).&nbsp;</font></li><li><font>Repeat steps 3-6 using each of the other materials (sand, sod, gravel). Use a fresh dry piece of cheesecloth for each material.</font></li><li><font>Find out how much water each material held by subtracting the dry weight “A” from the wet weight “B. ” Record the weight of the water in column “C.” (Soaked sample weight - dry sample weight = weight of water).</font></li><li><font>In their science notebooks or journals, have students organize and display results in a way that enhances their understanding (such as a bar graph) comparing dry weight with wet weight for each material.</font></li></ol></div>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000054\" }, { \"$oid\": \"4f28bdf6023c640001000062\" }, { \"$oid\": \"4f28bdf6023c640001000063\" }, { \"$oid\": \"4f28bdf6023c64000100007b\" }, { \"$oid\": \"4f28bdf6023c64000100007f\" }, { \"$oid\": \"4f28bdf6023c640001000082\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<div><div><font>Show video (3min) <i>An Everglades Visit</i></font></div><div>Discussion questions after video:</div><div><ul><li>What is a biome? How would you describe the Florida Everglades biome?</li><li>Why do you think there is such a thick layer of dead plant matter at the bottom of the water in the Everglades?</li><li>Contrast the water cycle in the Everglades to the water cycle in the biome where you live.</li><li>What's the relationship between the fish in the wetlands and the dolphins at sea?</li><li>Why are the vanishing wetlands a problem for everyone, not just those who live in those areas?</li></ul></div></div><font>Ask students for their ideas on how wetlands help prevent flooding.</font><div>Review Vocabulary.</div><div><br></div>\", \"term_ids\": [{ \"$oid\": \"5069cd45246eca0002000006\" }, { \"$oid\": \"5069cd72246eca0002000008\" }], \"title\": \"Wetlands, Flooding and the Sponge Effect\", \"updated_at\": { \"$date\": \"2012-11-11T02:55:05.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"5088986a99b7220002000019\": { \"_id\": { \"$oid\": \"5088986a99b7220002000019\" }, \"assessment\": \"<font>What things that you collected felt the&nbsp;scratchiest, looked the most colorful, had the strongest scent, etc.? How did you find the objects for each category?</font><div><font><br></font></div>\", \"assistant_setup\": \"<ul><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li><font>According to the teacher's instruction, in pencil write the opposite words on the bottom of each egg carton. The items will be placed&nbsp;vertically&nbsp;- six in each group - so make sure the word is located at the base of the egg carton.</font></li><li>Based on the procedure, assemble the materials into appropriate groups.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Gather materials and arrange bins of supplies based on teacher’s grouping.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ul>\", \"background\": \"<font>We all understand the five senses. Here is a&nbsp;thorough&nbsp;description of the five sense of flowers that might help you during this garden sense activity.</font><div><div><font><b>What Are the Five Senses of Flowers?</b></font></div><div><i><font>By Joan Norton, eHow Contributo</font><font>r</font></i></div><div><font>Flowers are good for our psychological and physical health. A flower garden offers us experience of all five senses; touch, taste, smell, hearing and seeing. Sense perception is how we know our world and how we produce biological feelings of enjoyment. Feelings of enjoyment enhance health. A walk through a garden of flowers expands and enriches nerve cells in the brain that help create feelings of contentment and cooperation.</font></div><div><b>Touch</b></div><div><font>Touching a flower activates the body's sense receptors that provide information to the brain. Touch determines safety or danger and stimulates a hormone response appropriate to either situation. Flowers are often soft to the touch, which enhances the feeling of safety and pleasure. Gentle touch releases the hormone oxytoxin, which is responsible for feelings of trust and cooperation.</font></div><div><font><b>Taste</b></font></div><div><font>Marigolds, nasturtiums and roses are flowers that are often used in salads. Nasturtiums have a sharpness that stimulates the taste buds on the back of the tongue. The taste buds that detect the sweetness of rose petals are located on the front of the tongue. Anise plants produce a strong licorice taste that the sense of taste perceives as soothing and sweet.</font></div><div><font><b>Smell</b></font></div><div><font>According to University of California Riverside psychologist Lawrence D. Rosenblum, smelling activates nerve cells that induce brain activity related to memory, attention and emotion.There is no quicker way to enhance feelings of contentment than by smelling flowers that you love. Memories of earlier pleasures are stimulated, releasing hormones that produce contentment.</font></div><div><font><b>Sound</b></font></div><div><font>Flowers are often accompanied by the sound of birds singing and bees buzzing. Nerve cells in the inner ear send signals to the brain that let us know whether a sound is disturbing or pleasurable. The brain reacts by creating good feelings when the sound is a familiar good one, like birds singing near flowers. Pleasant sounds relax the nervous system and help us maintain physical and emotional balance.</font></div><div><font><b>Sight</b></font></div><div><font>The sight of beautiful flowers stimulates emotional reactions of contentment. Eyes perceive texture, form, movement, light and shadow in a garden, each experience sending information to the brain. Pleasure centers are activated by beautiful flowers and feelings of enjoyment are the result. The experience of pleasure from flowers is enhanced when accompanied by other sensory inputs such as the sound of a bubbling fountain.</font></div></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-10-25T01:39:54.000Z\" }, \"duration\": 30, \"grades\": [0, 1], \"links\": [{ \"_id\": { \"$oid\": \"5088994599b7220002000022\" }, \"note\": \"\", \"title\": \"Book: The Growing Classroom\", \"url\": \"http://www.amazon.com/The-Growing-Classroom-Garden-Based-Science/dp/0915873486\" }], \"materials_note\": \"If the garden is dormant or not very big, you may \\\"plant\\\" opposite items in the beds, such as pebbles, leaves, moss, or other easily identifiable items.\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f8b2038f40044000100003c\" }, { \"$oid\": \"508898e799b722000200001e\" }], \"materials_per_group_ids\": [{ \"$oid\": \"508898c999b722000200001b\" }], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"To identify and classify objects in the garden using the senses.<div><br></div>\", \"procedure\": \"<ol><li><font>Divide the class into groups of three or more if there is an adult with each group.</font></li><li><font>Tell the class that they will be using a special container in which to collect 12 items. The items that they will collect will be opposites, but they must keep this information secret fromt the other groups.</font></li><li><font>Distribute the cartons and demonstrate to each group how the opposites should be placed, with six of each category in a long row. On the bottom of the carton are secret words that tell what category of objects to collect. Every group will be collecting different opposites.</font></li><li><font>Instruct students to handle everything gently and only take small&nbsp;specimens&nbsp;as they must fit inside the individual egg holders.</font></li><li><font>Whisper the opposite words to the groups, and go outside to gather the&nbsp;specimens.</font></li><li><font>When the groups are finished, have them exchange egg cartons and without looking at the word written on the bottom, try to guess the opposite categories that the other group has collected.</font></li><li>As a class, discuss the strategies the students use to determine the other group's classification.&nbsp;</li></ol>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000005\" }, { \"$oid\": \"4f28bdf6023c64000100000e\" }, { \"$oid\": \"4f28bdf6023c64000100000f\" }, { \"$oid\": \"4f28bdf6023c640001000011\" }, { \"$oid\": \"4f28bdf6023c640001000012\" }, { \"$oid\": \"4f28bdf6023c640001000014\" }, { \"$oid\": \"4f28bdf6023c640001000025\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<ol><li><font>Give the science aide a list of opposite words so that she/he may write them on the bottom of the egg cartons (write the words on masking tape and tape to the egg carton so you can reuse them). Use words that might describe common items found in the garden and encourage students to use their senses, such as wet/dry, dark/light, rough/smooth, dull/colorful, scented/unscented, scratchy/soft, or lightweight/heavy. If you are a K teacher, you may want to have all of the students work with the same pair of words.</font></li><li><font>If your garden is limited (i.e. not in full bloom or consists of dirt boxes), you may place opposite items in the beds for the students to find.</font></li><li><font>Review vocabulary words.</font></li><li><font>What senses can we explore in the garden?</font></li><li><font>Outside in our garden, you will be looking for objects that have a specific quality and those that have the opposite quality. What are some examples of opposites?</font></li><li><font>Explain that you will not be using the sense of taste, since you don't want the students to taste a potentially poisonous specimen.</font></li></ol>\", \"term_ids\": [{ \"$oid\": \"5062977871e54a000200000f\" }, { \"$oid\": \"5088998199b7220002000024\" }, { \"$oid\": \"508899f399b7220002000027\" }], \"title\": \"Garden Sense\", \"updated_at\": { \"$date\": \"2013-01-26T01:18:31.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"508ee0acd35ec10002000008\": { \"_id\": { \"$oid\": \"508ee0acd35ec10002000008\" }, \"assessment\": \"\", \"assistant_setup\": \"\", \"background\": \"\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2012-10-29T20:01:48.000Z\" }, \"duration\": null, \"links\": [], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"<font>http://www.doctordirt.org/teachingresources/soilfilter</font><div><font><br></font></div><div><font>from the soil:&nbsp;http://www.nourishlife.org/2011/03/from-the-soil/</font></div>\", \"objective\": \"Students will discover that soils physically and chemically filter impurities out of water.&nbsp;<br><div><div>Students will discover the role of soil in having good drinking water.&nbsp;</div></div>\", \"procedure\": \"\", \"reflection\": null, \"standard_ids\": [], \"status\": \"draft\", \"subject\": \"earth\", \"teacher_setup\": \"\", \"term_ids\": [], \"title\": \"Soil is a Filter\", \"updated_at\": { \"$date\": \"2012-11-11T03:05:55.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"508ee3b5d35ec10002000018\": { \"_id\": { \"$oid\": \"508ee3b5d35ec10002000018\" }, \"assessment\": \"\", \"assistant_setup\": \"<ol><li>Watch the video in the link provided prior to class so that you know how to make the pot out of newspaper.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Based on the procedure, assemble the materials into appropriate groups.</li><li>If time permits, precut the newspaper into strips.</li><li>Place newspaper underneath the soil so that it doesn't spill onto the carpet.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Gather materials and arrange bins of supplies based on teacher’s grouping.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return it to the designated area.</li></ol>\", \"background\": \"The Paper PotMaker makes plant pots from strips of old newspaper.&nbsp;It's ideal for starting young plants, seedlings or cuttings. Helps recycle newspaper and lessens the need for plastics used to make plastic garden pots.\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2012-10-29T20:14:45.000Z\" }, \"duration\": 20, \"grades\": [0, 1, 2], \"links\": [{ \"_id\": { \"$oid\": \"508ee3cfd35ec1000200001c\" }, \"note\": \"Press play in the \\\"product videos\\\" section.\", \"title\": \"Video: Pot-making\", \"url\": \"http://www.seedandgarden.com/shop/products/paper-pot-maker.html\" }, { \"_id\": { \"$oid\": \"509744c99851920002000008\" }, \"note\": \"The growth and development of a plant is one of the most spectacular events in nature. Yet, because it happens so slowly, over the course of days or weeks, it is difficult to observe in real time. This video segment depicts plant growth in time-lapse format, allowing the viewer to observe in just a few seconds some of the most important life stages of a plant, from germination to the formation of a flower, and several phases in between. Footage from NOVA: \\\"The Shape of Things.\\\"\", \"title\": \"From Seed to Flower\", \"url\": \"http://ca.pbslearningmedia.org/resource/tdc02.sci.life.colt.plantsgrow/from-seed-to-flower/\" }], \"materials_note\": \"<ul><li><font>cut newspaper into strips according to potmaker instructions.</font></li><li><font>about 1/4 c. of soil per student</font></li><li><font>three seeds per student, radish seeds work best, but use whatever seeds are appropriate for the season</font></li><li><font>cups are for scooping soil into newspaper pots</font></li></ul>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f459166eeaf0a000100001f\" }, { \"$oid\": \"4f600e20da72410001000011\" }, { \"$oid\": \"508ee98ad35ec1000200001e\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4fc4552ca4d1f80003000015\" }, { \"$oid\": \"5061377083f6050002000062\" }, { \"$oid\": \"5061384f83f605000200006c\" }, { \"$oid\": \"508ee99ed35ec10002000020\" }], \"note\": \"\", \"objective\": \"Students will reuse newspaper to make pots for plants.<div><br></div><div>To observe that plants grow from seeds and must have soil, light and water to grow.</div><div><br></div>\", \"procedure\": \"<ol><li><font>Demonstrate how to roll newspaper around maple PotMaker to make recycled pot.</font></li><li><font><div><font>Paper strips are rolled around the \\\"press\\\" and twisted into the pot-form.&nbsp;</font>Paper Pots slip off the press ready to be filled with soil and plants.</div></font></li><li><font>Allow students to make more than one pot or redo their pots until they are satisfied with the results.</font></li><li><font>If necessary, you may \\\"cheat\\\" with a small piece of tape at the bottom of the pot.</font></li><li><font>Write student's name on a post-it or piece of masking tape and fix it to the pot.</font></li><li><font>Have students measure (whatever amount you deem appropriate) using a plastic cup or spoons soil into their pot so that it is filled halfway to the top.</font></li><li><font>Plant three seeds in the pot, spacing them widely apart.</font></li><li><font>Measure a small amount of water into the pot so that the pot itself is not saturated. If time permits, allow students to measure the amount of water that they put into the pot.</font></li><li><font>Record the measurements in their science journals.</font></li><li><font>Draw a picture of their pot to record their observation.</font></li><li><font><div><font>Have them take their plants home, water them, and if possible plant them into outside soil. Or, if classroom space is available, place all of the plants on a cookie sheet or other waterproof container, place in a sunny area, and watch them grow! Pots remain strong even as plants grow and as roots penetrate the walls.</font></div></font></li></ol>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c64000100000c\" }, { \"$oid\": \"4f28bdf6023c64000100000f\" }, { \"$oid\": \"4f28bdf6023c640001000018\" }, { \"$oid\": \"4f28bdf6023c640001000022\" }, { \"$oid\": \"4f28bdf6023c640001000038\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<div><ol><li>Watch the video on the link provided so you can see how to make the pot.</li><li><font>Explore prior knowledge with students regarding recycling.</font></li><li><font>Explain the slogan: Reuse, Reduce, Recycle!</font></li><li><font>Hold up newspaper and ask if we can&nbsp;recycle&nbsp;that material. With time and weather (or watering by hand), the newspaper will go back into the soil and dissolve, creating new soil through composting.</font></li><li><font>This activity is an excellent outdoor activity.</font></li></ol></div>\", \"term_ids\": [{ \"$oid\": \"4f8511f479626d0001000027\" }], \"title\": \"Make a Newspaper Pot, Plant a Seed\", \"updated_at\": { \"$date\": \"2013-03-15T17:10:04.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"509746a1985192000200000a\": { \"_id\": { \"$oid\": \"509746a1985192000200000a\" }, \"assessment\": \"<div>Assessment embedded in procedure.</div>Ask students whether they want to make any changes to the original list they made of the characteristics of living things.<div>Write the list on the board.</div><div><font>Informally assess responses.</font></div>\", \"assistant_setup\": \"<ol><li>Read the activity.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Check with the teacher to find out how to set up or reset the computer to play the videos.</li><li>Prior to the start of the activity, test the video.</li><li>Put on the H4S blue vest located in the materials bin.</li><li><font>Gather photos/pictures of alive/non-alive things and&nbsp;arrange them into piles based on teacher’s grouping.</font></li><li>Assist during the activity.</li><li>Return the photos to the bin place it in&nbsp;the designated area.</li></ol>\", \"attachments\": [{ \"_id\": { \"$oid\": \"509749069851920002000014\" }, \"caption\": \"Exploring Characteristics of Living Things\", \"w\": 792, \"h\": 612, \"attachment\": \"19e47ccaeb.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 69146 }], \"background\": \"Young children often have difficulty characterizing things as living or nonliving.\\tFor example, they tend to describe anything that moves as alive. They also do not yet understand the cycle of life (birth, growth, death), and therefore classify as nonliving anything that has died. In science, living is used to describe anything that is or has ever been alive (dog, flower, seed, road kill, log); nonliving is used to describe anything that is not now nor has ever been alive (rock, mountain, glass, wristwatch). Over time, students will begin to understand that all living things grow, breathe, reproduce, excrete, respond to stimuli, and have similar basic needs like nourishment.\\tOlder students may even realize that all living things are made up of cells.\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-11-05T04:54:57.000Z\" }, \"duration\": 40, \"grades\": [0, 1, 2, 3, 4, 5], \"links\": [{ \"_id\": { \"$oid\": \"509748919851920002000010\" }, \"url\": \"http://www.teachersdomain.org/resource/tdc02.sci.life.colt.lp_living/\", \"title\": \"Source\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"5097ff999851920002000023\" }, \"note\": \"3 min. Despite technological advances that have produced machines with lifelike qualities, most people can easily distinguish between what is living and nonliving. Or can they? This video includes some \\\"fuzzy\\\" examples that will make students question the meaning of life.\", \"title\": \"Video: Is it Alive?\", \"url\": \"http://ca.pbslearningmedia.org/resource/tdc02.sci.life.colt.alive/is-it-alive/\" }, { \"_id\": { \"$oid\": \"5097ffd69851920002000027\" }, \"note\": \"2min 15sec. For most animals, moving from place to place is nearly as routine as eating -- and just as important. This video segment explores the variety of methods animals use to get around in their habitat and helps illustrate the connection between form and function.\", \"title\": \"Video: Animals on the go\", \"url\": \"http://ca.pbslearningmedia.org/resource/tdc02.sci.life.colt.move/animals-on-the-go/\" }, { \"_id\": { \"$oid\": \"50980010985192000200002b\" }, \"note\": \"2min 15sec. An animal makes its living by finding food. Plant eaters have a relatively easy time of it, while meat eaters must work a little harder for their next meal. This video segment explores the wide range of food-finding strategies that exist in the animal world and identifies some of the physical and behavioral adaptations that make them effective.\", \"title\": \"Animals Making a Living\", \"url\": \"http://ca.pbslearningmedia.org/resource/tdc02.sci.life.colt.traps/animals-making-a-living/\" }, { \"_id\": { \"$oid\": \"5098003e985192000200002f\" }, \"note\": \"1min.&nbsp;Do you eat like a horse? Or more like a bird? As you might expect, different animals eat different things. Some animals specialize in eating one particularly rich food source, while others eat whatever they can find. This video segment samples the diversity of feeding habits among some of the world's creatures.\", \"title\": \"What Do Animals Eat?\", \"url\": \"http://ca.pbslearningmedia.org/resource/tdc02.sci.life.colt.eat/what-do-animals-eat/\" }, { \"_id\": { \"$oid\": \"509803c99851920002000035\" }, \"note\": \"Copy these photos or view on the computer. Despite technological advances that have produced machines with lifelike qualities, most people can easily distinguish between what is living and nonliving. Or can they? This collection of images includes some \\\"fuzzy\\\" examples that will make students question what it means to be alive.\", \"title\": \"Images: Living and Nonliving\", \"url\": \"http://ca.pbslearningmedia.org/resource/tdc02.sci.life.colt.nonliving/living-and-nonliving/\" }], \"materials_note\": \"<ul><li><font>pictures of things that are alive and not alive (e.g. grass, turtle, plant, stones, logs, pot).</font></li></ul>\", \"materials_per_clas_ids\": [{ \"$oid\": \"50974c2c9851920002000018\" }], \"materials_per_group_ids\": [{ \"$oid\": \"509749889851920002000016\" }, { \"$oid\": \"50a056922ace730002000026\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"\", \"objective\": \"<div><ul><li>Develop criteria to decide if something is living or nonliving.</li><li>Classify things as living or nonliving, based on those criteria.</li><li>Recognize that living things grow, reproduce, and need food air, and water.</li></ul></div>\", \"procedure\": \"<ul><li>Prior to activity, set up one computer for each group and preload the urls with the videos provided in the links for this activity. After the group watches each video, have the students fill out their handout with or without assistance from the science aide. Depending on the grade level and level of independence, stop the class after each viewing and answer the questions that accompany that video (provided here in the procedure section) OR, copy this procedure and have the students follow along in groups, reporting back as a class.</li><li>Distribute copies of the handout: <i>Exploring the Characteristics of Living Things</i> (PDF). Show students how to fill in the Characteristics of Life column headings based on the list the class generated earlier.</li><li>Working in groups, have students view examples of living and nonliving things from the <i>Is It Alive?</i> video and the photos provided. Have them classify each example as living or nonliving and record the name of the object or organism under the appropriate heading on the handout. Then have students indicate which characteristics of life each example exhibits by putting a check in the appropriate column. (For very young children, you can explore examples of living and nonliving things by displaying the stills on a large screen. To simplify the task of recording their observations, young students can draw pictures or use symbols to represent the things they examine).</li><li>You might want to choose one example and model the process of scientific inquiry for students. Ask questions (Does this example reproduce? Does it grow?), make observations (The river is definitely moving.), and carefully record the results. Point out the importance of thinking like a scientist.</li><li>As students explore the examples, they may discover other characteristics of life they hadn't thought of earlier. Encourage them to add these characteristics to the chart.</li><li>Have students reflect on their findings by discussing the following questions:</li><ul><li>What characteristics did ALL of the living things have in common?</li><li>Did any nonliving things possess some of the same characteristics as living things? Which ones?</li><li>How were the living things different from the nonliving things?</li></ul><li>Assess students' understanding (and identify possible misconceptions) by asking:</li><ul><li>Are all things that move \\\"alive\\\"? Have them defend their opinions by referring to the results of their explorations.</li><li>What kinds of nonliving things move?</li><li>Again, show them the clip of the moving cars, the running river, or the dripping icicle in the Is It Alive? video and ask:</li><li>How is the movement of living things different from the movement of nonliving things?</li></ul><li>Next, ask:</li><ul><li>Do all living things move?</li></ul><li>If students say yes or are unsure, again show them the picture of the grass or plant or the clip of the coral. Then show them the video <i>Animals on the Go</i> and ask:</li><ul><li>What kinds of living things move? What kinds don't move?</li><li>Do plants move?</li><li>Why do living things move?</li><li>Show them the Animals Making a Living video to help them answer this last question.</li></ul><li>Show students the <i>What Do Animals Eat?</i> video. Ask:</li><ul><li>Do all living things eat?</li><li>Plants don't eat but they need energy. Where do they get it?</li><li>Anticipate questions about growth. For example, icicles \\\"grow,\\\" yet they aren't alive. Explain that all living things grow some time in their lives, but that some nonliving things seem to get bigger too. For this reason, growth cannot by itself be used to classify something as living.</li></ul></ul>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000005\" }, { \"$oid\": \"4f28bdf6023c64000100000f\" }, { \"$oid\": \"4f28bdf6023c640001000018\" }, { \"$oid\": \"4f28bdf6023c640001000034\" }, { \"$oid\": \"4f28bdf6023c64000100003e\" }, { \"$oid\": \"4f28bdf6023c640001000053\" }, { \"$oid\": \"4f28bdf6023c640001000070\" }, { \"$oid\": \"4f28bdf6023c64000100007d\" }, { \"$oid\": \"4f28bdf6023c6400010000a6\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<ul><li>Ask each student to name one living thing and one nonliving thing. Write all their contributions on easel paper or on the chalkboard, under the column headings \\\"Living\\\" and \\\"Nonliving.\\\"</li><li>Tell students that they will be studying living things, or organisms. Have students reflect on the list of organisms they generated and think about all the features that make organisms \\\"alive.\\\"&nbsp;</li><li>Have them brainstorm answers to these questions:</li><ul><li>What are some characteristics of living things?</li><li>What are some characteristics of nonliving things?</li><li>What makes living things different from nonliving things?</li><li>If your students are not reading or writing yet, use pictures or symbols to represent written text.</li></ul><li>Write all ideas down. This student-generated list can be used as a reflection tool throughout the unit. Avoid telling students the correct answers.</li><li>Explain to students the scientific definition of living (anything that is or has ever been alive) and nonliving (anything that is not now nor has ever been alive). Remember that the difference between nonliving and dead can be confusing to youngsters. Give an example of something that is dead but still classified as living, such as a log.</li></ul>\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"50974743985192000200000c\" }], \"title\": \"Alive or Not Alive?\", \"updated_at\": { \"$date\": \"2013-01-24T22:27:24.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"509807f2985192000200003c\": { \"_id\": { \"$oid\": \"509807f2985192000200003c\" }, \"assessment\": \"\", \"assistant_setup\": \"<ul><li>Read the&nbsp;<a href=\\\"http://www.raftbayarea.org/readpdf?isid=433\\\">idea sheet&nbsp;</a>for this activity.</li><li><font>Read the notes in the materials section, paying careful attention to the 2D and 3D apple models.</font></li><li>After checking into the school office, retrieve the H4S bin from the designated area.</li><li><font>Review the printed activity page, paying special attention to the needs of the groups/grouping.</font></li><li><font>Based on the idea sheet and activity page, assemble the materials into appropriate groups.</font></li><li><font>Put on the H4S blue vest located in the materials bin.<br></font></li><li><font>Put the real apples, plastic knives and paper towels into the group bins to start, distribute the remaining apple models&nbsp;</font>according to the teacher's instructions.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ul>\", \"background\": \"This activity is adapted from a <a href=\\\"http://www.raftbayarea.org/?__utma=1.1969717155.1339092642.1351013759.1352140537.45&amp;__utmb=1.2.10.1352140537&amp;__utmc=1&amp;__utmx=-&amp;__utmz=1.1351013759.44.3.utmcsr=36ohk6dgmcd1n-c.c.yom.mail.yahoo.net|utmccn=(referral)|utmcmd=referral|utmcct=/om/api/1.0/openmail.app.invoke/36ohk6dgmcd1n/11/1.0.35/us/en-US/view.html/0&amp;__utmv=-&amp;__utmk=27909692\\\">RAFT</a> (Resource Area for Teachers)<a href=\\\"http://www.raftbayarea.org/readpdf?isid=433\\\"> idea sheet</a>. The science behind this activity is written on that sheet.<br><div><div>RAFT helps educators meet 21st century challenges by providing them with resources that help turn abstract and complex ideas into activities that students can grasp. Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!</div></div>\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2012-11-05T18:39:46.000Z\" }, \"duration\": null, \"grades\": [0, 1, 2, 3, 4, 5], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"Create a reusable germinator that gives students an unobstructed view&nbsp;of sprouting seeds.<div>Graph data and test environmental variables.</div><div><br></div>\", \"procedure\": \"<div><font>In addition to the procedure listed on the RAFT idea sheet, do the following:</font></div><div><ol><li>According to the idea sheet present the apple models in stages, starting with a real apple, plastic model of an apple, photo, cutout, cartoon, word \\\"apple,\\\" the word \\\"apple\\\" in another language, and ending with the word \\\"apple\\\" in another language that does not have a traditional alphabet.</li></ol></div>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000008\" }, { \"$oid\": \"4f28bdf6023c64000100000d\" }, { \"$oid\": \"4f28bdf6023c640001000018\" }, { \"$oid\": \"4f28bdf6023c640001000022\" }, { \"$oid\": \"4f28bdf6023c64000100002e\" }, { \"$oid\": \"4f28bdf6023c64000100003f\" }, { \"$oid\": \"4f28bdf6023c640001000042\" }, { \"$oid\": \"4f28bdf6023c640001000061\" }, { \"$oid\": \"4f28bdf6023c640001000081\" }, { \"$oid\": \"4f28bdf6023c6400010000ab\" }], \"status\": \"draft\", \"subject\": \"life\", \"teacher_setup\": \"\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"4f8511f479626d0001000027\" }, { \"$oid\": \"505b912e8e6e180002000009\" }, { \"$oid\": \"509809eb985192000200003f\" }, { \"$oid\": \"50980a409851920002000041\" }, { \"$oid\": \"50980a599851920002000043\" }], \"title\": \"The Germinator\", \"updated_at\": { \"$date\": \"2012-11-05T18:51:03.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50985eb8985192000200006a\": { \"_id\": { \"$oid\": \"50985eb8985192000200006a\" }, \"assessment\": \"<div><font>Have students discuss or answer the following questions in their science journals:</font></div><div><ul><li>What is the Moon?</li><li>What does it mean to say that the Moon has phases? Can you name the phases?</li><li>What do you think of the names for the phases? Do you have any better suggestions? If so, explain why you would change the names.</li><li>How long does it take for the Moon to complete one lunar cycle?</li><li>What would you tell someone who said that it was impossible to see the Moon during the day?</li><li>Draw a diagram to show the relationship between the Sun, the Moon, and Earth.</li></ul></div><div><font><br></font></div>\", \"assistant_setup\": \"<ul><li><font>Read the<a href=\\\"http://www.raftbayarea.org/readpdf?isid=500\\\">&nbsp;idea sheet</a>&nbsp;for this activity.</font></li><li>After checking into the school office, retrieve the H4S bin from the designated area.</li><li><font>Review the printed activity page, paying special attention to the needs of the groups/grouping.</font></li><li><font>Based on the idea sheet and activity page, assemble the materials into appropriate groups.</font></li><li><font>Check with classroom teacher to see if you need to make copies of the handouts,&nbsp;</font><i>Phases of Earth's Moon</i>&nbsp;(at the bottom of idea sheet) and/or&nbsp;<i>Moon Phases Flip Book</i> (see attachment).</li><li><font>Put on the H4S blue vest located in the materials bin.<br></font></li><li><font>Assist during the activity.</font></li><li>Throw away or recycle consumable items.</li><li>Repack the materials bin and return it to the designated area.</li></ul>\", \"attachments\": [{ \"_id\": { \"$oid\": \"50d1489fc25e6e0002000006\" }, \"caption\": \"Moon Phases Flip Book\", \"w\": 612, \"h\": 792612, \"attachment\": \"c97c889db5.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 959081 }], \"background\": \"This activity is adapted from a <a href=\\\"http://www.raftbayarea.org/products-and-services\\\">RAFT</a> (Resource Area for Teachers)<a href=\\\"http://www.raftbayarea.org/readpdf?isid=500\\\"> idea sheet</a>. The science behind this activity is written on that sheet.<br><div><div>RAFT helps educators meet 21st century challenges by providing them with resources that help turn abstract and complex ideas into activities that students can grasp. Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!</div></div><div><br></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-11-06T00:50:00.000Z\" }, \"duration\": 45, \"grades\": [3, 5], \"links\": [{ \"_id\": { \"$oid\": \"50985ee1985192000200006e\" }, \"note\": \"1 min 36sec.&nbsp;The Moon, Earth's natural satellite, seems to hover in the sky, unaffected by gravity. However, the reason the Moon stays in orbit is precisely because of gravity -- a universal force that attracts objects. With the right combination of speed and gravity, satellites can fall around, instead of into, the body that they orbit. In this animated video segment adapted from NASA, learn about how the Moon stays in orbit around Earth.\", \"title\": \"Video: Why Doesn't the Moon Fall Down?\", \"url\": \"http://ca.pbslearningmedia.org/resource/ess05.sci.ess.eiu.moonorbit/why-doesnt-the-moon-fall-down/\" }, { \"_id\": { \"$oid\": \"50985f2d9851920002000072\" }, \"note\": \"4 min.&nbsp;Most planetary scientists expected that lunar samples brought to Earth at the end of each of the six Apollo missions would confirm one of three leading hypotheses of the Moon's origin. Instead, samples left all three explanations unconfirmed, requiring the development of a new hypothesis for how the Moon formed. This video segment adapted from NOVA shows Apollo 15 astronauts collecting a type of rock that would help change our understanding of the Moon's — and Earth's — earliest history.\", \"title\": \"Video: The Origin of the Moon\", \"url\": \"http://ca.pbslearningmedia.org/resource/ess05.sci.ess.eiu.moon/the-origin-of-the-moon/\" }, { \"_id\": { \"$oid\": \"509865a29851920002000084\" }, \"url\": \"http://www.teachersdomain.org/resource/ess05.sci.ess.eiu.lp_lunarcycle/\", \"title\": \"Source\", \"note\": \"\" }], \"materials_note\": \"<ul><li><font>if there are plenty of materials, make one mobile per student and adjust quantities accordingly.</font></li><li><font>make copies of handout <i>Phases of Earth's Moon</i> (at the bottom of idea sheet).</font></li><li><font>need 8 disposable drink lids or disks per group (old CD/DVDs work, must be 9-10cm each).</font></li><li><font>index cards or paper for moon labels that will hang below lid phases</font></li><li><font>see RAFT hoop mobile design for an example of how an end of a file folder can be used to create a hanger.</font></li><li>if there is time to do the <i>Moon Flip Book</i>, make copies of that handout</li></ul>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f87563adc4c21000100002f\" }, { \"$oid\": \"4f87564edc4c210001000033\" }, { \"$oid\": \"4f9ed2807b922d000100005f\" }, { \"$oid\": \"4fa0cbcd0d3d05000100003f\" }, { \"$oid\": \"4fc3fa937fcc320003000015\" }, { \"$oid\": \"501c21858c154c000200002d\" }, { \"$oid\": \"509862739851920002000075\" }, { \"$oid\": \"509863139851920002000079\" }, { \"$oid\": \"5098637e985192000200007b\" }, { \"$oid\": \"50d146b4c25e6e0002000002\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"\", \"objective\": \"Create a mobile to model the 4 points and intervals known as the phases of the Moon.<div><div>Understand that the Moon completes one revolution around Earth over the course of one month.</div><div>Recognize that the Moon is visible sometimes at night, sometimes during the day, and sometimes not at all.</div><div><br></div></div>\", \"procedure\": \"<div>In addition&nbsp;to the procedure listed on the RAFT&nbsp;<a href=\\\"http://www.raftbayarea.org/readpdf?isid=500\\\">idea sheet</a>&nbsp;idea sheet, do the following:</div><div><ol><li>Show the short videos: <i>Why Doesn't the Moon Fall Down?</i> and <i>The Origin of the Moon</i> (links provided).</li><li>Assign jobs to students in each group to ensure that all students participate in the building of the moon phase model.</li><li>Follow the procedure on the RAFT <a href=\\\"http://www.raftbayarea.org/readpdf?isid=500\\\">idea sheet</a>.</li><li>If time permits, make copies of the <i>Moon Phases Flip Book</i> and have students cut along the dotted lines, place the phases of the moon in order and then staple the book together.&nbsp;</li></ol></div>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c64000100005a\" }, { \"$oid\": \"4f28bdf6023c6400010000a3\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"<ul><li>Make copies of&nbsp;<i>Moon Phases Flip Book</i>&nbsp;if you plan on doing that activity.&nbsp;</li><li>Ask students to share their ideas about the Moon. Encourage them to talk about what they have already observed and any conceptions that they may have.</li></ul>Ask:<div><ul><li>What does the Moon look like? Does it always look the same?</li><li>When do you see it?<font></font></li><li><font>In which part of the sky do you see it?</font></li><li><font>What do you think the Moon is made of?</font></li><li><font>Why do you think the Moon has phases?</font></li><li><font>Link the construction of this model to models students have built in the past (seek prior knowledge)</font></li></ul></div>\", \"term_ids\": [{ \"$oid\": \"509864ec985192000200007d\" }, { \"$oid\": \"5098651f985192000200007f\" }], \"title\": \"Moon Mobile and Phases Flip Book\", \"updated_at\": { \"$date\": \"2012-12-29T18:36:33.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50a0085c2ace730002000006\": { \"_id\": { \"$oid\": \"50a0085c2ace730002000006\" }, \"assessment\": \"What was the most difficult object to see? Why?<div>What was the easiest? Why?</div><div>What are some things that our eyes can tell us about the world around us?</div><div>Are you more aware of your surroundings when you are in a new place? Solicit examples from your students.</div><div><br></div>\", \"assistant_setup\": \"<ul><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Check with the teacher to determine if you will need to make copies of the worksheet.</li><li><font>Before the activity, go to the designated 40 by 50 foot section of isolated playground or garden that preferably has one of more trees and place 15-20 objects (from the H4S bin) along a path. You designate the path, so it doesn't need to be linear or obvious. Some of these&nbsp;should&nbsp;stand out brightly; others should blend in with the surroundings and therefore be more difficult to pick out. Keep the number of objects a secret. Place objects from ground level up to 10 feet high.&nbsp;</font></li><li>Put on the H4S blue vest located in the materials bin.</li><li>Gather materials and arrange bins of supplies based on teacher’s grouping.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ul>\", \"attachments\": [{ \"_id\": { \"$oid\": \"50a00d8b2ace730002000012\" }, \"caption\": \"What Does Not Belong: Farm\", \"w\": 612, \"h\": 792, \"attachment\": \"c233439ac1.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 5443533 }, { \"_id\": { \"$oid\": \"50a00dcd2ace730002000016\" }, \"caption\": \"What Does Not Belong: Fruits and Vegetables\", \"w\": 612, \"h\": 792, \"attachment\": \"de1ea54204.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 493927 }, { \"_id\": { \"$oid\": \"50a00de32ace73000200001a\" }, \"caption\": \"What Does Not Belong: Shapes\", \"w\": 612, \"h\": 792, \"attachment\": \"a8a1e90eae.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 90564 }], \"background\": \"<div>Students in this activity will walk through a natural setting and silently observe things that are out of place.</div>All science classes introduce information with visual models and demonstrations. Often a teacher will model an activity for the class and then ask the children to replicate the activity at their own workstation. Or, children may be asked to make observations about the experiment by drawing a picture or writing descriptive sentences.<br><div><font>A child with weak visual discrimination skills will observe the demonstration but will be unable to replicate the work at his own desk or complete a worksheet asking follow up questions. Out of frustration, he may fool himself into thinking he is “not good at science.” When, in actuality, he may have a strong natural ability for science but simply lack well-developed visual discrimination skills. Many students will respond to the natural environment more readily than to a paper and pencil activity.</font></div><div><font>Walking the \\\"unnatural trail\\\" helps children develop these critical visual awareness skills.</font></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-11-11T20:19:41.000Z\" }, \"duration\": 20, \"grades\": [0, 1], \"materials_note\": \"<ul><li><font>15-20 objects (synthetic and natural; some big; some small; some easily observed; some easily&nbsp;camouflaged, such as shoelaces, pinecones, plastic toys' rubberbands).</font></li></ul>\", \"materials_per_clas_ids\": [{ \"$oid\": \"506226d895dae60002000038\" }, { \"$oid\": \"50a0086a2ace730002000008\" }], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"To develop visual awareness in a natural environment.<div><br></div>\", \"procedure\": \"<ol><li><font>As a whole class or after splitting into groups, choose one of the <i>What Does Not Belong</i> worksheets and have the class complete it.</font></li><li><font>Go over the worksheet and explain that the students will be looking for things that are out of place outside (per teacher earlier discussion/setup).</font></li><li><font>Hand out clipboards and blank pieces of paper for observation/recording to student pairs (one pair should share a clipboard and brainstorm observations).</font></li><li><font>Line up the students in the garden area where you planted the objects. Have&nbsp;students&nbsp;walk in pairs (holding hands is good) through the area without speaking, counting the number of out-of-place objects they find. It is important for students not to pick up or move any objects and not to give away their findings by pointing, jumping up and down, shouting, and so on to others in the group. It may help to ask them to listen for a particular sound (e.g. a bird, airplane, siren, anything to help them stay quiet). Put a time limit on the walk.</font></li><li><font>When they reach the end of the trail, they can whisper in your ear (or in their partners ear if that makes class management easier) how many objects they saw, or if they are able to write, have them list the objects that they saw. If no one saw all of the objects, tell everyone that there are still more objects to find. Then let them start over. Repeat as many times as necessary or until time runs out. Reveal any objects that the group did not find.</font></li><li><font>Go back to class for closure.</font></li></ol>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000001\" }, { \"$oid\": \"4f28bdf6023c64000100000e\" }, { \"$oid\": \"4f28bdf6023c64000100000f\" }, { \"$oid\": \"4f28bdf6023c640001000022\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<ol><li><font>Do you think you would notice something if it was out of place?</font></li><li><font>What types of objects would be easy to notice? (those whose color was different thatn the background; large objects)</font></li><li><font>Which would be difficult? (objects that blend in)</font></li><li><font>Let's find out how well you can spot things that don't belong in a certain setting as we walk on an \\\"unnatural trail.\\\"<br></font></li></ol>\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"50a008942ace73000200000a\" }, { \"$oid\": \"50a008ac2ace73000200000c\" }], \"title\": \"Unnatural Trail\", \"updated_at\": { \"$date\": \"2012-11-15T05:39:24.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50b1734ce1081a0002000006\": { \"_id\": { \"$oid\": \"50b1734ce1081a0002000006\" }, \"assessment\": \"<div><div><ol><li>Informally assess students as they practice comparing the seeds and&nbsp;complete their <i>Sorting Seeds! </i>worksheet three times.</li><li>Collect record of their final sort.</li><li>Return to the K-W-L chart and ask students to dictate what they have learned and what they still want to know about seeds and plants.</li></ol></div></div><br>\", \"assistant_setup\": \"<ol><li>Read the activity.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Check with the teacher to find out if you need to make copies of handout, <i>Sorting Seeds!</i></li><li>Put on the H4S blue vest located in the materials bin.</li><li>Distribute the seeds into individual portion cups based on number of students in the class. 5-10 seeds per child is enough to start. If you will be working with another class, please make sure that there are sufficient seeds for all students (this mostly applies if the students glue seeds to the handout according to the last step of the procedure).</li><li>Assist during the activity.</li><li>Return the materials to the bin place it in&nbsp;the designated area.</li></ol>\", \"attachments\": [{ \"_id\": { \"$oid\": \"50b18b72e1081a0002000018\" }, \"caption\": \"Seed Sort!\", \"w\": 612, \"h\": 792, \"attachment\": \"d49c11d67f.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 30149 }], \"background\": \"Seeds can be light or dark, speckled, striped, or just one color. They might have physical characteristics that enable them to fly through the air, or they might have prickles. Some we eat, some we don’t. There are large seeds and very small seeds. No matter what they look like, they all have one thing in common: every seed contains a tiny plant.\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-11-25T01:24:29.000Z\" }, \"duration\": 30, \"grades\": [0, 1], \"materials_note\": \"<font>Use wild bird mix or 15 bean soup for a variety of seeds.</font><div>Handouts of Sorting Seeds! worksheet are in the attachment section.</div><div>Depending on the level of students, use one or more pieces of graph paper per student or group.</div>\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f9e1a5b7b922d0001000022\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f2b1e4fccb71d0001000015\" }, { \"$oid\": \"4fc3fa937fcc320003000015\" }, { \"$oid\": \"502453070b84e4000200002f\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4fa0cbcd0d3d05000100003f\" }, { \"$oid\": \"5063ac9c71e54a000200001c\" }, { \"$oid\": \"508ee99ed35ec10002000020\" }], \"note\": \"If time permits, create a Seed/Plant Word Wall using poster board to record the attributes that the students discovered.\", \"objective\": \"Students will compare seeds of plants by creating<font>&nbsp;categories for seed mixes and graphs to display their categories.</font><div><font><br></font></div>\", \"procedure\": \"<ol><li>Give each student a portion cup or pile of miscellaneous seeds.</li><li><font>Provide students time to freely explore all of the attributes of the seeds themselves, using hand lenses to observe and nonstandard measuring tools to measure/compare (e.g. is the seed as big/bigger than... my thumb,&nbsp;eraser&nbsp;tip, penny). Give each student an assortment of the seeds. Once they have had ample time to observe the seeds carefully, ask the students to name various attributes about the seeds (e.g., size, color, texture, method of travel, etc.).</font></li><li>Have students sort the seeds according to shape, color, size, or another attribute that you discuss with them.</li><li>Each student will mark a graph showing the number of seeds in each category. They can either draw a picture of each seed at the bottom of the graph or set one seed at the base of each column. Students make one tally mark for each seed of a specific category, and then they color in the graph. Have extra graphs on hand so they can regroup and graph the seeds in a different manner. Challenge students to form categories that can contain more than one type of seed.</li><li><font>Allow students to practice comparing the seeds by having them complete the <i>Sorting Seeds!</i> worksheet three times and record their final sort.</font></li><li>If time permits, have students glue their final sort onto the <i>Sorting Seeds! </i>worksheet.</li></ol>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000008\" }, { \"$oid\": \"4f28bdf6023c640001000011\" }, { \"$oid\": \"4f28bdf6023c640001000023\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<div><font>Complete a K-W-L chart as a class showing what students already know and would like to know about seeds.</font></div><div><font><font>Review or explain how to create a bar graph using the seed attributes (see procedure). If students are&nbsp;unfamiliar&nbsp;with bar graphs, this is a great opportunity to introduce them. If time doesn't permit, just use the <i>Seed Sort!</i> worksheet and skip the graphing.</font></font></div><br>\", \"term_ids\": [{ \"$oid\": \"4f8511f479626d0001000027\" }, { \"$oid\": \"50b17a8ae1081a000200000a\" }], \"title\": \"Seed Sort\", \"updated_at\": { \"$date\": \"2012-12-11T04:32:41.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50b6f6592b89ee0002000005\": { \"_id\": { \"$oid\": \"50b6f6592b89ee0002000005\" }, \"assessment\": \"Use a summative test and have students match the test properties of minerals including streak, cleavage, crystal habit, hardness, luster, and miscellaneous properties with&nbsp;\", \"assistant_setup\": \"\", \"background\": \"All minerals have distinguishing properties that can be used to identify them. Some of these properties are:<br><div><div><font><br></font></div><div><font>Color – The color of the mineral as described in natural light. Color is not a reliable identifying property. Chemical impurities, crystal flaws, and oxide coatings on the outside of minerals can cause any one mineral to occur in many different colors. For example, quartz is usually clear or white, but also occurs in purple, yellow, and red. However, when used in conjunction with other properties, color can be a good clue.</font></div><div><font><br></font></div><div><font>Streak – Much more reliable than the outside color of a mineral, the streak is the color of the mineral when it is scratched or powdered. For example, the common mineral hematite occurs in a dull red, a rusty yellow, black, or shiny gray. However, no matter what the outside color is, when hematite is scratched, or streaked, it is always a dirty red. To obtain a streak color, rub the mineral across an unpolished porcelain tile, called a streak plate. One can also scratch a mineral with a nail or sharp knife blade and observe the color inside the mineral.</font></div><div><font><br></font></div><div><font>Luster – Luster is the outward sheen or appearance of the mineral when held in natural light. Luster is divided into two major categories: metallic and non-metallic. The non-metallic category is then further described using such common terms as silky, pearly, glassy (vitreous), or dull.</font></div><div><font><br></font></div><div><font>Hardness – Hardness is a measure of a mineral’s resistance to scratching. Hardness is measured on Moh’s hardness scale, with a 1 being the softest (talc) and 10 being the hardest (diamond). The numbers on the scale are relative, not absolute. That is, diamond is not really 10 times harder than talc; it is actually about 200 times harder. Moh’s hardness scale is:</font></div><div><font><br></font></div><div><font>1 – talc</font></div><div><font>2 – gypsum</font></div><div><font>3 – calcite</font></div><div><font>4 – fluorite</font></div><div><font>5 – apatite</font></div><div><font>6 – orthoclase</font></div><div><font>7 – quartz</font></div><div><font>8 – topaz</font></div><div><font>9 – corundum</font></div><div><font>10 – diamond</font></div><div><font><br></font></div><div><font>Hardness is determined by scratching the mineral with several tools to determine which is harder, the tool or the mineral.&nbsp;</font></div><div><font><br></font></div><div><font>2 – fingernail</font></div><div><font>2.5 – copper penny</font></div><div><font>5 – steel nail</font></div><div><font>5.5 – glass plate</font></div><div><font><br></font></div><div><font>For example, if a mineral scratches a copper penny but is itself scratched by a steel nail, the mineral has a hardness between 2.5 and 5.</font></div><div><font><br></font></div><div><font>Crystal Habit – If given the opportunity to grow in an open space, all minerals will grow in a distinctive crystal shape, called habit. Some minerals have several shapes. Quartz tends to grow in six-sided columns capped by a six-sided pyramid. Pyrite tends to grow in cubes.</font></div><div><font><br></font></div><div><font>Cleavage – Cleavage defines how a mineral breaks. Cleavage is caused by planes of weakness within the crystal structure. Some minerals have only 1 plane of cleavage (mica breaks into flat sheets), while others have 3 planes of cleavage (halite breaks into cubes, calcite breaks into rhombohedrons) or even 4 planes of cleavage (fluorite). For some minerals, the angle formed by two or more directions of cleavage is characteristic. For example, pyroxene and amphibole are both dark brown, greenish, or blackish minerals that occur in many rocks. The easiest way to tell them apart is that pyroxene has a cleavage angle of 90 degrees, while amphibole has two cleavage angles of 60 and 120 degrees. Some minerals have poor cleavage (like pyrite) and some minerals have no cleavage and will fracture in random patterns (like quartz).</font></div><div><font><br></font></div><div><font>Density (specific gravity) – Two minerals of the same size (volume) may feel to weigh differently. This property is called density and is technically called specific gravity. Specific gravity is the ratio of the weight of a mineral to the weight of an equal volume of water. A mineral that is dense has a high specific gravity and will feel heavier in the hand than a mineral with a low specific gravity. The mineral galena, for example, has a high specific gravity and is very dense. It feels much heavier than a low specific gravity mineral such as mica or gypsum.</font></div><div><font><br></font></div><div><font>Special Properties – Some minerals have special properties. Magnetite is magnetic and is attracted to a magnet. A special type of magnetite, called lodestone, is a magnet and can pick up paper clips. Calcite will react to hydrochloric acid and will fizz. Some minerals fluoresce in ultraviolet light. Halite tastes salty.</font></div></div>\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2012-11-29T05:44:58.000Z\" }, \"duration\": null, \"grades\": [2], \"links\": [{ \"_id\": { \"$oid\": \"50b6f6962b89ee0002000009\" }, \"url\": \"http://www.teachersdomain.org/resource/idptv11.sci.ess.earthsys.d4krom/\", \"title\": \"Video: Rocks and Minerals\", \"note\": \"3min.&nbsp;This video segment from IdahoPTV's D4K defines the different types of rock and how they are formed. Learn about the 2 ways rocks are classified and find out all the ways rocks can be changed.\" }, { \"_id\": { \"$oid\": \"50b6f6f02b89ee000200000d\" }, \"url\": \"http://www.educ.msu.edu/michiganrocks/MI%20Rocks%20website/2lesson.htm\", \"title\": \"Reference: Michigan Rocks \", \"note\": \"\" }], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"Identify minerals using distinguishing properties.<div><br></div>\", \"procedure\": \"\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000036\" }, { \"$oid\": \"4f28bdf6023c64000100003e\" }, { \"$oid\": \"4f28bdf6023c640001000041\" }], \"status\": \"draft\", \"subject\": \"earth\", \"teacher_setup\": \"\", \"term_ids\": [], \"title\": \"What Mineral Is It?\", \"updated_at\": { \"$date\": \"2012-11-29T05:46:41.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50bed8b7bc07d80002000009\": { \"_id\": { \"$oid\": \"50bed8b7bc07d80002000009\" }, \"assessment\": \"\", \"assistant_setup\": \"\", \"background\": \"<font>http://www.uen.org/Lessonplan/preview.cgi?LPid=10988</font><div><font><br></font></div><div><font>http://www.uen.org/Lessonplan/LPview.cgi?grade=3 -- good resource</font></div>\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2012-12-05T05:16:39.000Z\" }, \"duration\": null, \"grades\": [3], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"Students will create a model of the moon and use a flashlight to illustrate the various phases of the moon.\", \"procedure\": \"\", \"reflection\": null, \"standard_ids\": [], \"status\": \"draft\", \"subject\": \"earth\", \"teacher_setup\": \"\", \"term_ids\": [], \"title\": \"Moon Observations\", \"updated_at\": { \"$date\": \"2012-12-05T05:17:19.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50c6b34fe8e3e10002000002\": { \"_id\": { \"$oid\": \"50c6b34fe8e3e10002000002\" }, \"assessment\": \"<ol><li>Informally assess students as they practice identifying plant parts and&nbsp;complete their&nbsp;<i>Parts of a Plant&nbsp;</i>worksheets.</li><li>Collect worksheets and assess.</li><li>Return to their ideas about plants during the assessment of prior and background knowledge and see if anything has changed.</li></ol>\", \"assistant_setup\": \"<ul><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Check with the teacher to determine if you will need to make copies of the worksheets. If so, make copies of pages 3 and 4 from the attachment at the bottom.</li><li>Put on the H4S blue vest located in the materials bin.</li><li><font>Gather materials and arrange bins of supplies based on teacher’s grouping. It may be easiest to divide the plants into their parts and put those parts into group bins (e.g., one stem -&nbsp;asparagus, one root - carrot, one leaf - chard, one flower -&nbsp;broccoli&nbsp;floret, one fruit - tangerine, a few seeds - sunflower) ahead of time so that the bins can be easily distributed. However, if there is time and the teachers chooses to use the whole plants to divide in front of the class, that will work too.</font></li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ul>\", \"attachments\": [{ \"_id\": { \"$oid\": \"50c6b73ce8e3e1000200000b\" }, \"caption\": \"Seed Sort\", \"w\": 612, \"h\": 792, \"attachment\": \"3aa0e5b14e.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 30149 }, { \"_id\": { \"$oid\": \"50c6b761e8e3e1000200000f\" }, \"caption\": \"PLant Parts We Eat\", \"w\": 612, \"h\": 792612, \"attachment\": \"b7d9093691.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 6677753 }], \"background\": \"Which parts of the plant do we usually eat? The seed? The fruit?<br><div><div>When we eat asparagus, we are eating the stem of the plant. When we&nbsp;eat spinach or lettuce, we are eating the plant’s leaves. We eat the fruit&nbsp;of squash, cucumber and tomato plants. When we eat corn or peas we&nbsp;are eating seeds, and when we eat radish or carrot, we are eating roots.&nbsp;Cauliflower and broccoli plants produce flowers we like to eat.&nbsp;With some plants we eat more than one part. The root of the beet&nbsp;plant is what most people like to eat, but the leaves are also good to&nbsp;eat—in salads, when the leaves are young and tender, and cooked when&nbsp;they get bigger. We eat the root of the onion plant but can also eat the&nbsp;stems, for a milder flavor.</div><div>Some of the plants we eat are poisonous—if we eat the wrong part.&nbsp;The leaves of tomato plants are poisonous. For many years people&nbsp;would not even eat tomatoes, because they thought the entire plant was&nbsp;poisonous. Now we know that the fruit of the tomato plant has vitamins&nbsp;that are very good for us. They are also delicious—sliced or chopped&nbsp;fresh into salads, cooked into spaghetti sauce or processed into&nbsp;ketchup.</div></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-12-11T04:15:12.000Z\" }, \"duration\": 45, \"grades\": [0, 1, 2], \"links\": [{ \"_id\": { \"$oid\": \"50c6b7a7e8e3e10002000014\" }, \"url\": \"http://oklahoma4h.okstate.edu/aitc/lessons/primary/partseat.pdf\", \"title\": \"Lesson Source\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"50c6b832e8e3e10002000018\" }, \"url\": \"http://www.songsforteaching.com/bananaslugstringband/rootsstemsleaves.htm\", \"title\": \"Song: Roots, Stems, Leaves, Flowers, Fruits and Seeds\", \"note\": \"\" }], \"materials_note\": \"<ul><li>Make copies of pages 3 and 4 from the attachment,<i> Plant Parts We Eat</i>.</li><li>Provide assorted examples of&nbsp;fresh vegetables&nbsp;that are roots,&nbsp;leaves, stems, seeds&nbsp;and flowers.</li><li>Make copies of <i>Seed Sort</i>.</li><li>If seeds are too expensive, buy the 16 bean soup mix from the grocery store.</li></ul>Here are some examples of fruits and vegetables:<br><ul><li>stems: asparagus,&nbsp;celery</li><li>flowers: cauliflower,&nbsp;broccoli</li><li>root: radish, beet,&nbsp;carrot, potato,&nbsp;parsnip</li><li>seeds: peas or beans</li><li>in pod, corn on the&nbsp;cob</li><li>fruit: eggplant,&nbsp;squash, tomatoes,&nbsp;cucumber</li><li>leaves: lettuce,&nbsp;cabbage, spinach,&nbsp;mustard greens, beet&nbsp;greens</li></ul>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f2b1e4fccb71d0001000015\" }, { \"$oid\": \"50c6b4a3e8e3e10002000004\" }, { \"$oid\": \"50c6b4ade8e3e10002000006\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4fa0cbcd0d3d05000100003f\" }, { \"$oid\": \"508ee99ed35ec10002000020\" }], \"note\": \"\", \"objective\": \"Students will be introduced to an assortment of vegetables&nbsp;and will learn to locate the parts humans use for food.<div><br></div>\", \"procedure\": \"<ol><li><font>Place the assorted fruits and vegetables on a table or counter for easy access.</font></li><li>Ask students to identify the vegetables as you hold them up,&nbsp;one by one. Ask if anyone has ever eaten any of the&nbsp;vegetables. Which ones are their favorites? Ask students to sort the&nbsp;veggies in piles according to which part we eat, the root, the seed,&nbsp;the stem or the leaves.</li><li>Hand out Student Worksheet A (page 3). Read the worksheet with your&nbsp;class, and discuss the different plant parts. Help students identify&nbsp;the plant parts we eat.</li><li>Hand out Student Worksheet B, and have students draw lines from&nbsp;the plants pictured to the correct words, using Student Worksheet A&nbsp;as a guide.</li><li>Bring samples of some vegetables students might not ordinarily eat (e.g., turnips, kale, mustard greens, etc.) and invite students to taste them&nbsp;and guess which part of the plant they came from.</li><li>If time permits, do the Seed Sort:&nbsp;Give each student a portion cup or pile of miscellaneous seeds.</li><li><font>Provide students time to freely explore all of the attributes of the seeds themselves, using hand lenses to observe and nonstandard measuring tools to measure/compare (e.g. is the seed as big/bigger than... my thumb, eraser tip, penny). Give each student an assortment of the seeds. Once they have had ample time to observe the seeds carefully, ask the students to name various attributes about the seeds (e.g., size, color, texture, method of travel, etc.).</font></li><li><font>Have students sort the seeds according to shape, color, size, or another attribute that you discuss with them.</font></li><li><font>Each student will mark a graph showing the number of seeds in each category. They can either draw a picture of each seed at the bottom of the graph or set one seed at the base of each column. Students make one tally mark for each seed of a specific category, and then they color in the graph. Have extra graphs on hand so they can regroup and graph the seeds in a different manner. Challenge students to form categories that can contain more than one type of seed.</font></li><li><font>Allow students to practice comparing the seeds by having them complete the Sorting Seeds! worksheet three times and record their final sort.</font></li></ol>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000008\" }, { \"$oid\": \"4f28bdf6023c640001000017\" }, { \"$oid\": \"4f28bdf6023c640001000032\" }, { \"$oid\": \"4f28bdf6023c640001000034\" }, { \"$oid\": \"4f28bdf6023c64000100003b\" }, { \"$oid\": \"4f28bdf6023c64000100003e\" }, { \"$oid\": \"4f28bdf6023c640001000041\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<font>Read the book, <a href=\\\"http://www.amazon.com/Tops-Bottoms-Caldecott-Honor-Book/dp/0152928510\\\"><i>Tops and Bottoms</i></a> by Janet Stevens.</font><div>Review prior knowledge regarding plant parts.<br><div><br></div></div>\", \"term_ids\": [{ \"$oid\": \"4f8511f479626d0001000027\" }, { \"$oid\": \"4f85123279626d000100002b\" }, { \"$oid\": \"50c6baf7e8e3e1000200001b\" }, { \"$oid\": \"50c6bb1de8e3e1000200001d\" }, { \"$oid\": \"50c6bb87e8e3e10002000020\" }, { \"$oid\": \"50c6bba1e8e3e10002000022\" }, { \"$oid\": \"50c6bbdbe8e3e10002000025\" }], \"title\": \"Parts of a Plant\", \"updated_at\": { \"$date\": \"2013-04-22T01:14:20.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50ddfd695f296e0002000002\": { \"_id\": { \"$oid\": \"50ddfd695f296e0002000002\" }, \"assessment\": \"\", \"assistant_setup\": \"<ul><li><font>Read the<a href=\\\"http://www.raftbayarea.org/readpdf?isid=433\\\">&nbsp;idea sheet</a>&nbsp;for this activity.</font></li><li><font>Read the notes in the materials section, paying careful attention to the 2D and 3D apple models.</font></li><li>After checking into the school office, retrieve the H4S bin from the designated area.</li><li><font>Review the printed activity page, paying special attention to the needs of the groups/grouping.</font></li><li><font>Based on the idea sheet and activity page, assemble the materials into appropriate groups.</font></li><li><font>Put on the H4S blue vest located in the materials bin.<br></font></li><li><font>Put the real apples, plastic knives and paper towels into the group bins to start, distribute the remaining apple models&nbsp;</font>according to the teacher's instructions.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ul>\", \"background\": \"This activity is adapted from a&nbsp;<a href=\\\"http://www.raftbayarea.org/?__utma=1.1055110381.1355257622.1355869226.1356725700.3&amp;__utmb=1.1.10.1356725700&amp;__utmc=1&amp;__utmx=-&amp;__utmz=1.1355257622.1.1.utmcsr=raft.net|utmccn=(referral)|utmcmd=referral|utmcct=/search&amp;__utmv=-&amp;__utmk=35035809\\\">RAFT</a>&nbsp;(Resource Area for Teachers)<a href=\\\"http://www.raftbayarea.org/readpdf?isid=433\\\">&nbsp;idea sheet</a>. The science behind this activity is written on that sheet.<br>RAFT helps educators meet 21st century challenges by providing them with resources that help turn abstract and complex ideas into activities that students can grasp. Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-12-28T20:13:29.000Z\" }, \"duration\": 30, \"grades\": [0, 1, 2, 3, 4, 5], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"\", \"procedure\": \"<div><font>In addition to the procedure listed on the RAFT idea sheet, do the following:</font></div><div><ol><li>According to the idea sheet present the apple models in stages, starting with a real apple, plastic model of an apple, photo, cutout, cartoon, word \\\"apple,\\\" the word \\\"apple\\\" in another language, and ending with the word \\\"apple\\\" in another language that does not have a traditional alphabet.</li><li>Depending on your management style, have the science aide pass out progressive renditions of the apple, allow one person from each group to retrieve the each item, pass the item out to all the groups at the same time, or do whatever works best for you. The items will be numbered and grouped in plastic bags so that you won't loose track.</li><li>The idea sheet offers a challenge that group with the most unique items wins, if you do this, ask each group to work quietly so that they don't share their \\\"lists.\\\"</li></ol></div>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000008\" }, { \"$oid\": \"4f28bdf6023c640001000018\" }, { \"$oid\": \"4f28bdf6023c64000100001b\" }, { \"$oid\": \"4f28bdf6023c640001000021\" }, { \"$oid\": \"4f28bdf6023c640001000022\" }, { \"$oid\": \"4f28bdf6023c640001000032\" }, { \"$oid\": \"4f28bdf6023c640001000033\" }, { \"$oid\": \"4f28bdf6023c640001000053\" }, { \"$oid\": \"4f28bdf6023c640001000070\" }, { \"$oid\": \"4f28bdf6023c64000100008e\" }], \"status\": \"draft\", \"subject\": \"life\", \"teacher_setup\": \"<ul><li>Please read the notes in the materials section, paying careful attention to the 2D and 3D apple models.</li><li><br></li></ul>\", \"term_ids\": [], \"title\": \"Seed Germinator\", \"updated_at\": { \"$date\": \"2012-12-28T20:16:58.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50ddff045f296e0002000004\": { \"_id\": { \"$oid\": \"50ddff045f296e0002000004\" }, \"assessment\": \"\", \"assistant_setup\": \"<ol><li>Read the activity.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Based on the procedure, assemble the materials into appropriate groups.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>If the teacher instructs you to do so, download and make copies, one for each student, of the pages that will make up the&nbsp;<i>Garden Counting Book</i>.</li><li><font>Punch three holes in each file folder and handouts or blank sheets of paper, depending on whether teacher chooses to have students write number and words, or copies pages with numbers and words prewritten.</font></li><li>Each student may cut the squares of tissue paper, or aide may pre-cut squares, depending upon the level of the students.</li><li>Divide supplies into group boxes.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ol>\", \"background\": \"<font>Students develop counting skills through repetition and practice. Creating a personal counting book will inspire students to repeat numbers. Have them apply their natural curiosity about the outdoors to counting practice, and create a counting book for repeated practice!</font><div><font><br></font></div><div><font><i><a href=\\\"http://www.raftbayarea.org/readpdf?isid=444\\\">Journaling Your Trash</a></i> is a <a href=\\\"http://www.raftbayarea.org/?__utma=1.1055110381.1355257622.1359073457.1359073460.9&amp;__utmb=1.10.9.1359073474895&amp;__utmc=1&amp;__utmx=-&amp;__utmz=1.1355257622.1.1.utmcsr=raft.net|utmccn=(referral)|utmcmd=referral|utmcct=/search&amp;__utmv=-&amp;__utmk=248478343\\\">RAFT</a> idea sheet activity.</font></div><div><font><div>From that sheet: People have been collecting and recording thoughts, ideas, and information in written form for millennia.&nbsp;Although not always taking present-day book form (e.g. – clay tablets, scrolls), the concept of recording&nbsp;information in a book for remote retrieval was truly a giant leap for mankind. Major developments in book&nbsp;history include the first alphabets (appearing around 1000 B.C.) and mechanical printing (1455 A.D.) by&nbsp;Johannes Gutenberg) that helped spark the European Renaissance. Many famous naturalists, including Charles&nbsp;Darwin and Meriwether Lewis, used journal drawings and notes as a means of collecting information.</div><div><br></div><div><font>All animals, in a sense, produce “waste” and leave physical evidence of their existence. &nbsp;Humans are unique in&nbsp;</font>our abundant tool use, consumerism, product production, and extreme environment modifications… to the point&nbsp;that our existence in such large numbers can have major effects on global and local environments. Human trash&nbsp;and waste production has been an issue in cities for thousands of years, leading to water pollution and a variety of&nbsp;health issues (e.g. – the Black Death). The trash problem is a larger concern today than ever before because there&nbsp;<font>are more people, each person produces more waste, and the type of trash produced contains more&nbsp;non-biodegradable&nbsp;and potentially hazardous materials. U.S. citizens are among the highest waste producers, about&nbsp;</font>222 million tons of waste per year! Awareness is the first step. &nbsp;And then everyone needs to do their part to&nbsp;reduce, reuse, recycle, and respond.</div></font></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-12-28T20:20:20.000Z\" }, \"duration\": 30, \"grades\": [0, 1], \"materials_note\": \"<div>per student:</div><div><ul><li>2 pieces of cardboard for the front and back of the book; recycled file folders work well</li><li>11 sheets of white construction paper or copy paper</li><li>2 rubberbands</li><li>natural materials that can be pressed, e.g. leaves or flowers</li><li><font>25 cm (10”) long&nbsp;</font>section of about 5&nbsp;mm (3/8”) diameter&nbsp;cable, rod, strip or&nbsp;similar material&nbsp;that is unneeded or&nbsp;would have become&nbsp;trash.</li><li>If flower press is not available, you can use heavy books, for pressing leaves and flowers</li><li>Markers or crayons are okay.</li><li>Natural Materials to decorate the covers of the&nbsp;<i>Garden Counting Book.</i></li><li>tissue paper is for page 3, trees, and should be a leaf color.</li><li>pinto beans or other inexpensive dried beans make good seeds.</li><li><font>string or yarn may be used for the page&nbsp;depicting&nbsp;\\\"roots.\\\"</font></li></ul></div><div><br></div>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f9e1a5b7b922d0001000022\" }, { \"$oid\": \"4fc3fa937fcc320003000015\" }, { \"$oid\": \"50d146b4c25e6e0002000002\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f8755f1dc4c210001000023\" }, { \"$oid\": \"4f875ab0dc4c210001000040\" }, { \"$oid\": \"4f8b2064f400440001000040\" }, { \"$oid\": \"4fa0cbcd0d3d05000100003f\" }, { \"$oid\": \"501c21858c154c000200002d\" }, { \"$oid\": \"506226d895dae60002000038\" }, { \"$oid\": \"508ee99ed35ec10002000020\" }, { \"$oid\": \"5101d54e8c3e5f0002000027\" }, { \"$oid\": \"5103381567071c000200000c\" }], \"note\": \"<font>You may use this activity as a record of hands-on science activities that you've done throughout a unit. For example, if the students make an extra recycled pot in the <i>Make a Newspaper Pot</i> activity, they can flatten the pot and use it for the number one, \\\"1 POT.\\\" The <i>Seed Sort</i> could be&nbsp;incorporated&nbsp;with the number 10, \\\"10 seeds,\\\" etc.</font>\", \"objective\": \"<div>The student will practice counting 0-10.&nbsp;</div>Identify and review parts of a plant and other garden-related objects through the creation of a counting book.<div><br><div><br></div></div>\", \"procedure\": \"<ol></ol><ol><li>Create a title page for the book:&nbsp;<font><i>My&nbsp;</i></font><i>Garden Counting Book.&nbsp;</i>Have students decorate the cover page as they like.</li><li>Work with each child to label the bottom of each of the pages of white paper with a numeral and a blank space. Begin with: 1 _________ . On the next page, write, 2 ___________ . Ask student what comes next, and proceed in the same manner until ten pages are labeled.</li><li>Organize the pages along the left hand margin with the title page on the top, and the numbered pages in order from 1 to 10.<font></font></li><li><font>Using the sample&nbsp;<i><font><i>My&nbsp;</i></font><i>Garden Counting Book</i>&nbsp;</i>have each child create his/her own book.</font></li><li><font>Ask students to bring flowers for pressing for next session. (Note: Flowers with thick or moist centers, such as daisies, don’t work well for pressing, as they will mold.)</font></li></ol><div>Part 2</div><ol><li><font>Use a flower press or thick heavy book to press flowers flat.</font></li><li><font>Allow several days for the items to press flat. Items are ready when they can be removed from the book and still remain flat. (Tip: For best results, stack several heavy books on top of each other to add extra weight.)</font></li><li><font><font>Remove the items from the&nbsp;flower press. Mix the flowers up and tell students that they might not end up with their original flower. Glue items onto appropriate page of&nbsp;<i>My&nbsp;</i></font><i>Garden Counting Book</i>.<font>&nbsp;</font></font></li><li><font>Read the completed book with students, and as the book becomes more familiar to him, have him read it to science aide or teacher.</font></li></ol>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000008\" }, { \"$oid\": \"4f28bdf6023c64000100000e\" }, { \"$oid\": \"4f28bdf6023c640001000011\" }, { \"$oid\": \"4f28bdf6023c64000100001b\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<ul><li><font><i>Garden Counting Book&nbsp;</i>should take two sessions.</font></li><li><font>Review numbers and garden activities that class has completed thus far.</font></li><li><font>Check for prior knowledge regarding plant parts and gardens.</font></li></ul>\", \"term_ids\": [{ \"$oid\": \"4f85123279626d000100002b\" }, { \"$oid\": \"50c6baf7e8e3e1000200001b\" }, { \"$oid\": \"50c6bb1de8e3e1000200001d\" }, { \"$oid\": \"50c6bb87e8e3e10002000020\" }, { \"$oid\": \"50c6bba1e8e3e10002000022\" }, { \"$oid\": \"50c6bbdbe8e3e10002000025\" }], \"title\": \"Garden Counting Book\", \"updated_at\": { \"$date\": \"2014-04-16T04:34:05.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50e1269c3df52d0002000004\": { \"_id\": { \"$oid\": \"50e1269c3df52d0002000004\" }, \"assessment\": \"\", \"assistant_setup\": \"<ol><li>Read the activity.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Based on the procedure, assemble the materials into appropriate groups.</li><li>Put on the H4S blue vest located in the materials bin.</li><li><font>If the teacher instructs you to do so, download and make copies, one for each group, of the <i>Planetary Distance Table.</i></font></li><li>Divide supplies into group boxes.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ol>\", \"attachments\": [{ \"_id\": { \"$oid\": \"5101aeed8c3e5f000200001b\" }, \"caption\": \"Planetary Distance Table\", \"w\": 612, \"h\": 792, \"attachment\": \"7eac511de3.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 44285 }], \"background\": \"<div><font>Interplanetary travel is extremely difficult due to the almost unimaginable distances between the planets in our solar system. Voyager II, traveling at nearly 50,000 mph took 12 years to reach the planet Neptune.</font></div><div><font><br></font></div><div><font>We can make a scale model of the distances between the planets using almost anything as our reference. In doing so, we may be able to determine a variety of ways to classify the planets of our solar system. It is almost impossible to make a scale model of the solar system that is correct in both planetary diameter and distance.</font></div><div><font><br></font></div><font>In this activity, learners build a scale model of the solar system using a roll of toilet paper. (This activity appeals to children’s love of bathroom humor, but keeps it clean).&nbsp;The instructions suggest using gel pens on cheap, flat toilet paper to mark the name and location of the sun, the planets, and Ceres (to represent the asteroid belt). There are limits to this model: these are average distances since planetary orbits are elliptical, and the planets will never actually be in a straight line like they are here.</font><div><div>Even in our own “cosmic neighborhood,” distances in space are so vast that they are difficult to imagine.</div><div><br></div><div>More information: How big is the universe?</div><div><div><font>No one knows if the universe is infinitely large, or even if ours is the only universe there is.</font></div><div><font><br></font></div><div><font>Although our view of the universe is limited, our imaginations are not. Astronomers have indirect evidence that the universe of galaxies extends far beyond the region we can see. But no one knows if the whole universe is infinitely large - large beyond limit.</font></div><div><font><br></font></div><div><font>According to the leading theories, other parts of the universe may look very different from our own - and may even have different laws of nature. We may never be able to find out for sure. But it is possible that clues to the answer lie in plain view, just waiting to be discovered!</font></div></div><div><font><br></font></div><div><br></div></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2012-12-31T05:46:05.000Z\" }, \"duration\": 30, \"grades\": [3], \"links\": [{ \"_id\": { \"$oid\": \"50e126fb3df52d0002000008\" }, \"url\": \"http://www.astrosociety.org/edu/family/materials/toiletpaper.pdf\", \"title\": \"Source\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"50e127143df52d000200000c\" }, \"url\": \"http://solar.physics.montana.edu/tslater/plunger/tissue.htm\", \"title\": \"Source\", \"note\": \"\" }], \"materials_note\": \"<ul><li>Use clear tape for repairs.</li><li>Handout of <i>Planetary Distance Table</i>.</li><li>One roll of toilet paper, 201 sheets or more, per group or per pair.</li><li>Felt-tip marker(s) or gel pen, preferably 10 colors; but one pen per group will do. (If pens are very liquid they may bleed through too much or tear the paper. Gel pens work best).</li></ul>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f87563adc4c21000100002f\" }, { \"$oid\": \"4fa0cbcd0d3d05000100003f\" }, { \"$oid\": \"50e127553df52d000200000f\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"<div><font>Extension: Astronomers believe there is a vast cloud of frozen comets called the Oort Cloud that surrounds our solar system. It lies roughly 50,000 times farther from the Sun than the Earth is.</font></div><div>How many squares of toilet paper would you need to put the cloud on your model?</div>\", \"objective\": \"Create a scientific model.<br><div><div>The student will observe the relative distance between planets and the order of the planets.</div></div><div><br></div>\", \"procedure\": \"<ol><li><font>Pass out pens, table of distances, tape dispenser and roll of toilet paper to each group.</font></li><li>Take one sheet of toilet paper and test the pens. After learning the best way to write on toilet&nbsp;paper, throw away the test sheet.</li><li>Make a dot on the seam between the first two sheets of toilet paper. This is the Sun. Write&nbsp;the word Sun beside the dot.</li><li>Use the table of distances provided to mark off the distances to each of the planets. The&nbsp;number in the table is the number of sheets of toilet paper needed to reach the orbit of each&nbsp;planet from the sun, so keep a running count as you go along. Make a dot and write the&nbsp;appropriate planet name on toilet paper at each distance indicated. Ceres, the largest asteroid,&nbsp;is used to represent the asteroid belt between Mars and Jupiter.</li><li><font>Keep a running count as you&nbsp;work on this. Each distance&nbsp;is from your starting&nbsp;point, the Sun. If a group loses count, have them start over from the Sun, taking care not to tear the sheets.</font></li><li>Use colored pens to mark the distance&nbsp;to the planet’s orbit from the Sun and label&nbsp;the orbit with the planet’s name on the toilet paper.</li><li>Once all the groups have marked off the planet names and distances (squares), move to a location with enough space so that each group can spread out their measured toilet paper.&nbsp;<font>200 sheets of toilet paper stretch&nbsp;out to nearly 84 feet.&nbsp;(</font>If you don’t have the time or space to complete the model, try to get to Jupiter and tell the class that Saturn nearly&nbsp;doubles the distance. The same is true of going from Saturn to Uranus. OR... if you don't have an appropriate space, have each group demonstrate their toilet paper model in front of the class, one at a time).</li><li>Toss the toilet paper in recycling to clean up.</li><li>Review objective and background information for guided inquiry after clean-up.</li></ol>\", \"reflection\": null, \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c64000100005c\" }, { \"$oid\": \"4f28bdf6023c640001000061\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"<ul><li>Review prior knowledge of models, scale, and the enormous size of the universe.</li><li>Explain&nbsp;that your \\\"point of view\\\" makes a difference when viewing objects that are far away.</li><li><font>Have students do this:</font></li><ul><li><font>stand up and hold a thumb&nbsp;</font>at arm's length. With one eye closed, line up your thumb with an object in the distance. Now switch eyes so that only the other eye is open. Does your thumb suddenly change position? Move your thumb closer to your nose and try again. Can you see your thumb jump even more?</li><li>Astronomers call this effect \\\"parallax.\\\" The closer an object, the more it appears to shift against the distant background, when viewed from two different spots.</li></ul><li><font>Explain that we will be making a solar system model using a scale model, emphasizing the limitations of a model when dealing with such vast distances (as stated above,&nbsp;</font>these are average distances since planetary orbits are elliptical, and the planets will never actually be in a straight line like they are in this activity).</li><li>Make sure you&nbsp;have room for your model before&nbsp;you start.</li><li>If there is plenty of toilet paper, consider having the students work in pairs or groups of three (this depends upon your students' ability to work independently and your management style).</li></ul>\", \"term_ids\": [{ \"$oid\": \"505fede683f6050002000007\" }, { \"$oid\": \"5101adef8c3e5f000200000e\" }, { \"$oid\": \"5101ae2a8c3e5f0002000011\" }], \"title\": \"Toilet Paper Solar System\", \"updated_at\": { \"$date\": \"2013-02-04T20:11:49.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50fb679fdf018b0002000006\": { \"_id\": { \"$oid\": \"50fb679fdf018b0002000006\" }, \"standard_ids\": [], \"term_ids\": [], \"materials_per_clas_ids\": [], \"materials_per_student_ids\": [], \"materials_per_group_ids\": [], \"status\": \"draft\", \"title\": \"Kindergarten Senses Games\", \"subject\": \"life\", \"grades\": [0], \"objective\": \"Play outdoor games to experience senses.\", \"background\": \"\", \"materials_note\": \"\", \"assistant_setup\": \"\", \"teacher_setup\": \"\", \"procedure\": \"<font>fdas</font><div><div><font>Blind Trust Print</font></div><div><font>Collect It!</font></div><div><font>Pin ItEmailTwitter</font></div><div><font><br></font></div><div><font>Download Activity</font></div><div><font>Very poor Poor Good Very good Excellent based on 7 ratings</font></div><div><font>See in slideshow: 9 Great Games for Active Fun</font></div><div><font>Following one- and two-step directions is expected in kindergarten. Having trouble getting your child to follow your words? Well, who doesn’t! &nbsp;This blind obstacle course turns the art of listening into an outdoor game. Give it a try, and see who’s better at following directions, you or her?</font></div><div><font><br></font></div><div><font>What You Need:</font></div><div><font>One scarf-- to use as a blindfold</font></div><div><font>Medium sized objects, to be used as obstacles</font></div><div><font>Ball</font></div><div><font>Bucket or a basket for the ball to go into</font></div><div><font>What You Do:</font></div><div><font>Set it Up. The first step in this activity of extraordinary trust is to set up the obstacle course. A large grassy area is the ideal setting for the event. Use a variety of medium sized objects to set up the obstacle course. For example:</font></div><div><font>Cones- to go around</font></div><div><font>Pillows- to step on top of, or over</font></div><div><font>Small boxes- to step into, or pick up</font></div><div><font>Hoola Hoops- to jump inside of, or pick up and drop over the body!</font></div><div><font>Jump ropes- to duck underneath, put inside of a nearby box, or wrap around something</font></div><div><font>The idea is to create a course that your child can maneuver around safely by following your directions. Place the objects about four feet apart, ending at a box or basket, which will be used as the ‘goal’.</font></div><div><font><br></font></div><div><font>Talk About Left and Right. If your child has difficulty remembering which is which, show her that if she holds her hands up with her thumbs down, the left hand will make an ‘L’ for left.</font></div><div><font>Introduce the Course. Walk your child over to the starting line and explain that you're going to give her directions to the finish line, where she'll place the ball in the basket to make a goal. Emphasize the need to listen very carefully and do only what you say (sounds like a dream come true!). Then cover both her eyes with the blindfold.</font></div><div><font>Direct! Keep your directions short and simple, giving one command at a time. For example, “Take three hops forward” or “Take one big step to the left”. As she becomes comfortable with the game you can give her a two-step direction to follow, such as “Take one large step backwards and two steps to the right.” Guide your child around the obstacle course to the finish line, where she can place the ball into the basket. Goal!</font></div><div><font>Once you've successfully directed your child to the finish line, it’s your turn to put on the blindfold and be directed. Learning to follow directions is a key kindergarten skill, but getting to direct mom or dad is a rare and fun turning of the tables! This activity is perfect for a sunny day, and it’s a great activity to play in teams, so have the whole family join in!</font></div></div>\", \"duration\": null, \"closure_duration\": null, \"assessment\": \"\", \"note\": \"\", \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"updated_at\": { \"$date\": \"2013-01-20T03:42:23.000Z\" }, \"created_at\": { \"$date\": \"2013-01-20T03:42:24.000Z\" }, \"T\": \"act\" }, \"50fb6911df018b0002000008\": { \"_id\": { \"$oid\": \"50fb6911df018b0002000008\" }, \"assessment\": \"\", \"assistant_setup\": \"Pre-cut egg cartons into 3-cup sections. 8 egg cartons will serve 32 children.\", \"background\": \"<div><font>Bugs and insects are not the&nbsp;synonymous.</font></div><div>\\\"True bugs\\\" have a mouth that is shaped like a straw or needle, which is called a stylet or rostrum. They also have a very specific membranous wing, which is thick and darkly colored where it connects to the body,&nbsp;but becomes thin and almost transparent toward its end. Insects that do not have a rostrum mouth or membranous wings, such as ants, termites, butterflies, mosquitoes, fleas and lice (just to name a few) would not be considered \\\"true bugs\\\" as they do not have one or both of these features.</div><div><br></div><div>Facts about caterpillars:</div><div><font>1.&nbsp;A caterpillar has just one job – to eat.&nbsp;</font></div><div><font>During the larval stage, the caterpillar must consume enough to sustain itself into adulthood. Without proper nutrition, it may not have the energy to complete its metamorphosis, or may be unable to develop eggs as an adult. Caterpillars can eat an enormous amount during a life cycle stage that typically lasts several weeks. Some consume 27,000 times their body weight during this life phase.</font></div><div><font>2. Caterpillars increase their body mass by as much as 1,000 times or more.</font></div><div><font>The larval stage of the life cycle is all about growth. Within the span of a few weeks, the caterpillar will grow exponentially. Because its cuticle, or skin, is only so pliable, the caterpillar will molt multiple times as it gains size and mass. The stage between molts is called an instar, and most caterpillars go through 5-6 instars before pupating.</font></div><div><font>3. A caterpillar's first meal is usually its eggshell.</font></div><div><font>In most cases, when a caterpillar ecloses (hatches) from its egg, it will consume the remainder of the shell. The outer layer of the egg, called the chorion, is rich in protein, and provides the new larva with a nutritious start.</font></div><div><font>4. A caterpillar has as many as 4,000 muscles in its body.</font></div><div><font>That's one seriously muscle-bound insect! By comparison, humans have just 629 muscles in a considerably larger body. The caterpillar's head capsule alone consists of 248 individual muscles, and about 70 muscles control each body segment. Remarkably, each of the 4,000 muscles is innervated by one or two neurons.</font></div><div><font>5. Caterpillars have 12 eyes.&nbsp;</font>On each side of its head, a caterpillar has 6 tiny eyelets, called stemmata, arranged in a semi-circle. One of the 6 eyelets is usually offset a bit, and located closer to the antennae. You would think an insect with 12 eyes would have excellent eyesight, but that's not the case. The stemmata serve merely to help the caterpillar differentiate between light and dark. If you watch a caterpillar, you'll notice it sometimes moves its head from side to side. This most likely helps it judge depths and distances.</div><div>6.&nbsp;<font>Caterpillars produce silk.&nbsp;</font>Using modified salivary glands along the sides of their mouth, caterpillars can produce silk as needed. Some caterpillars, like gypsy moths, disperse by \\\"ballooning\\\" from the treetops on a silken thread. Others, such as eastern tent caterpillars or webworms, construct silk tents in which they live communally. Bagworms use silk to join dead foliage together into a shelter. Caterpillars also use silk when they pupate, either to suspend a chrysalis or to construct a cocoon.</div><div>7.&nbsp;<font>Caterpillars have 6 legs, just as adult butterflies or moths do.&nbsp;</font>But wait! There are way more than 6 legs on most caterpillars you've seen, right? Most of those legs are false legs, called prolegs, which help the caterpillar hold onto plant surfaces and allow it to climb. The 3 pairs of legs on the caterpillar's thoracic segments are the true legs, which it will retain in adulthood. A caterpillar may have up to 5 pairs of prolegs on its abdominal segments, usually including a terminal pair on the hind end.</div><div>8.&nbsp;<font>&nbsp;Caterpillars move in a wavelike motion, from back to front.</font></div><div><font>Caterpillars with a full complement of prolegs move in a fairly predictable motion. Usually, the caterpillar will first anchor itself using the terminal pair of prolegs, and then reach forward with one pair of legs at a time, starting from the hind end. There's more going on than just leg action, though. The caterpillar's blood pressure changes as it moves forward, and its gut, which is basically a cylinder suspended inside its body, advances in sync with the head and rear end. Inchworms and loopers, which have fewer prolegs, move by pulling their hind ends forward in contact with the thorax, and then extending their front half.</font></div><div><font>9. Caterpillars get creative when it comes to self defense.</font></div><div><font>Life at the bottom of the food chain can be tough, so caterpillars employ all kinds of strategies to avoid becoming a bird snack. Some caterpillars, such as the early instars of black swallowtails, look like bird droppings. Certain inchworms in the family Geometridae mimic twigs, and bear markings that resemble leaf scars or bark. Other caterpillars use the opposite strategy, making themselves visible with bright colors to advertise their toxicity. A few caterpillars, like the spicebush swallowtail, display large eyespots to deter birds from eating them. If you've ever tried to take a caterpillar from its host plant, only to have it fall to the ground, you've observed it using thanatosis to thwart your efforts to collect it. A swallowtail caterpillar can be identified by its smelly osmeterium, a special defensive stink gland just behind the head.</font></div><div><font>10. Many caterpillars use the toxins from their host plants to their own advantage.</font></div><div><font>Caterpillars and plants co-evolve. Some host plants produce toxic or foul-tasting compounds meant to dissuade herbivores from munching their foliage. But many caterpillars can sequester the toxins in their bodies, effectively using these compounds to protect themselves from predators. The classic example of this is the monarch caterpillar and its host plant, milkweed. The monarch caterpillar ingests glycosides produced by the milkweed plant. These toxins remain within the monarch through adulthood, making the butterfly unpalatable to birds and other predators.</font></div>\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2013-01-20T03:48:33.000Z\" }, \"duration\": null, \"grades\": [0], \"links\": [{ \"_id\": { \"$oid\": \"50fb6920df018b000200000c\" }, \"url\": \"http://video.about.com/familycrafts/3-Easy-Egg-Carton-Crafts.htm\", \"title\": \"Source\", \"note\": \"\" }], \"materials_note\": \"<ul><li>8 egg cartons will serve 32 children if egg cartons are cut into 3-cup sections.</li><li><font>goggly eyes can be purchased at teacher supply or craft stores. If they are not&nbsp;available&nbsp;or cost prohibitive, use buttons, bottle caps, or dried beans for eyes.</font></li></ul>\", \"materials_per_clas_ids\": [{ \"$oid\": \"50fb6b2fdf018b0002000012\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4fc3fa937fcc320003000015\" }], \"materials_per_student_ids\": [{ \"$oid\": \"508898c999b722000200001b\" }, { \"$oid\": \"50fb6b20df018b0002000010\" }, { \"$oid\": \"50fb6b5adf018b0002000014\" }], \"note\": \"\", \"objective\": \"\", \"procedure\": \"<font>fsa</font><div><div><font>I do not know if my son likes real bugs or craft bugs more but this egg carton caterpillar is fun and easy to make. Start with a 4 or 5 cup, long section of egg carton.&nbsp;</font></div><div><font><br></font></div><div><font>Glue two eyes and draw a mouth on one end then have your kids dot them up with markers. Then poke two holes near the dome on the head end. Shove a pipe cleaner through from underneath to make antennae and you are all set.</font></div></div>\", \"standard_ids\": [], \"status\": \"draft\", \"subject\": \"life\", \"teacher_setup\": \"\", \"term_ids\": [], \"title\": \"Egg Carton Caterpillars\", \"updated_at\": { \"$date\": \"2014-12-21T02:00:23.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50fb6d6ddf018b0002000016\": { \"_id\": { \"$oid\": \"50fb6d6ddf018b0002000016\" }, \"assessment\": \"\", \"assistant_setup\": \"Print all pages on cardstock...you will need to print 6 copies of the first page (no pictures...these are game mats) and one of each of the remaining pages (flower pages). Laminate all parts. Cut the flower pages apart (4 pieces each) but leave the game mats uncut. To play spread all of the flower pieces face down on the table. Each player takes a game mat. Players take turns choosing a card. If they need the card to complete their flower, they place it on their game mat. If not, they replace it on the table. The first player to complete a flower (all 4 parts) wins.\", \"background\": \"<div><br></div>\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2013-01-20T04:07:09.000Z\" }, \"duration\": null, \"grades\": [0], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"\", \"procedure\": \"<div><font>Print all pages on cardstock...you will need to print 6 copies of the first page (no pictures...these are game mats) and one of each of the remaining pages (flower pages). Laminate all parts. Cut the flower pages apart (4 pieces each) but leave the game mats uncut. To play spread all of the flower pieces face down on the table. Each player takes a game mat. Players take turns choosing a card. If they need the card to complete their flower, they place it on their game mat. If not, they replace it on the table. The first player to complete a flower (all 4 parts) wins.</font></div><div><font><br></font></div><div><font>Once students have played game, have them&nbsp;</font></div>\", \"standard_ids\": [], \"status\": \"draft\", \"subject\": \"life\", \"teacher_setup\": \"\", \"term_ids\": [], \"title\": \"Plant Match Up\", \"updated_at\": { \"$date\": \"2013-01-20T04:23:32.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50fb6d81df018b0002000018\": { \"_id\": { \"$oid\": \"50fb6d81df018b0002000018\" }, \"assessment\": \"\", \"assistant_setup\": \"\", \"background\": \"\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2013-01-20T04:07:29.000Z\" }, \"duration\": null, \"grades\": [0], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"\", \"procedure\": \"To use this activity, you will need a balance scale, a small pumpkin, and a variety of small objects (see sheet--all are classroom materials). Children use the balance scale to determine which item is heavier and record this on the sheet.<br><div><div><br></div></div>\", \"standard_ids\": [], \"status\": \"draft\", \"subject\": \"phys\", \"teacher_setup\": \"\", \"term_ids\": [], \"title\": \"Which is Heavier?\", \"updated_at\": { \"$date\": \"2013-01-20T04:18:56.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"50fb7045df018b000200001c\": { \"_id\": { \"$oid\": \"50fb7045df018b000200001c\" }, \"assessment\": \"\", \"assistant_setup\": \"\", \"background\": \"This activity will be done in three parts.\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2013-01-20T04:19:17.000Z\" }, \"duration\": null, \"grades\": [0], \"links\": [{ \"_id\": { \"$oid\": \"50fb705edf018b0002000020\" }, \"url\": \"http://crisscrossapplesauce.typepad.com/files/kindergarten-rock-unit.pdf\", \"title\": \"Rocks and Soils Worksheets\", \"note\": \"\" }], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"\", \"procedure\": \"\", \"standard_ids\": [], \"status\": \"draft\", \"subject\": \"earth\", \"teacher_setup\": \"\", \"term_ids\": [], \"title\": \"Rocks and Soil\", \"updated_at\": { \"$date\": \"2013-01-20T04:21:06.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"51032d9d4965160002000006\": { \"_id\": { \"$oid\": \"51032d9d4965160002000006\" }, \"assessment\": \"\", \"assistant_setup\": \"<ul><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Based on the procedure, assemble the materials into appropriate groups.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Slice sweet potatoes into sections so that each group or student pair has one piece. Make sure that each piece includes 2-3 \\\"eyes,\\\" the knobby marks on the potato where the root will ultimately sprout.</li><li>Fill pitchers with water.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ul>\", \"background\": \"The roots are the part of a plant that takes ”nourishment” (water and minerals) out of the ground to help the plant grow. They also can hold the plant in the ground. There are thicker roots and thinner roots. Do you see any leaves growing on them?<br><div><div>Can you predict what might happen if the potato was not touching the water? Let’s try it. How about if we put the potato in a dark closet out of the sun? Let’s try it.</div><div>Can you point out some ways that plants and animals are different? Similar?</div></div>\", \"closure_duration\": 5, \"created_at\": { \"$date\": \"2013-01-26T01:13:01.000Z\" }, \"duration\": 15, \"grades\": [0], \"materials_note\": \"<ul><li>3-5 toothpicks per group or pair.</li><li>clear plastic cups are preferable, since this will allow students to clearly observe root growth.</li><li>If there is no water in the classroom, use 2-3 pitcher to retrieve water and fill the cups.</li><li>2 knives</li><li>if science journals are not available, use plain paper to draw observation pictures.</li></ul>\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f8b2070f400440001000044\" }, { \"$oid\": \"508884c899b7220002000008\" }, { \"$oid\": \"50a16f95a7c9e70002000005\" }, { \"$oid\": \"5103335f67071c0002000006\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f2b1e4fccb71d0001000015\" }, { \"$oid\": \"4f459166eeaf0a000100001f\" }, { \"$oid\": \"4f9e1a5b7b922d0001000022\" }, { \"$oid\": \"4fc4552ca4d1f80003000015\" }, { \"$oid\": \"5013b3eab312360002000016\" }, { \"$oid\": \"510332a767071c0002000004\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"4f9e1f217b922d000100003a\" }], \"note\": \"\", \"objective\": \"<font>To observe&nbsp;sweet potato&nbsp;root growth over time.</font><div><font>Students will know that roots take in water which is needed for plant growth.</font></div><div><font><br></font></div>\", \"procedure\": \"<ol><li>Divide into 2-3 small groups, depending on how many science aides are available, and read aloud:&nbsp;<font><i>A Seed Grows: My First Look at a Plant's Life Cycle</i> by Pamela Hickman, or a similar book.</font></li><li><font>Return to tables and pass out materials.</font></li><li><font>Review background information for questions to pose during the activity.</font></li><li><font><font>Use magnifying glasses to have students observe sweet potatoes. Help them use adjective such as bumpy, hairy, rough, smooth, or multi-colored to&nbsp;describe&nbsp;what they see. Let them know something can include opposite traits.</font></font></li><li>With help, students will insert toothpick into sweet potato. Discuss how the potato will balance on the rim of the cup with the help of the toothpick.</li><li><font>With help, allow students to fill their cup of water&nbsp;half-full.</font></li><li>Rest a sweet potato on the rim of a glass of water by inserting 4 toothpicks around the middle. The bottom (pointed end) of the potato needs to always be immersed in the water.</li><li>Have students record their observations (explain and repeat these two words as often as possible) by drawing a picture of the sweet potato inside the cup of water in their science journal or on a piece of paper.</li><li>Set on a windowsill that gets some sun, and in a couple of weeks roots will form and leaves will sprout at the top.</li></ol>\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000005\" }, { \"$oid\": \"4f28bdf6023c640001000008\" }], \"status\": \"pub\", \"subject\": \"life\", \"teacher_setup\": \"<ol><li><font>The teacher will encourage discussion by having the students share what they know about plants and what they want to learn about plants in a KWL chart.</font></li><li><font>Teacher will introduce the song “Little Brown Seeds” and the students will learn about seeds and plant growth through song.</font></li><li><font>Song,&nbsp;</font><i>Little Brown Seeds, sung to the tune of&nbsp;</i><font><i>Itsy Bitsy Spider:</i></font></li><ul><li><font>Little brown seeds so small and round,</font></li><li><font>are sleeping quietly underground.</font></li><li><font>Down come the raindrops,</font></li><li><font>sprinkle, sprinkle, sprinkle.</font></li><li><font>Out comes the rainbow,</font></li><li><font>twinkle, twinkle, twinkle.</font></li><li><font>Little brown seeds way down below,</font></li><li><font>up through the earth they&nbsp;</font></li><li><font>grow, grow, grow.</font></li><li><font>Little green leaves come one by one.</font></li><li><font>They hold up their heads&nbsp;</font></li><li><font>and look at the sun.</font></li></ul></ol>\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"4f85123279626d000100002b\" }, { \"$oid\": \"5103329767071c0002000002\" }], \"title\": \"Growing Sweet Potatoes in Water\", \"updated_at\": { \"$date\": \"2013-03-17T03:29:50.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"512d99685f2f520002000006\": { \"_id\": { \"$oid\": \"512d99685f2f520002000006\" }, \"assessment\": \"\", \"assistant_setup\": \"\", \"background\": \"<div><font>There are many different types of rocks on Earth. Rocks are broken down into three families based on how they are formed. Igneous rocks are formed in the heat of a volcano, sedimentary rocks are formed when layers of soil and organic matter are pressed together for a long period of time and metamorphic rocks are formed when other types of rocks are exposed to high levels of heat, pressure or chemical changes below the surface of the earth. The processes used to make different types of rocks have an effect on their strength and resistance to breakage once they are fully formed. By knowing the strength of different types of rocks, engineers can choose stones that will best stand the test of time when using them for tools or structures.</font></div>\", \"closure_duration\": null, \"created_at\": { \"$date\": \"2013-02-27T05:28:08.000Z\" }, \"duration\": null, \"grades\": [2], \"materials_note\": \"\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"To discover whether certain types of rocks are more difficult to break than other types of rocks.<div><font><br></font><div><font>Students will test various sedimentary, igneous and metamorphic rocks to find out whether one of these rock families is stronger than the others.</font></div></div>\", \"procedure\": \"\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000036\" }, { \"$oid\": \"4f28bdf6023c640001000037\" }], \"status\": \"draft\", \"subject\": \"earth\", \"teacher_setup\": \"<font>Teacher will use the following questions for guided inquiry to&nbsp;elicit prior knowledge:</font><div><font><div>How are igneous rocks formed?</div><div>How are sedimentary rocks formed?</div><div>How are metamorphic rocks formed?</div><div>What types of rocks are known for their strength?</div><div>What types of rocks are known for their malleability?</div><div>What are some common uses for different types of rocks?</div></font></div>\", \"term_ids\": [], \"title\": \"Breaking Rocks\", \"updated_at\": { \"$date\": \"2013-02-27T05:30:39.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"513a45c112c8310002000003\": { \"_id\": { \"$oid\": \"513a45c112c8310002000003\" }, \"assessment\": \"<font>You may have noticed that the colors you put on the Color Mixing Wheel were the three primary colors: red, blue, and yellow. Once you started spinning the wheel, what did you notice about each of the three color circles on the cardboard disc? &nbsp;What do you think makes this happen?</font><div><font><br></font></div>\", \"assistant_setup\": \"<ol><li>Read the activity and watch the video in the link provided prior to class so that you know what the wheel will look like.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>If time permits, sharpen pencils (found in the bin).</li><li>Teacher may request that you prepare the pre-cut circles by poking the holes in the middle of them ahead of time. Use the pointed end of sharp scissors (per the procedure) or you may use a bamboo skewer or other sharp object to poke the holes.</li><li>Pre-cut the string for each student.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Gather materials and arrange bins of supplies based on teacher’s grouping.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return it to the designated area.</li></ol>\", \"attachments\": [{ \"_id\": { \"$oid\": \"51806c2f1dcf6c0002000012\" }, \"caption\": \"Mix Colors of Light; Make a Spectroscope\", \"w\": 612, \"h\": 792612, \"attachment\": \"e43f332581.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 18937 }], \"background\": \"<div><b>How does the color wheel work?</b></div><div><div><font>Let's start with the visual part of the experiment - color mixing. &nbsp;The colors you put on the Color Mixing Wheel are the three primary colors: red, blue, and yellow. &nbsp;When you combine two primary colors you get the secondary colors: green, purple, and orange. Obviously, the individual colors on the wheel are not mixing. The color mixing that happens is due to the speed at which the wheel is spinning as the string twists it. &nbsp;The colors are spinning at such a rate that your brain is unable to process them as the individual colors that are on the wheel. &nbsp;Instead, your brain takes a shortcut and creates the secondary colors.</font></div><div><font><br></font></div><div><font><b>Now, why does the string continue to twist?</b>&nbsp;</font></div><div><font>The answer lies in physics and, in particular, momentum. &nbsp;Once you have the string twisted, pulling on each end causes it to go tight. &nbsp;When the string is pulled tight, it wants to be completely straight. In going straight, the string unwinds from itself and causes the disc to spin one direction. &nbsp;But the string doesn't stop once it's unwound. It speeds past and gets twisted again. &nbsp;The momentum from pulling the string tight keeps the disc spinning until all the momentum is gone. Then you pull the strings tight again and set the disc spinning in another direction.</font></div></div><div><br></div><div>Color is a part of the electromagnetic spectrum and has always existed, although Sir Isaac Newton provided the first explanation of color in 1666. Newton passed a narrow beam of sunlight through a prism located in a dark room. Of course the visible spectrum (red, orange, yellow, green, blue, indigo, and violet) was displayed on the white screen.</div><font><div><font><br></font></div><div><font>People already knew that light passed through a prism would show a rainbow or visible spectrum, but Newton’s experiments showed that different colors are bent through different angles. Newton also thought all colors can be found in white light, so he passed the light through a second prism. All the visible colors changed back to white light. Light is the only source of color.</font></div><div><font><br></font></div><font>All elements or pure substances, such as gold, silver, neon, or hydrogen, give off a set of wavelengths of light when they are heated. Scientists can study the light given off by stars and other objects in space or heated substances here on Earth and identify the kinds of elements that are present. In fact, the element helium, which is a very light gas, was discovered by studying the spectral lines of the Sun. Later, helium was found here on Earth. Scientists who study light use very complicated spectroscopes to observe and measure wavelengths given off by light sources.</font></font><div><font><br></font></div><div>The color of an object is seen because the object merely reflects, absorbs, and transmits one or more colors that make up light. The endless variety of color is caused by the interrelationship of three elements: Light, the source of color; the material and its response to color; and the eye, the perceiver of color. Colors made by combining blue, yellow, and red light are called additive; and they are formed by adding varying degrees of intensity and amounts of these three colors.</div><div><div>These primary colors of light are called cyan (blue-green), yellow, and magenta (blue-red).</div></div><div><font><br></font></div><div><font><div>Pigment color found in paint, dyes, or pigment molecules present in flowers, trees, and animals form ink. Absorbing, or subtracting makes the color, certain parts of the spectrum and reflecting or transmitting the parts that remain. Each pigment molecule seems to have its own distinct characteristic way of reflecting, absorbing, or transmitting certain wavelengths. Natural and manmade colors all follow the same natural laws.</div><div>&nbsp;</div></font></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2013-03-08T20:10:41.000Z\" }, \"duration\": 20, \"grades\": [3], \"links\": [{ \"_id\": { \"$oid\": \"513a45d012c8310002000007\" }, \"note\": \"Click on the \\\"video\\\" tab to see the mixing wheel in action.\", \"title\": \"Video: Color Mixing Wheel\", \"url\": \"http://www.stevespanglerscience.com/experiment/color-mixing-wheel-sick-science\" }, { \"_id\": { \"$oid\": \"51806c801dcf6c0002000016\" }, \"url\": \"http://www.kidzone.ws/science/rainbow.htm\", \"title\": \"Catch a Rainbow Science Experiment\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"5180707d1dcf6c000200001a\" }, \"note\": \"This WILD TV segment shows program host, Wali Collins and entomologist Mark Hostetler conducting an experiment on moths’ attraction to light. Moths use the moon to navigate at night, the reason they are attracted to outdoor artificial white lights. Mark and Wali go to a dark spot at night and turn on a white light. Moths and other insects soon arrive and land on Wali near the light with one moth even beginning to lay eggs on Wali. At the end of the segment we also learn frogs and lizards are attracted to light; they know there will be insects around to eat.\", \"title\": \"Moths and Light\", \"url\": \"http://ca.pbslearningmedia.org/resource/vtl07.la.ws.style.moths/moths/\" }, { \"_id\": { \"$oid\": \"518071991dcf6c000200001e\" }, \"note\": \"All objects emit infrared radiation -- the hotter an object is, the more intensely it radiates infrared wavelengths. Human eyes cannot see these wavelengths, but with the help of false-color imaging, temperature differences become visible and invisible features are suddenly illuminated. In this interactive gallery produced for&nbsp;pbslearningmedia.org, see what hydrothermal features and other objects look like in both visible and infrared light.\", \"title\": \"Infrared Light Gallery\", \"url\": \"http://ca.pbslearningmedia.org/resource/ess05.sci.ess.earthsys.irgallery/infrared-gallery/\" }, { \"_id\": { \"$oid\": \"518072251dcf6c0002000026\" }, \"url\": \"http://www.best-telescope-guide.com/astronomy/4introduction-to-color-1.htm\", \"title\": \"Introduction to Color\", \"note\": \"\" }], \"materials_note\": \"<ul><li>If time is short, pre-cut circles (4-6\\\" diameter) from white corrugated cardboard.</li><li><font>Use circular&nbsp;objects to draw the three smaller circles inside of the cardboard circles. Or, if available, use a compass.</font></li><li>Need red, blue and yellow markers.</li><li>Yarn can replace string if it is strong.</li><li>Sharp pencils will work to poke holes if the scissors are not sharp or another sharp object such as a bamboo skewer will work.</li></ul><div><br></div>\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f87564edc4c210001000033\" }, { \"$oid\": \"4f8b2b8df400440001000051\" }, { \"$oid\": \"4f9e1f217b922d000100003a\" }, { \"$oid\": \"50fb6b2fdf018b0002000012\" }, { \"$oid\": \"51452360c2cb3b000200002a\" }, { \"$oid\": \"51452436c2cb3b000200002c\" }, { \"$oid\": \"514b46f857a8440002000006\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }, { \"$oid\": \"501c21858c154c000200002d\" }, { \"$oid\": \"506b60797b70820002000017\" }], \"note\": \"\", \"objective\": \"Make a&nbsp;<b>color wheel</b>&nbsp;to show that<font>&nbsp;that mixed primary colors produce secondary colors.</font><div><font><div><br></div></font></div>\", \"procedure\": \"<ol></ol><div><ol><li><font>Use science journal to make predictions, hypothesis or one statement based on class discussion of visual science of color mixing.&nbsp;</font></li><li><font>Trace a circle onto a piece of white corrugated cardboard. Try to get the circle to be between 4 to 6 inches in diameter. Use something like a cream cheese lid, sour cream lid, or pickle jar.</font></li><li><font>Cut the traced circle out using the scissors.</font></li><li><font>Trace 2 smaller circles on the cardboard disc. Try to make each of the circles equal in width. This will enhance the visual aspect of the experiment.&nbsp;Use circular objects to draw the circles inside of the cardboard circles. Or, if available, use a compass.</font></li><li><font>Use a ruler to draw a single line through the middle of the disc that spans the entire diameter of the disc. Each of the three circles in the disc should now be divided in half.</font></li><li><font>Color half of the smallest circle blue and the other half yellow. Color the middle circle half red and half yellow. Finally, color the largest circle half blue and half red.</font></li><li><font><b>Science aide or teacher will help or do this step</b>: using the pointed tip of the scissors, place two holes in the cardboard disc. Make sure the holes are an equal distance from the center of the disc and are about 1 inch apart. (You may use a bamboo skewer or other sharp object to poke these holes).</font></li><li><font>Use the scissors to cut a piece of string or yarn that is 2-3 feet long.</font></li><li><font>Thread the string or yarn through each of the holes in the disc and tie the ends of the string together. <b>Make sure the knot you tie is reliable and able to withstand a substantial amount of force.</b> You are going to be tugging pretty hard on it.</font></li><li><font>Using great care, push the sharp pencil into the center of the plate. Remind the students that the center is where the eight lines from the sections meet.</font></li><li><font>Spin the spinner and write conclusion in science journal. \\\"When I spun my color wheel, I saw...\\\" Make sure that you turn the wheel as tightly as you can before releasing it so that it will spin for a few extra seconds.</font></li><li><font>Think/pair/share - exchange spinners with a partner. Before spinning it, in your science journal answer the question: \\\"I think my partner's spinner will...\\\"</font></li><li><font>If time allows, have students make one or two more color spinners. Instruct them to choose different colors for those spinners and search for the combination of colors that work best.</font></li><li><font>Select a few spinners that utilize various colors. Ask the class which spinner will produce the whitest light. Spin each spinner to discover the answer.</font></li><li><font>Instruct the students to write their conclusions in their science notebook.</font></li><li><font>Students who have finished early may use the prism to examine the separation of colors.</font></li></ol></div>\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000050\" }, { \"$oid\": \"4f28bdf6023c640001000062\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<ol><li>Watch the video in the link provided prior to class so that you know what the wheel will look like.</li><li>Explore prior knowledge with students regarding light and color.</li></ol>\", \"term_ids\": [{ \"$oid\": \"4f53e1f8feb00c0001000038\" }, { \"$oid\": \"4f9e1d9e7b922d000100002e\" }, { \"$oid\": \"4f9ed05b7b922d000100004d\" }, { \"$oid\": \"4f9ed0887b922d0001000051\" }, { \"$oid\": \"514520a9c2cb3b000200001b\" }], \"title\": \"Mix Colors of Light\", \"updated_at\": { \"$date\": \"2013-05-01T01:15:40.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"51451bfac2cb3b0002000009\": { \"_id\": { \"$oid\": \"51451bfac2cb3b0002000009\" }, \"assessment\": \"<div>Can students describe rocks using appropriate terminology?</div><div><br></div>\", \"assistant_setup\": \"<ol><li>Read the activity.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Based on the procedure, assemble the materials into appropriate groups.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>If the teacher instructs you to do so, download and make copies, one for each group, of the handout,<i> Looking at Rocks.</i></li><li>If the rocks are not labeled, use masking tape to number the rocks from 1-10 (or as many rocks as you have). Place the tape on the bottom of the rocks so that it may be hidden for the last step of the procedure. If the rock is too small and it's not possible to hide the tape, simply remove the tape prior to that step.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ol>\", \"attachments\": [{ \"_id\": { \"$oid\": \"51451c2fc2cb3b000200000d\" }, \"caption\": \"Looking at Rocks\", \"w\": 612, \"h\": 792, \"attachment\": \"238f6b9495.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 420343 }, { \"_id\": { \"$oid\": \"51451c53c2cb3b0002000011\" }, \"caption\": \"Rock Observations\", \"w\": 612, \"h\": 792, \"attachment\": \"3a797647fa.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 19146 }], \"background\": \"<div><font><div>Rocks have many different properties. The&nbsp;properties of rocks will determine how rocks are used. Rocks can be sorted&nbsp;and classified according to their properties. Rock collecting is a popular hobby.</div><div>Many people enjoy collecting rocks. People who collect rocks for fun are called&nbsp;rock hounds.</div></font></div><font><div><font><br></font></div>There are many different types of rocks on Earth. Rocks are broken down into three families based on how they are formed. Igneous rocks are formed in the heat of a volcano, sedimentary rocks are formed when layers of soil and organic matter are pressed together for a long period of time and metamorphic rocks are formed when other types of rocks are exposed to high levels of heat, pressure or chemical changes below the surface of the earth. The processes used to make different types of rocks have an effect on their strength and resistance to breakage once they are fully formed. By knowing the strength of different types of rocks, engineers can choose stones that will best stand the test of time when using them for tools or structures.</font>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2013-03-17T01:27:25.000Z\" }, \"duration\": 30, \"grades\": [2], \"materials_note\": \"<ul><li><font>Handout&nbsp;entitled, Looking at Rocks.</font></li><li><font>Paper plates are used to define workspace. Paper towels, bins, or any other type of collection plate may be used.</font></li><li><font>Store sand in plastic zip baggies.</font></li><li><font>String may be used in lieu of measuring tape. Simply wrap the string around the rock, keep the measurement in place with your fingers, then measure that piece of string with a ruler to get the correct measurement of the rock.</font></li></ul>\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f8b2038f40044000100003c\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f2b1e4fccb71d0001000015\" }, { \"$oid\": \"4f9e1f107b922d0001000036\" }, { \"$oid\": \"4fa0cbcd0d3d05000100003f\" }, { \"$oid\": \"501c21858c154c000200002d\" }, { \"$oid\": \"5061383283f605000200006a\" }, { \"$oid\": \"5061388583f6050002000070\" }, { \"$oid\": \"5069d49c246eca0002000014\" }, { \"$oid\": \"514b483e57a844000200000b\" }, { \"$oid\": \"514b485057a844000200000d\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4f2f32386e0c410001000010\" }], \"note\": \"Encourage students to look for rocks at home and practice describing their attributes.<div><br></div>\", \"objective\": \"Investigate the properties and uses of rocks using the scientific process skills of o<font>bservation, description, classification, segmentation and blending.</font><div><font><br></font></div>\", \"procedure\": \"<ol><li>In their science journals or using the handout,&nbsp;<i>Rock Observations</i>, have students record their observations.</li><li>Pass out paper plates or other flat surface (paper towels will work in a pinch) that students will use to define their workspace.&nbsp;</li><li>Taking turns in their groups, students look at sand with hand lenses. Help students discover that&nbsp;sand is a lot of itty-bitty rocks.</li><li>In groups, students select a rock and study it with the magnifying glass.</li><li>Write some of the rock&nbsp;attributes presented (e.g., size, color, shape, and texture). Pass out the <i>Looking at Rocks</i> handout to help students spell and remember rock attributes.</li><li>Weigh and measure the rock and record data.</li><li>Scratch a piece or wood, plastic, and/or glass to determine it's hardness. Write your observations.</li><li>Put the rock back into the pool and select a new rock to describe. Observe as many rocks as you have time to study.</li><li>Pool all the rocks together again. Based on their observation charts have students try to find a specific numbered rock. Make sure that the numbers are hidden or removed.</li></ol>\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000036\" }, { \"$oid\": \"4f28bdf6023c64000100003e\" }, { \"$oid\": \"4f28bdf6023c640001000041\" }, { \"$oid\": \"4f28bdf6023c640001000042\" }], \"status\": \"pub\", \"subject\": \"earth\", \"teacher_setup\": \"<ul><li>Ask students, “What is sand?”</li><li>Seek prior knowledge regarding students' experiences with rocks.</li><li>Review use of magnifying glass as a scientific tool.</li><li>Brainstorm descriptive vocabulary to describe rock attributes&nbsp;(e.g., size, color, shape, and texture).&nbsp;Introduce and discuss other rock attributes such as hardness,&nbsp;patterns, crystals, etc.&nbsp;</li><li><font>Ask students, Does anyone have a collection? Why do&nbsp;</font>you like to collect _____?</li><li>Read <i>Everybody Needs a Rock</i> by Byrd Baylor.</li></ul>\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"505b912e8e6e180002000009\" }, { \"$oid\": \"5062977871e54a000200000f\" }, { \"$oid\": \"5103329767071c0002000002\" }, { \"$oid\": \"51451e6dc2cb3b0002000013\" }, { \"$oid\": \"51451eacc2cb3b0002000015\" }, { \"$oid\": \"51451ed6c2cb3b0002000017\" }, { \"$oid\": \"514521fbc2cb3b000200001e\" }], \"title\": \"Looking at Rocks\", \"updated_at\": { \"$date\": \"2013-03-21T17:49:40.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"51453278d960ad000200000a\": { \"_id\": { \"$oid\": \"51453278d960ad000200000a\" }, \"assessment\": \"<div>Review students’ Shadow Watching worksheets to see that they have correctly depicted the location of the sun and the shadow of an object.</div><div><br></div><div>If students perform the Three Little Pigs play, provide feedback using an oral language rubric.</div><div><br></div>\", \"assistant_setup\": \"<ul><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Based on the procedure, assemble the materials into appropriate groups.</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ul>\", \"attachments\": [{ \"_id\": { \"$oid\": \"514532c9d960ad0002000016\" }, \"caption\": \"Three Little Pigs Template\", \"w\": 603, \"h\": 720612, \"attachment\": \"f2f50d16a2.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 211460 }, { \"_id\": { \"$oid\": \"51453c5fd960ad000200002e\" }, \"caption\": \"Shadow Watching\", \"w\": 612, \"h\": 792, \"attachment\": \"b8e84d96d2.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 46907 }], \"background\": \"<ul><li>This activity can span 1-3 sessions, depending on how much time you have to explore shadows.</li><li>The Three Little Pigs puppet show is a wonderful ELA activity and good for crosscutting.</li><li>Please read the <i>Notes</i> section at the end of this page for extensions.</li></ul><div><font><div>You might not always notice it. But when you're in the sun, your shadow is often nearby. It may be in front of you or behind you. Or it may be to your side. Wherever it is, your shadow looks like you and moves like you.&nbsp;</div><div><br></div><div>Two things are needed to make a shadow. The first is light. The second is something that blocks the light. Together, these two things make an area that is darker than what is around it. This area is called a shadow.&nbsp;</div><div><br></div><div>Outside, people make shadows when they block light from the sun. Think about what happens when the sun is behind you. Your body blocks some of the sun's light, causing a shadow to form in front of you. The shadow takes on the shape of your body.&nbsp;</div><div><br></div><div>When the sun is in front of you, the shadow forms behind you. If the sun is to your left, then the shadow forms to your right. If the sun is to your right, then the shadow forms to your left.&nbsp;</div><div><br></div><div>Trees and building also make shadows. Their shadows can keep you cool on a hot sunny day. Shadows stay cool because they are blocked from the sun's light. The sun's light is what heats the ground, which then heats the air above.&nbsp;</div><div><br></div><div>Other things make shadows, too. Clouds make shadows when they pass in front of the sun. A baseball cap makes a shadow on your face, keeping it cool.&nbsp;</div><div><br></div><div>Shadows come in many sizes. A small person makes a small shadow. A big building makes a big shadow. The position of the sun affects the size of a shadow. A person or object blocks more light when the sun is low in the sky. More blocked light makes shadows longer. Less light is blocked when the sun is high in the sky. This makes shadows shorter.&nbsp;</div><div><br></div><div>Can you think of a really big shadow? Here's a hint: You see it every night.&nbsp;</div><div><br></div><div><br></div><div>The shadow from an umbrella on the beach can keep you cool. Image Credit: Liquid Library</div><div>The night sky is simply a very large shadow. The sky turns dark when your part of Earth spins away from the sun. Earth blocks the sun's light from reaching the sky above you. No light means no heat. That's why nights are almost always cooler than days.&nbsp;</div><div><br></div><div>Shadows exist in space, too. MESSENGER is a NASA spacecraft on its way to study Mercury. Mercury is the closest planet to the sun. The scientists who built MESSENGER wanted to make sure it wouldn't get too hot. So they covered the side that faces the sun with a large piece of fabric. The fabric is called a \\\"sunshade.\\\" It feels like a hard cloth. It makes a shadow by blocking the sun's light. This shadow keeps the spacecraft cool.&nbsp;</div><div><br></div><div>Back on Earth, you can do a lot of fun things with shadows. Outside, you can trace a shadow with chalk. Then you can watch how it changes as the sun moves across the sky. Inside, you can make shadows using a flashlight or lamp and a piece of poster board.&nbsp;</div><div><br></div><div>You can even chase your own shadow. Do you think you'd ever catch it?&nbsp;</div><div><br></div><div>Never look directly at the sun when learning about or playing with shadows. Looking at the sun can hurt your eyes.&nbsp;</div></font><font><br></font></div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2013-03-17T03:03:20.000Z\" }, \"duration\": 30, \"grades\": [0], \"links\": [{ \"_id\": { \"$oid\": \"5145328bd960ad000200000e\" }, \"url\": \"http://www.brighthubeducation.com/preschool-lesson-plans/38717-shadow-activities-and-lesson-for-preschool/\", \"title\": \"Source\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"5145329fd960ad0002000012\" }, \"url\": \"http://www.readwritethink.org/classroom-resources/lesson-plans/casting-shadows-across-literacy-1016.html?tab=4#session1\", \"title\": \"Source\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"51454132d960ad0002000033\" }, \"url\": \"http://www.nasa.gov/audience/forstudents/k-4/stories/F_Keeping_Cool_With_Shadows.html\", \"title\": \"Source\", \"note\": \"\" }], \"materials_note\": \"<ul><li><font>Butcher paper should be white, but other colors work. A white sheet is an alternative and more \\\"theater-like,\\\" but butcher paper is usually more accessible in schools.</font></li><li><font>Choose one or two of the following books to read aloud at the start of this activity:</font></li><ul><li>What Makes A Shadow? (Clyde Robert Bulla, June Otani)</li><li>Shadow Games (Editors of Klutz Press, Bill Mayer)</li><li>Moonbear's Shadow (Frank Asch)</li><li>Nothing Sticks Like A Shadow (Lynn Munsinger)</li></ul></ul>\", \"materials_per_clas_ids\": [{ \"$oid\": \"4f8b2070f400440001000044\" }, { \"$oid\": \"5145336dd960ad000200001c\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f9e1a5b7b922d0001000022\" }, { \"$oid\": \"5145334fd960ad000200001a\" }], \"materials_per_student_ids\": [{ \"$oid\": \"514532f3d960ad0002000018\" }], \"note\": \"<div><font><b>Extension #1:</b></font></div><div><ol><li>Divide the class into groups of three. In each group, assign one student to be the recorder, one student to be in charge of the flashlight, and one student to be the model.</li><li>Explain to students that they will be conducting an experiment based on the information you have just discussed. Darken the room by turning off the lights and shading the windows if possible. The student with the flashlight will cast the light on the model, causing a shadow to appear on the wall. The student with the flashlight will move closer to the model and then move farther away from the model. The recorder will write down the group's observations during this experiment.</li><li>Turn the room lights back on and bring the class together to share their observations. Compare their observations to their predictions recorded on the \\\"Do Shadows Change?\\\" chart.</li></ol><b>Extension #2:</b>&nbsp;</div><div><ol><li>Using sidewalk chalk, have a student stand up outside and outline their shadow on the payment or sidewalk. Have the other students talk about this child's silhouette and name his or her body parts.</li><li>Use the attachment, <i>Shadow Watching</i>, to record observations.</li></ol></div><div>Note: When you go out the first time, while participating in the measuring activity, mark an X which should be the place that you stand each time you measure that day. Explain to the children that the reason your shadow is moving is because of the Earth rotating around the sun. Explain these dynamics in terms that their age group can understand. As a fun experiment for the exercise with the sheet, have the children close their eyes while you call two students away. You can allow one of them to stand behind the sheet and have the children guess which classmate it is.</div>\", \"objective\": \"<div>Learn what makes a shadow.</div><div><br></div><div><font>Make connections and see relationships in science through discussion, dramatic play, and story.</font></div><div><br></div>\", \"procedure\": \"<ol><li>Read one of stories listed in the materials \\\"notes\\\" section of this activity.</li><li>Turn down the lights in the room and close the blinds. Tape a large piece of white butcher paper or a sheet to the front of the class room, or if doing this activity as a center, in one corner of the room.</li><li>Shine a flashlight shine through the paper or sheet.</li><li>Have a student hold his hand next to the flashlight, then move farther and farther away. Discuss what happened. The shadow on the wall gets smaller and smaller because the hand does not shut out so much light and there is less darkness on the wall.</li><li>Show kinders basic shadow hand puppets such as:</li><ul><li>The bunny: hold the first two fingers next to your thumb in a crooked, wide open V. This is his ears and make him hop moving your hands.</li><li>The dog: bend your pointy finger next to your thumb in half, your next two should remain straight and together, and the last one should make a V, off from the others. Animate your character, with a bark.</li><li>The swan: bend your thumb under all four fingers, which makes the swan's head and neck. Take your other hand and open all five fingers wide, right at the bend in your arm, this makes his feathers. Animate with honking noises.</li></ul><li><font>Allow time for students to take turns making one or more of the shadow hand puppets, or simply holding their hands out to see their shadow.</font></li><li><font>Read the story of <i>The Three Little Pigs</i>.</font></li><li><font>Have students color the handouts of the pigs, wolf and pig mother (do this based on supplies, time and preference -- each child might make an entire puppet set or one puppet).</font></li><li><font>Glue a craft stick to the back of each puppet after the students have cut them out (if there is time, mount the puppets onto&nbsp;card-stock&nbsp;and have an aide or parent cut them out).</font></li><li><font>If time permits, have students act out the play using the white paper/sheet as a theater backdrop.</font></li></ol>\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c64000100000d\" }, { \"$oid\": \"4f28bdf6023c64000100000e\" }, { \"$oid\": \"4f28bdf6023c640001000012\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<div>Allow students time to share prior knowledge about shadows. Ask them to explain the meaning of a shadow.</div><div><div>Using a flashlight to demonstrate shadows of your hand or other objects in the room, as the students to observe the shadows. Then, elicit responses to questions such as:&nbsp;</div><div><ul><li>If you jump up and down, what will your shadow do?</li><li>What will happen if you wriggle your body?</li><li>What will your shadow do if you throw a ball to it?</li><li><font>Do shadows change?</font></li><li><font>What happens to your shadow when you get close to the light?</font></li><li><font>What happens to your shadow when you move away from the light?</font></li><li><font>Ask students to make predictions regarding these questions and record them on chart paper with the heading, \\\"Do Shadows Change?\\\"</font></li></ul><font>Allow them to answer you in their own unique way, while guiding them to what is the correct response to each question.</font></div><div><br></div><div>Use a flashlight and white poster board during circle time to explore shadows. It is a great way to get them going for a tiny bit of exercise, as well. Have them watch one of their classmates interact with his or her shadow.</div></div><div><br></div><div><div>Review all the facts students have acquired about shadows by asking them to share what they have learned. If necessary, remind students that</div><div><ul><li>Shadows are formed when light cannot pass through an object.</li><li>The position of the light affects the direction of the shadow.</li><li>Shadows are created on the side of the object opposite the light source.</li><li>Shadows change size according to the position of the light source (i.e., the closer the light source, the larger the object's shadow; the further away the light source, the smaller the object's shadow).</li></ul></div></div>\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"4f9ed05b7b922d000100004d\" }, { \"$oid\": \"514539a0d960ad0002000029\" }], \"title\": \"Shadow Stick Puppets\", \"updated_at\": { \"$date\": \"2013-03-19T23:52:33.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"5174ba34d1ccd2000200000c\": { \"_id\": { \"$oid\": \"5174ba34d1ccd2000200000c\" }, \"assessment\": \"<ul><li>Informally assess student understanding of the content that drives the game, memory, observation, and investigation.</li><li>Formally test students by recording results of games played, e.g., number correct, wins/loses, descriptions of activity and results.&nbsp;</li></ul><div></div>\", \"assistant_setup\": \"<ul><li>Read the<a href=\\\"http://www.raftbayarea.org/readpdf?isid=491\\\"> idea sheet</a>&nbsp;for this activity.</li><li>Preview <a href=\\\"http://www.raftbayarea.org/ideas/Mixing%20it%20Up.pdf\\\">video</a>.</li><li>After checking into the school office, retrieve the H4S bin in the designated area.</li><li>Assemble the materials into appropriate groups. If games are prepared</li><li>Put on the H4S blue vest located in the materials bin.</li><li>Gather materials and arrange bins of supplies based on teacher’s grouping.</li><li>Assist during the activity.</li><li>Wipe the plastic bins clean and throw away consumable items.</li><li>Repack the materials bin and return to the designated area.</li></ul>\", \"background\": \"This activity is adapted from a RAFT (Resource Area for Teachers) i<a href=\\\"http://www.raftbayarea.org/readpdf?isid=491\\\">dea sheet</a>.&nbsp;The science behind this activity is written on that sheet.<div><a href=\\\"http://www.raftbayarea.org/?__utma=1.1055110381.1355257622.1362709472.1366603832.17&amp;__utmb=1.4.9.1366603838704&amp;__utmc=1&amp;__utmx=-&amp;__utmz=1.1362618793.15.2.utmcsr=us-mg5.mail.yahoo.com|utmccn=(referral)|utmcmd=referral|utmcct=/neo/launch&amp;__utmv=-&amp;__utmk=46038692\\\">RAFT</a> helps educators meet 21st century challenges by providing them with resources that help turn abstract and complex ideas into activities that students can grasp. Any information not on the idea sheet is on this page. Please visit their website for more exciting, teacher-tested activities!</div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2013-04-22T04:19:00.000Z\" }, \"duration\": 30, \"grades\": [0, 1, 2, 3, 4, 5], \"links\": [{ \"_id\": { \"$oid\": \"5174bb99d1ccd20002000015\" }, \"url\": \"http://www.livescience.com/24836-mystery-memory-recall.html\", \"title\": \"Mystery of Memory: Why It's Not Perfect\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"5174bbcdd1ccd20002000019\" }, \"url\": \"http://www.foxnews.com/health/2011/05/11/mystery-fading-childhood-memories-solved/\", \"title\": \"Mystery of Fading Childhood Memories Solved\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"5174bf1cd1ccd2000200001d\" }, \"note\": \"<font>Great 2min video for questioning the size of the brain as it relates to intelligence.</font><div>This video adapted from The Human Spark compares the size of a human brain with the brains of a chimp, a monkey and a rat. Robin Dunbar, from Oxford University, believes that primates have larger brains because of the complexity of the societies they live in.</div>\", \"title\": \"A Matter of Size\", \"url\": \"http://ca.pbslearningmedia.org/resource/hs11.sci.life.reg.mattsize/a-matter-of-size/\" }, { \"_id\": { \"$oid\": \"5174bf86d1ccd20002000021\" }, \"note\": \"\", \"title\": \"Thinking About Thinking\", \"url\": \"http://ca.pbslearningmedia.org/resource/hs11.sci.life.reg.thinkthink/thinking-about-thinking/\" }, { \"_id\": { \"$oid\": \"5174c098d1ccd20002000027\" }, \"note\": \"<div><div><p>Fast forward if you want to show your class a video of an actual human brain -- very cool!</p><p>These brief videos provide an introductory appreciation of how we learn skills and information, move, think, feel, speak and remember. They are brought to you by the UCLA Brain Research Institute and by Bruce H. Dobkin, MD, who directs the neurorehabilitation program in the Department of Neurology at UCLA. The videos especially aim to reach out to students in grade school to stir their interest, and to people with disabilities in walking, using an affected upper extremity, and loss of memory from neurological diseases such as stroke, brain trauma, tumors, multiple sclerosis, cerebral palsy, Parkinsons, and Alzheimers disease.<br></p></div></div>\", \"title\": \"How the Brain Works Part 1 (UCLA)\", \"url\": \"http://www.youtube.com/watch?v=I5ao8mvMeFE\" }, { \"_id\": { \"$oid\": \"5174c2fbd1ccd2000200002b\" }, \"url\": \"http://www.ehow.com/list_6496429_kindergarten-memory-games.html\", \"title\": \"Kindergarten Memory Games\", \"note\": \"\" }], \"materials_note\": \"A recycling clipboard, piece of binder, or other hard surface may be used in lieu of cardboard.\", \"materials_per_clas_ids\": [], \"materials_per_group_ids\": [{ \"$oid\": \"4f78ef032ab40b000100000d\" }, { \"$oid\": \"4f875d0cdc4c21000100004d\" }, { \"$oid\": \"4f8b2064f400440001000040\" }, { \"$oid\": \"50fb6b2fdf018b0002000012\" }], \"materials_per_student_ids\": [], \"note\": \"\", \"objective\": \"Students will play a memory game in order to improve a multitude of skills, including, but not limited to focusing, observation and investigation.\", \"procedure\": \"<font>In addition to the procedure listed on the RAFT idea sheet, do the following:</font><div><ol><li><font>If appropriate for your class level, show one of the videos about the brain on the links provided.</font></li><li><font>Follow the procedure listed on the <a href=\\\"http://www.raftbayarea.org/readpdf?isid=491\\\">idea sheet</a>.</font></li><li><font>If time permits, after the game is played, u</font>se several colors of caps, some marked and some unmarked. If your caps are the same colors, use masking tape to differentiate the caps.</li><li>Create a concentration type game, marking caps with matching or related stickers.</li></ol></div>\", \"standard_ids\": [{ \"$oid\": \"4f28bdf6023c640001000001\" }, { \"$oid\": \"4f28bdf6023c640001000010\" }, { \"$oid\": \"4f28bdf6023c640001000011\" }, { \"$oid\": \"4f28bdf6023c640001000024\" }, { \"$oid\": \"4f28bdf6023c640001000025\" }, { \"$oid\": \"4f28bdf6023c640001000027\" }, { \"$oid\": \"4f28bdf6023c64000100003f\" }, { \"$oid\": \"4f28bdf6023c640001000061\" }, { \"$oid\": \"4f28bdf6023c640001000083\" }, { \"$oid\": \"4f28bdf6023c6400010000a5\" }, { \"$oid\": \"4f28bdf6023c6400010000a6\" }], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"<ul><li>Read <a href=\\\"http://www.raftbayarea.org/readpdf?isid=491\\\">idea sheet</a> for this activity.</li><li>Preview RAFt&nbsp;<a href=\\\"http://www.raftbayarea.org/ideas/Mixing%20it%20Up.pdf\\\">video</a>&nbsp;and any other videos from the links provided that apply to your grade level.</li><li>Depending on your needs, prepare the game pieces so that the game produces meaningful experiences for your students. For example, if your class is studying mammals, place mammal and non-mammal stickers on the undersides of the caps to provide material for the game. The possibilities are endless, you might use odd/even numbers, mathematical equations, chemical formulas, pictures of living/non-living things, etc.</li><li>Review vocabulary.</li><li>Remind students that our memories are elastic and we have the ability to improve our memories with practice, work, and effort.</li></ul>\", \"term_ids\": [{ \"$oid\": \"4f2f5d7fa056bc000100002e\" }, { \"$oid\": \"50564365bc0c230002000010\" }, { \"$oid\": \"5174ba5ed1ccd2000200000e\" }, { \"$oid\": \"5174ba90d1ccd20002000010\" }, { \"$oid\": \"5174c7d5d1ccd2000200002e\" }], \"title\": \"Memory Game\", \"updated_at\": { \"$date\": \"2013-04-22T05:19:29.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" }, \"54400b299394a00002000005\": { \"_id\": { \"$oid\": \"54400b299394a00002000005\" }, \"assessment\": \"Informally assess students' understanding by asking questions about the experiment set-up, what happened during the experiment, and what they observed.\", \"assistant_setup\": \"<div>Make copies of handouts per teacher's instruction.</div><div><br></div>Divide supplies into group bins:<div>1 timer</div><div>1 thermometer</div><div>4 jars</div><div>4 post-its or other labels to attach onto jars, for pre-writing levels write the labels for the groups (e.g. water, oil, etc.)<div><br></div><div>Determine how and where you'll obtain hot tap water. If no hot water is available, use a plug-in hot water pot to boil water, then add the boiling water to two half-full pitchers of room temperature water to make warm water.&nbsp;</div><div>If possible, dispense cold or room temperature tap water into 2 jugs/pitchers for easy distribution later.</div><div><br></div><div><div><br></div><div>Per teacher's instructions, pre-fill jars with liquid or leave in containers for students to pour, keep candy out of bins to distribute later so children won't be distracted with candy.</div></div></div>\", \"attachments\": [{ \"_id\": { \"$oid\": \"544019a99394a00002000013\" }, \"caption\": \"Pumpkin Exploration\", \"w\": 612, \"h\": 792, \"attachment\": \"378b65c621.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 150738 }, { \"_id\": { \"$oid\": \"544053339394a0000200001f\" }, \"caption\": \"Candy Sink or Float\", \"w\": 612, \"h\": 792, \"attachment\": \"dd3c53e93c.pdf\", \"content_type\": \"application/pdf\", \"file_size\": 37313 }], \"background\": \"During a chemical reaction between two substances, the physical properties of both substances change. One such possible physical change is dissolving. Substances are contained of molecules, and different substances have different molecules. Substances can be liquids, solids, or gases.&nbsp;<div><br></div><div>Since substances have different molecules, not all substances will dissolve when you mix them together. When a substance dissolves into another substance, its molecules spread out and mix with the molecules of the other substance. When a substance doesn't dissolve into another substance, its molecules stick together and don't mix with the molecules in the other substance.&nbsp;</div>\", \"closure_duration\": 10, \"created_at\": { \"$date\": \"2014-10-16T18:15:05.000Z\" }, \"duration\": 30, \"grades\": [0, 1, 2, 3], \"links\": [{ \"_id\": { \"$oid\": \"54404e8e9394a0000200001b\" }, \"url\": \"http://lemonlimeadventures.com/dissolving-candy-pumpkins-halloween-science-kids/\", \"title\": \"Dissolving Candy Pumpkins\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"544324721c27240002000006\" }, \"url\": \"http://www.inquiryinaction.org/\", \"title\": \"Inquiry in Action\", \"note\": \"\" }, { \"_id\": { \"$oid\": \"544c6b897332bf0002000004\" }, \"url\": \"http://www.ducksters.com/science/chemistry/solutions_and_dissolving.php\", \"title\": \"Solutions and Dissolving\", \"note\": \"Chemistry for Kids\" }], \"materials_note\": \"Use candy pumpkins for Halloween, hearts for Valentines, etc.<div>Make sure that all candy is the same size.</div>\", \"materials_per_clas_ids\": [{ \"$oid\": \"544322bd1c27240002000002\" }], \"materials_per_group_ids\": [{ \"$oid\": \"4f459141eeaf0a0001000017\" }, { \"$oid\": \"4f45917deeaf0a0001000023\" }, { \"$oid\": \"4f459184eeaf0a0001000027\" }, { \"$oid\": \"4fa16ee50d3d050001000059\" }, { \"$oid\": \"54400e3e9394a00002000007\" }, { \"$oid\": \"54400e499394a00002000009\" }, { \"$oid\": \"54400e539394a0000200000b\" }, { \"$oid\": \"54400e879394a0000200000d\" }, { \"$oid\": \"54400e9e9394a0000200000f\" }], \"materials_per_student_ids\": [{ \"$oid\": \"4fa0cbcd0d3d05000100003f\" }], \"note\": \"\", \"objective\": \"<ul><li>Observe physical changes that occur during chemical reactions.</li><li><font>Learn to plan and carry out an experiment by making predictions, conducting test, recording observations and drawing logical conclusions.</font></li><li>Be able to make predictions, design and conduct tests, record their observations, and draw logical&nbsp;conclusions.</li></ul>\", \"procedure\": \"Remember to stop the activity in between steps to check for understanding and identify groups that need extra help.<br><ol><li>Demonstrate use of thermometer and timer. For younger students, don't worry if they don't master use of these tools, exposure is good.</li><li>We start all of our experiments with Predictions. What do you think will happen when you put the candy pumpkins into the different liquids? In hot and cold water? Oil? Vinegar? Write predictions on board and/or in science notebooks.</li><li>Use the grade-level appropriate handouts, filling them out as you go. Several handouts are attached, or you can use your own experiment template or a favorite one from the Internet.</li><li>Have one student from each group pour liquid into each for the four jars. If students are familiar with measuring liquids, use this opportunity to incorporate measuring cups, graduated cylinders, or anything you might have on hand to measure the liquids. Use the same amount of liquid in each jar. Jars should be of identical volume.</li><li>Use the thermometer to measure the temperature of cold and warm water. If you have time, measure the oil and vinegar. Record the temperatures.</li><li>Leave the thermometer in the warm water.</li><li>Drop one candy into each jar. Start the timer. Record start-time.</li><li>Observe the changing candies. Record observations using as much detail as possible. Pre-writers might choose one jar and draw a picture of before, during and after.</li><li>If your students are using the sink or float handout, have them write, \\\"yes,\\\" or \\\"no,\\\" in the appropriate boxes, or simply mark and \\\"x.\\\"</li><li>Have science aide help students put away materials.</li></ol>\", \"standard_ids\": [], \"status\": \"pub\", \"subject\": \"phys\", \"teacher_setup\": \"Use a KWL chart to explore prior knowledge temperature and dissolving. What is liquid? What is temperature? What happens to a substance dissolves? What is something that changes during a chemical reaction that you can see? Do all substances change in the same way when they're immersed in liquid?&nbsp;<div>How do you know when something has dissolved? When something hasn't dissolved?</div>\", \"term_ids\": [{ \"$oid\": \"4f78f94c2ab40b0001000056\" }, { \"$oid\": \"54404b999394a00002000015\" }, { \"$oid\": \"54404bd19394a00002000017\" }], \"title\": \"Dissolving Candy Science Experiment\", \"updated_at\": { \"$date\": \"2014-10-27T19:38:29.000Z\" }, \"user_id\": { \"$oid\": \"4f2db509af0c2e000100000b\" }, \"T\": \"act\" } };\n//# sourceMappingURL=idMapData.js.map"},{"id":2,"identifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/lib/idMap/idMapModule.js","name":"./lib/idMap/idMapModule.js","index":5,"index2":4,"size":5281,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[1],"assets":[],"issuer":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/app.js","issuerId":4,"issuerName":"./app/app.js","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":4,"moduleIdentifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/app.js","module":"./app/app.js","moduleName":"./app/app.js","type":"cjs require","userRequest":"../lib/idMap/idMapModule","loc":"8:22-57"}],"usedExports":true,"providedExports":null,"depth":1,"source":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Created by kenkeller on 3/18/17.\n */\nconst _ = require(\"lodash\");\nconst zombies = {};\nconst keys = {};\nconst subjects = {};\nconst attachments = {};\nlet numAttachmentCollisions = 0;\nlet numAttachments = 0;\nfunction dumpIdMap(idMap) {\n    _.forIn(idMap, (obj, id) => {\n        const T = obj[\"T\"];\n        console.log(`${T}; ${_.get(obj, \"_id.$oid\")}`);\n        if (T == \"act\") {\n            const subject = obj[\"subject\"];\n            subjects[subject] = true;\n        }\n        _.forIn(obj, (v, k) => {\n            _.set(keys, `${T}.${k}`, true);\n            if (Array.isArray(v) && v.length > 0 && _.has(obj, `${k}[0].$oid`)) {\n                let relationship = [];\n                let isPushedT = false;\n                for (let i = 0; i < v.length; ++i) {\n                    const kidId = _.get(obj, `${k}[${i}].$oid`);\n                    if (!(kidId in idMap))\n                        zombies[kidId] = true;\n                    else {\n                        const kid = idMap[kidId];\n                        if (!isPushedT) {\n                            relationship.push(kid[\"T\"]);\n                            isPushedT = true;\n                        }\n                        relationship.push(kidId);\n                    }\n                }\n                const relationshipString = relationship.join('|');\n                console.log(`\\t${relationshipString}`);\n            }\n            else if (k != \"_id\" && _.has(v, \"$oid\")) {\n                console.log(`\\t${k}; ${v[\"$oid\"]}`);\n            }\n            if (k == 'attachments') {\n                _.forIn(v, (a) => {\n                    const filename = a[\"attachment\"];\n                    ++numAttachments;\n                    if (filename in attachments) {\n                        numAttachmentCollisions += 1;\n                        attachments[filename] = attachments[filename] + 1;\n                    }\n                    else {\n                        attachments[filename] = 1;\n                    }\n                });\n            }\n        });\n    });\n    console.log('schema');\n    _.forIn(keys, (v, k) => {\n        console.log(`${k}: ${_.keys(v).sort().join(\"|\")}`);\n    });\n    console.log(`#attachments: ${numAttachments}`);\n    console.log(`#attachment collisions: ${numAttachmentCollisions}`);\n    _.forIn(attachments, (v, k) => {\n        if (v > 1)\n            console.log(`attachment ${k} is in ${v} S3 buckets!`);\n    });\n    console.log(`subjects: ${_.keys(subjects).join(\"|\")}`);\n    console.log('zombies');\n    console.log(`\\t#: ${Object.keys(zombies).length}`);\n    console.log(`\\tids: ${Object.keys(zombies).join(\"|\")}`);\n}\nexports.dumpIdMap = dumpIdMap;\nfunction bindIdMap(idMap) {\n    _.forIn(idMap, (obj, id) => {\n        _.forIn(obj, (v, k) => {\n            const T = obj[\"T\"];\n            /*\n             if (! (T in keys))\n             keys[T] = {};\n             if (! (k in keys[T]))\n             keys[T][k] = true;\n             */\n            _.set(keys, `${T}.${k}`, true);\n            if (Array.isArray(v)) {\n                // As in \"standard_ids\": [{\"$oid\": \"4f28bdf6023c640001000089\"}, ... ]\n                if (v.length > 0 && typeof v[0] == \"object\" && \"$oid\" in v[0]) {\n                    let kids = [];\n                    for (let i = 0; i < v.length; ++i) {\n                        const id = v[i][\"$oid\"];\n                        if (id in idMap)\n                            kids.push(idMap[id]);\n                        else\n                            zombies[id] = true;\n                    }\n                    obj[k] = kids;\n                }\n            }\n            else if (v && typeof v == \"object\" && \"$oid\" in v) {\n                const oid = v[\"$oid\"];\n                if (k == \"_id\") {\n                    // As in \"_id\": {\"$oid\": \"4f2db7c5af0c2e0001000011\"}\n                    obj[\"id\"] = oid;\n                }\n                else {\n                    // As in \"user_id\": {\"$oid\": \"4f2db509af0c2e000100000b\"}\n                    obj[k] = idMap[oid];\n                }\n            }\n        });\n    });\n}\nexports.bindIdMap = bindIdMap;\nconst unapprovedEmails = [\"zigotone@gmail.com\", \"e_w_enterprise@yahoo.com\"];\n// Find acts by grades AND subjects. 0 denotes kindergarten.\nfunction findActs(idMap, subjects, grades) {\n    const acts = _.filter(idMap, (obj, id) => {\n        if (obj[\"T\"] != \"act\")\n            return false;\n        if (obj[\"status\"] != \"pub\")\n            return false;\n        const u = obj[\"user_id\"];\n        const email = u[\"email\"];\n        if (unapprovedEmails.indexOf(email) > -1)\n            return false;\n        if (subjects && subjects.length > 0 && subjects.indexOf(obj[\"subject\"]) == -1)\n            return false;\n        if (grades && grades.length > 0) {\n            const i = _.intersection(obj[\"grades\"], grades);\n            if (i.length == 0)\n                return false;\n        }\n        return true;\n    });\n    return acts;\n}\nexports.findActs = findActs;\nfunction numActs(idMap, status) {\n    return _.reduce(idMap, function (sum, obj) {\n        return sum + (obj[\"T\"] == \"act\" ? (status == undefined || obj[\"status\"] == status ? 1 : 0) : 0);\n    }, 0);\n}\nexports.numActs = numActs;\n//# sourceMappingURL=idMapModule.js.map"},{"id":3,"identifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/style-loader/index.js!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/css-loader/index.js??ref--0-1!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/css/main.css","name":"./app/css/main.css","index":6,"index2":9,"size":938,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[1],"assets":[],"issuer":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/app.js","issuerId":4,"issuerName":"./app/app.js","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":4,"moduleIdentifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/app.js","module":"./app/app.js","moduleName":"./app/app.js","type":"cjs require","userRequest":"./css/main.css","loc":"9:0-25"}],"usedExports":true,"providedExports":null,"depth":1,"source":"// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js??ref--0-1!./main.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js??ref--0-1!./main.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js??ref--0-1!./main.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}"},{"id":4,"identifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/app.js","name":"./app/app.js","index":0,"index2":10,"size":6241,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[1],"assets":[],"issuer":null,"issuerId":null,"issuerName":null,"failed":false,"errors":0,"warnings":0,"reasons":[],"usedExports":true,"providedExports":null,"depth":0,"source":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Created by kenkeller on 4/13/17.\n */\nconst idMapData_1 = require(\"../lib/idMap/idMapData\");\nconst _ = require(\"lodash\");\nconst idMapModule_1 = require(\"../lib/idMap/idMapModule\");\nrequire(\"./css/main.css\");\nfunction prettySubject(subject) {\n    return `${subject.replace('phys', 'physical')} science <img src=\"img/${subject}.png\">`;\n}\nfunction prettyGrades(grades) {\n    let prettyGrades = [];\n    // Convert seqs i, i+1, ..., j to range i-j.\n    for (let i = 0; i < grades.length; ++i) {\n        let n = 0;\n        let lo, hi;\n        while (i < grades.length - 1 && grades[i + 1] - grades[i] == 1) {\n            if (n == 0)\n                lo = grades[i];\n            hi = grades[i + 1];\n            ++n;\n            ++i;\n        }\n        if (n > 0)\n            prettyGrades.push(`${lo}-${hi}`);\n        else\n            prettyGrades.push(grades[i]);\n    }\n    return `${prettyGrades.join(', ').replace('0', 'K')}`;\n}\nfunction prettyProperty(prop) {\n    return _.capitalize(prop.replace(\"term_\", \"vocabulary_\").replace(\"_clas_\", \"_class_\").replace(\"_ids\", \"\").replace(new RegExp(\"_\", 'g'), \" \"));\n}\nfunction prettyTerm(term) {\n    const word = term[\"term\"];\n    const def = term[\"def\"];\n    return `<li>${word}: ${def}`;\n}\nfunction prettyTerms(terms) {\n    return `<ol>${_.map(terms, (term) => prettyTerm(term)).join(\"\")}</ol>`;\n}\nfunction prettyMaterial(mat) {\n    const consumable = mat[\"consumable\"] ? \"consumable\" : \"reusable\";\n    return `<li>${mat[\"name\"]} <span class=\"consumable\">(${consumable})</span> ${_.get(mat, \"model\", \"\")} ${_.get(mat, \"mfg\", \"\")} ${_.get(mat, \"note\", \"\")}`;\n}\nfunction prettyMaterials(mats) {\n    return `<ol>${_.map(mats, (mat) => prettyMaterial(mat)).join(\"\")}</ol>`;\n}\nfunction prettyLink(link) {\n    return `<li><a target=\"h4s.resource\" href=\"${link[\"url\"]}\">${link[\"title\"]}</a>`;\n}\nfunction prettyLinks(links) {\n    return `<ul>${_.map(links, (link) => prettyLink(link)).join(\"\")}</ul>`;\n}\nfunction prettyAttachment(a) {\n    const filename = a[\"attachment\"];\n    const s3 = \"https://s3-us-west-1.amazonaws.com/h4s-attachments/\";\n    const img = filename.endsWith(\".pdf\") ? \"\" : `<br><img src=\"${s3}thumb_${filename}\"/>`;\n    return `<li><a target=\"h4s.resource\" href=\"${s3}${a[\"attachment\"]}\">${a[\"caption\"]}${img}</a>`;\n}\nfunction prettyAttachments(attachments) {\n    return `<ul>${_.map(attachments, (a) => prettyAttachment(a)).join(\"\")}</ul>`;\n}\nfunction renderSections(act, name, sections, handlers, html) {\n    _.forEach(sections, (k) => {\n        if (act[k] && (!_.isArray(act[k]) || (_.isArray(act[k]) && act[k].length > 0))) {\n            let frag;\n            if (k in handlers)\n                frag = handlers[k](k, act[k]);\n            else\n                frag = act[k];\n            html.push(`<div class=\"${name}\"><span class=\"heading\">${prettyProperty(k)}</span> <span class=\"content\"</div>${frag}</span></div>`);\n        }\n    });\n}\nexports.default = {\n    \"v\": \".1\",\n    \"onLoadIndex\": () => {\n        idMapModule_1.bindIdMap(idMapData_1.default);\n        const allActs = idMapModule_1.findActs(idMapData_1.default, [\"phys\", \"life\", \"earth\"], [0, 1, 2, 3, 4, 5, 6]);\n        const groupBySubject = _.groupBy(allActs, (act) => act[\"subject\"]);\n        _.forEach(groupBySubject, (acts, subject) => {\n            const subjectDiv = document.createElement('div');\n            subjectDiv.className = \"subjectHeading\";\n            document.body.appendChild(subjectDiv);\n            subjectDiv.innerHTML = prettySubject(subject);\n            const actList = document.createElement('ol');\n            subjectDiv.appendChild(actList);\n            const sortedActs = _.sortBy(acts, (act) => act[\"grades\"][0]);\n            _.forEach(sortedActs, (act) => {\n                const li = document.createElement('li');\n                actList.appendChild(li);\n                const a = document.createElement('a');\n                a.innerText = act[\"title\"];\n                a.href = `act.html?id=${act[\"id\"]}`;\n                a.target = \"activity\";\n                li.appendChild(a);\n                li.appendChild(document.createTextNode(\" \"));\n                const grades = act[\"grades\"];\n                const t = document.createTextNode(prettyGrades(grades));\n                li.appendChild(t);\n            });\n        });\n    },\n    \"onLoadAct\": () => {\n        idMapModule_1.bindIdMap(idMapData_1.default);\n        const urlParams = new URLSearchParams(window.location.search);\n        const id = urlParams.get('id');\n        if (!id || !(id in idMapData_1.default)) {\n            document.body.innerHTML = '';\n            return;\n        }\n        const act = idMapData_1.default[id];\n        let html = [];\n        const title = act[\"title\"];\n        document.title = title;\n        html.push(`<h1>${title}</h1>`);\n        const handlers = {\n            \"subject\": (k, v) => prettySubject(v),\n            \"grades\": (k, v) => prettyGrades(v),\n            \"term_ids\": (k, v) => prettyTerms(v),\n            \"links\": (k, v) => prettyLinks(v),\n            \"materials_per_clas_ids\": (k, v) => prettyMaterials(v),\n            \"materials_per_group_ids\": (k, v) => prettyMaterials(v),\n            \"materials_per_student_ids\": (k, v) => prettyMaterials(v),\n            \"attachments\": (k, v) => prettyAttachments(v),\n            \"standard_ids\": (k, v) => {\n                return _.map(v, (std) => std[\"standard_id\"]).join(\", \");\n            }\n        };\n        const data = [\"subject\", \"grades\", \"standard_ids\", \"duration\", \"closure_duration\"];\n        renderSections(act, \"feature\", data, handlers, html);\n        html.push(\"<h2>Activity</h2>\");\n        const sections = [\"objective\", \"background\", \"term_ids\", \"materials_note\", \"materials_per_clas_ids\", \"materials_per_group_ids\", \"materials_per_student_ids\", \"teacher_setup\", \"assistant_setup\", \"procedure\", \"assessment\", \"reflection\", \"note\"];\n        renderSections(act, \"section\", sections, handlers, html);\n        html.push(\"<h2>Resources</h2>\");\n        const appendix = [\"attachments\", \"links\"];\n        renderSections(act, \"appendix\", appendix, handlers, html);\n        document.body.innerHTML = html.join('\\n');\n    }\n};\n//# sourceMappingURL=app.js.map"},{"id":5,"identifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/css-loader/index.js?{\"modules\":true}!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/css/main.css","name":"./~/css-loader?{\"modules\":true}!./app/css/main.css","index":7,"index2":6,"size":1764,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[1],"assets":[],"issuer":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/style-loader/index.js!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/css-loader/index.js??ref--0-1!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/css/main.css","issuerId":3,"issuerName":"./app/css/main.css","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":3,"moduleIdentifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/style-loader/index.js!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/css-loader/index.js??ref--0-1!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/css/main.css","module":"./app/css/main.css","moduleName":"./app/css/main.css","type":"cjs require","userRequest":"!!../../node_modules/css-loader/index.js??ref--0-1!./main.css","loc":"4:14-86"}],"usedExports":true,"providedExports":null,"depth":2,"source":"exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"body, h1, h2 {\\n    font-family: sans-serif;\\n}\\n\\nbody {\\n    font-size: 11pt;\\n}\\n\\n._3QkMUD48GHs4-m3gsdbeDf {\\n    margin-bottom: 1ex;\\n}\\n\\n._1Gz7LIiX_qFFPwzzJ8yWuu {\\n    margin-bottom: 1ex;\\n}\\n\\na:link {\\n    color: #0095DA;\\n    text-decoration: none;\\n}\\na:visited {\\n    color: darkgray;\\n    text-decoration: none;\\n}\\na:hover {\\n    color: #7bc141;\\n    text-decoration: underline;\\n}\\n\\n._2wcwFnIPKiTDbKfdwXsi_f {\\n    color: #7bc141;\\n    color: #0095DA;\\n    font-size: larger;\\n    font-style: italic;\\n}\\n\\n._2wcwFnIPKiTDbKfdwXsi_f li {\\n    color: black;\\n    font-style: normal;\\n}\\n\\n._3q49EtMAoWui_Ex5rJve4t {\\n    color: black;\\n    margin-bottom: 1ex;\\n    width: 30ex;\\n    display: inline;\\n    padding: 1ex;\\n}\\n\\n._35_15-PWZnJyE7mcNQJapQ {\\n    font-size: smaller;\\n    font-style: italic;\\n    margin-bottom: 1ex;\\n}\\n\\n._24RqOIYgoXaVx-5oOs51uU {\\n    font-size: 11pt;\\n    font-family: sans-serif;\\n    border-width: thin;\\n}\\n\\n._24RqOIYgoXaVx-5oOs51uU ol, ._24RqOIYgoXaVx-5oOs51uU ul {\\n    padding: 0 0;\\n    margin: 0 0;\\n}\\n\\n._24RqOIYgoXaVx-5oOs51uU ol li, ._24RqOIYgoXaVx-5oOs51uU ul li {\\n    padding: 0 0;\\n    margin: 0 0;\\n    margin-left: 4ex;\\n}\\n\\n._2uHUQfo48CST2GOcQGyIzV {\\n    color: darkgrey;\\n    font-size: smaller;\\n    font-style: italic;\\n}\\n\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"section\": \"_3QkMUD48GHs4-m3gsdbeDf\",\n\t\"appendix\": \"_1Gz7LIiX_qFFPwzzJ8yWuu\",\n\t\"subjectHeading\": \"_2wcwFnIPKiTDbKfdwXsi_f\",\n\t\"feature\": \"_3q49EtMAoWui_Ex5rJve4t\",\n\t\"heading\": \"_35_15-PWZnJyE7mcNQJapQ\",\n\t\"content\": \"_24RqOIYgoXaVx-5oOs51uU\",\n\t\"consumable\": \"_2uHUQfo48CST2GOcQGyIzV\"\n};"},{"id":6,"identifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/css-loader/lib/css-base.js","name":"./~/css-loader/lib/css-base.js","index":8,"index2":5,"size":2260,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/css-loader/index.js?{\"modules\":true}!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/css/main.css","issuerId":5,"issuerName":"./~/css-loader?{\"modules\":true}!./app/css/main.css","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":5,"moduleIdentifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/css-loader/index.js?{\"modules\":true}!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/css/main.css","module":"./~/css-loader?{\"modules\":true}!./app/css/main.css","moduleName":"./~/css-loader?{\"modules\":true}!./app/css/main.css","type":"cjs require","userRequest":"../../node_modules/css-loader/lib/css-base.js","loc":"1:27-83"}],"usedExports":true,"providedExports":null,"depth":3,"source":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n"},{"id":7,"identifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/style-loader/addStyles.js","name":"./~/style-loader/addStyles.js","index":9,"index2":8,"size":8511,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/style-loader/index.js!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/css-loader/index.js??ref--0-1!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/css/main.css","issuerId":3,"issuerName":"./app/css/main.css","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":3,"moduleIdentifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/style-loader/index.js!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/css-loader/index.js??ref--0-1!/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/app/css/main.css","module":"./app/css/main.css","moduleName":"./app/css/main.css","type":"cjs require","userRequest":"!../../node_modules/style-loader/addStyles.js","loc":"7:13-69"}],"usedExports":true,"providedExports":null,"depth":2,"source":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nvar stylesInDom = {},\n\tmemoize = function(fn) {\n\t\tvar memo;\n\t\treturn function () {\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\t\treturn memo;\n\t\t};\n\t},\n\tisOldIE = memoize(function() {\n\t\t// Test for IE <= 9 as proposed by Browserhacks\n\t\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t\t// Tests for existence of standard globals is to allow style-loader \n\t\t// to operate correctly into non-standard environments\n\t\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\t\treturn window && document && document.all && !window.atob;\n\t}),\n\tgetElement = (function(fn) {\n\t\tvar memo = {};\n\t\treturn function(selector) {\n\t\t\tif (typeof memo[selector] === \"undefined\") {\n\t\t\t\tmemo[selector] = fn.call(this, selector);\n\t\t\t}\n\t\t\treturn memo[selector]\n\t\t};\n\t})(function (styleTarget) {\n\t\treturn document.querySelector(styleTarget)\n\t}),\n\tsingletonElement = null,\n\tsingletonCounter = 0,\n\tstyleElementsInsertedAtTop = [],\n\tfixUrls = require(\"./fixUrls\");\n\nmodule.exports = function(list, options) {\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n\tif (typeof options.insertInto === \"undefined\") options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list);\n\taddStylesToDom(styles, options);\n\n\treturn function update(newList) {\n\t\tvar mayRemove = [];\n\t\tfor(var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\n\t\t\t\t\tdomStyle.parts[j]();\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom(styles, options) {\n\tfor(var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles(list) {\n\tvar styles = [];\n\tvar newStyles = {};\n\tfor(var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\t\tif(!newStyles[id])\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse\n\t\t\tnewStyles[id].parts.push(part);\n\t}\n\treturn styles;\n}\n\nfunction insertStyleElement(options, styleElement) {\n\tvar styleTarget = getElement(options.insertInto)\n\tif (!styleTarget) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\n\tif (options.insertAt === \"top\") {\n\t\tif(!lastStyleElementInsertedAtTop) {\n\t\t\tstyleTarget.insertBefore(styleElement, styleTarget.firstChild);\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\tstyleTarget.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\tstyleTarget.appendChild(styleElement);\n\t\t}\n\t\tstyleElementsInsertedAtTop.push(styleElement);\n\t} else if (options.insertAt === \"bottom\") {\n\t\tstyleTarget.appendChild(styleElement);\n\t} else {\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\n\t}\n}\n\nfunction removeStyleElement(styleElement) {\n\tstyleElement.parentNode.removeChild(styleElement);\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\n\tif(idx >= 0) {\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement(options) {\n\tvar styleElement = document.createElement(\"style\");\n\toptions.attrs.type = \"text/css\";\n\n\tattachTagAttrs(styleElement, options.attrs);\n\tinsertStyleElement(options, styleElement);\n\treturn styleElement;\n}\n\nfunction createLinkElement(options) {\n\tvar linkElement = document.createElement(\"link\");\n\toptions.attrs.type = \"text/css\";\n\toptions.attrs.rel = \"stylesheet\";\n\n\tattachTagAttrs(linkElement, options.attrs);\n\tinsertStyleElement(options, linkElement);\n\treturn linkElement;\n}\n\nfunction attachTagAttrs(element, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\telement.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle(obj, options) {\n\tvar styleElement, update, remove;\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\n\t} else if(obj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\") {\n\t\tstyleElement = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, styleElement, options);\n\t\tremove = function() {\n\t\t\tremoveStyleElement(styleElement);\n\t\t\tif(styleElement.href)\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\n\t\t};\n\t} else {\n\t\tstyleElement = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, styleElement);\n\t\tremove = function() {\n\t\t\tremoveStyleElement(styleElement);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle(newObj) {\n\t\tif(newObj) {\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\n\t\t\t\treturn;\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (styleElement.styleSheet) {\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = styleElement.childNodes;\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\n\t\tif (childNodes.length) {\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyleElement.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag(styleElement, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyleElement.setAttribute(\"media\", media)\n\t}\n\n\tif(styleElement.styleSheet) {\n\t\tstyleElement.styleSheet.cssText = css;\n\t} else {\n\t\twhile(styleElement.firstChild) {\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\n\t\t}\n\t\tstyleElement.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink(linkElement, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/* If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls){\n\t\tcss = fixUrls(css);\n\t}\n\n\tif(sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = linkElement.href;\n\n\tlinkElement.href = URL.createObjectURL(blob);\n\n\tif(oldSrc)\n\t\tURL.revokeObjectURL(oldSrc);\n}\n"},{"id":8,"identifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/style-loader/fixUrls.js","name":"./~/style-loader/fixUrls.js","index":10,"index2":7,"size":3008,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/style-loader/addStyles.js","issuerId":7,"issuerName":"./~/style-loader/addStyles.js","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":7,"moduleIdentifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/style-loader/addStyles.js","module":"./~/style-loader/addStyles.js","moduleName":"./~/style-loader/addStyles.js","type":"cjs require","userRequest":"./fixUrls","loc":"35:11-31"}],"usedExports":true,"providedExports":null,"depth":3,"source":"\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n"},{"id":9,"identifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/webpack/buildin/global.js","name":"(webpack)/buildin/global.js","index":3,"index2":1,"size":509,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/lodash/lodash.js","issuerId":0,"issuerName":"./~/lodash/lodash.js","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":0,"moduleIdentifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/lodash/lodash.js","module":"./~/lodash/lodash.js","moduleName":"./~/lodash/lodash.js","type":"cjs require","userRequest":"global","loc":"1:0-41"}],"usedExports":true,"providedExports":null,"depth":2,"source":"var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n"},{"id":10,"identifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/webpack/buildin/module.js","name":"(webpack)/buildin/module.js","index":4,"index2":2,"size":517,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/lodash/lodash.js","issuerId":0,"issuerName":"./~/lodash/lodash.js","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":0,"moduleIdentifier":"/Users/kenkeller/swe/rubymine_workspace/h4s-ro-pub/node_modules/lodash/lodash.js","module":"./~/lodash/lodash.js","moduleName":"./~/lodash/lodash.js","type":"cjs require","userRequest":"module","loc":"1:0-41"}],"usedExports":true,"providedExports":null,"depth":2,"source":"module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n"}],"filteredModules":0,"children":[]}